; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34120.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__A5CE043C_test@pch DB 01H
__BB16330F_corecrt_math@h DB 01H
__2C3777E4_istream DB 01H
__B302D9D5_system_error DB 01H
__FA689788_stdexcept DB 01H
__CD2EDD69_xlocinfo DB 01H
__D2A73EA1_typeinfo DB 01H
__27E09C99_vcruntime_typeinfo@h DB 01H
__0AD82C7B_stdafx@cpp DB 01H
__B5D87B11_memory DB 01H
__F8C82F34_streambuf DB 01H
__C1EC35D3_stdio@h DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__C270FE0D_xlocnum DB 01H
__CC5A9EB3_ios DB 01H
__B3D47AF8_iterator DB 01H
__F4CBAA7A_xiosbase DB 01H
__5CF7981A_xlocale DB 01H
__999D2C1E_xfacet DB 01H
__4FE742DE_ostream DB 01H
__C10BFD8D_string DB 01H
__DB8826E5_vcruntime_exception@h DB 01H
__A278CDB8_xutility DB 01H
__72E6C6A2_vcruntime_new@h DB 01H
__08D5818C_type_traits DB 01H
__1C9D9D2D_test@cpp DB 01H
__9D8F0974_utility DB 01H
__3D3FEF16___msvc_string_view@hpp DB 01H
__83C9EC2B_xstring DB 01H
__F71A6AB7_xmemory DB 01H
__18A5FD50_stdafx@h DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z	; std::_Char_traits<char,int>::copy
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	??$exchange@PEAU_Iterator_base12@std@@$$T@std@@YAPEAU_Iterator_base12@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	??0_Basic_container_proxy_ptr12@std@@IEAA@XZ	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$allocator@D@std@@QEAA@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QEAAPEAD_K@Z	; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged
PUBLIC	?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer
PUBLIC	?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Switch_to_buf
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Deallocate_for_capacity
PUBLIC	?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_empty
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??0bad_cast@std@@QEAA@XZ			; std::bad_cast::bad_cast
PUBLIC	??1bad_cast@std@@UEAA@XZ			; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QEAA@AEBV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UEAAPEAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	?_Throw_bad_cast@std@@YAXXZ			; std::_Throw_bad_cast
PUBLIC	??1locale@std@@QEAA@XZ				; std::locale::~locale
PUBLIC	?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z	; std::locale::_Getfacet
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	??$_Max_limit@_J@std@@YA_JXZ			; std::_Max_limit<__int64>
PUBLIC	?stoi@std@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PEA_KH@Z ; std::stoi
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Convert_size@_K_K@std@@YA_K_K@Z		; std::_Convert_size<unsigned __int64,unsigned __int64>
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??R<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@QEBA@QEADQEBD_KD@Z ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back'::`2'::<lambda_1>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back'::`2'::<lambda_1>,char>
PUBLIC	??$_Unfancy@D@std@@YAPEADPEAD@Z			; std::_Unfancy<char>
PUBLIC	??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$max@_K@std@@YAAEB_KAEB_K0@Z			; std::max<unsigned __int64>
PUBLIC	??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z		; std::_Deallocate<16>
PUBLIC	??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
PUBLIC	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
PUBLIC	?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
PUBLIC	?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
PUBLIC	?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAX_K@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::__autoclassinit2
PUBLIC	??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Allocate_for_capacity<0>
PUBLIC	??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z	; std::addressof<char *>
PUBLIC	??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z ; std::exchange<std::_Facet_base *,std::nullptr_t>
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits>
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
PUBLIC	??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z ; std::_Allocate_at_least_helper<std::allocator<char> >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Get_size_of_n@$00@std@@YA_K_K@Z		; std::_Get_size_of_n<1>
PUBLIC	main
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GC@OGIIGPAB@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@MIFAIHL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast@			; `string'
PUBLIC	_TI2?AVbad_cast@std@@
PUBLIC	_CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BG@HGEDEDEC@invalid?5stoi?5argument@	; `string'
PUBLIC	??_C@_0BL@MFFNMGGC@stoi?5argument?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ ; `string'
PUBLIC	??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ ; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_C@_03EJKFMIHK@rus@				; `string'
PUBLIC	??_C@_0CC@GJFPIFCJ@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@ ; `string'
PUBLIC	??_C@_0CJ@HEBGIABN@?N?x?h?a?j?$OA?3?B?b?e?d?h?r?e?5?d?$OA?ry?5?b?5?o?p?$OA?b?h?k?$PM?m?n@ ; `string'
PUBLIC	??_C@_0BC@DMIKHOJH@?N?x?h?a?j?$OA?3?M?E?J?N?P?E?J?R?M?N@ ; `string'
PUBLIC	??_C@_0DC@EPALFKK@?B?b?e?d?h?r?e?5?d?$OA?r?s?5c?b?n?e?c?n?5?p?n?f?d?e?m?h?$PP?5?b?5@ ; `string'
PUBLIC	??_C@_0BL@DOGGEIDJ@?N?x?h?a?j?$OA?3?B?$PL?5?e?y?e?5?m?e?5?p?n?d?h?k?h?q?$PM?$CB@ ; `string'
PUBLIC	??_C@_0BD@COMGIBML@?5?9?5?b?h?q?n?j?n?q?m?$PL?i?5?c?n?d?4@ ; `string'
PUBLIC	??_C@_0BG@BCBIAMKN@?5?9?5?m?e?5?b?h?q?n?j?n?q?m?$PL?i?5?c?n?d?4@ ; `string'
PUBLIC	??_C@_0CP@PJJGMNHH@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?b?b?e?d?e?m?m?n?c?n?5?d?m?$PP@ ; `string'
PUBLIC	??_C@_06BMGEFDJH@?$NP?m?b?$OA?p?$PM@		; `string'
PUBLIC	??_C@_07JBGLOLNM@?T?e?b?p?$OA?k?$PM@		; `string'
PUBLIC	??_C@_04FAAJLMOP@?L?$OA?p?r@			; `string'
PUBLIC	??_C@_06PNLHGGPK@?$MA?o?p?e?k?$PM@		; `string'
PUBLIC	??_C@_03MEHOOJFI@?L?$OA?i@			; `string'
PUBLIC	??_C@_04JPDCCHCO@?H?$PO?m?$PM@			; `string'
PUBLIC	??_C@_04JLLPFLJM@?H?$PO?k?$PM@			; `string'
PUBLIC	??_C@_06JMCJJLBN@?$MA?b?c?s?q?r@		; `string'
PUBLIC	??_C@_08ECPNNGFL@?Q?e?m?r?$PP?a?p?$PM@		; `string'
PUBLIC	??_C@_07KDBBAIGI@?N?j?r?$PP?a?p?$PM@		; `string'
PUBLIC	??_C@_06EKHNJIII@?M?n?$PP?a?p?$PM@		; `string'
PUBLIC	??_C@_07MJKMOEOM@?D?e?j?$OA?a?p?$PM@		; `string'
PUBLIC	??_C@_0BP@KNLOKJBO@?4?5?M?$OA?g?b?$OA?m?h?e?5?b?b?e?d?e?m?m?n?c?n?5?l?e?q?$PP?v?$OA?3?5@ ; `string'
PUBLIC	??_C@_0BK@INKKNDJD@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?l?e?q?$PP?v?$OA?3?5@ ; `string'
PUBLIC	??_C@_0BN@DIPLOPKJ@?4?5?M?$OA?g?b?$OA?m?h?e?5?l?e?q?$PP?v?$OA?5?p?n?f?d?e?m?h?$PP?3?5@ ; `string'
PUBLIC	??_C@_06CCKJDNGA@?5?d?m?e?i?5@			; `string'
PUBLIC	??_C@_0CC@EPIHPMBK@?D?n?5?d?m?$PP?5?b?$OA?x?e?c?n?5?p?n?f?d?e?m?h?$PP?5?n?q?r?$OA?k?n?q?$PM@ ; `string'
EXTRN	??_M@YAXPEAX_K1P6AX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	__imp__errno:PROC
EXTRN	__imp_strtol:PROC
EXTRN	memcpy:PROC
EXTRN	strlen:PROC
EXTRN	?_Xinvalid_argument@std@@YAXPEBD@Z:PROC		; std::_Xinvalid_argument
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPEBD@Z:PROC		; std::_Xout_of_range
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	??_Ebad_cast@std@@UEAAPEAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	__imp_setlocale:PROC
EXTRN	__imp_??Bid@locale@std@@QEAA_KXZ:PROC
EXTRN	?_Getgloballocale@locale@std@@CAPEAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	__imp_?is@?$ctype@D@std@@QEBA_NFD@Z:PROC
EXTRN	__imp_?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z:PROC
EXTRN	__imp_?good@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEBA_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEAA_J_J@Z:PROC
EXTRN	__imp_?getloc@ios_base@std@@QEBA?AVlocale@2@XZ:PROC
EXTRN	__imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ:PROC
EXTRN	__imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ:PROC
EXTRN	__imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z:PROC
EXTRN	?defineLeapYear@@YA_NH@Z:PROC			; defineLeapYear
EXTRN	?countDays@@YAHHHHHHH@Z:PROC			; countDays
EXTRN	?countNumber@@YAHHHH@Z:PROC			; countNumber
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__imp_?id@?$ctype@D@std@@2V0locale@2@A:QWORD
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB DQ 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN4
	DD	imagerel $LN4+54
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN4
	DD	imagerel $LN4+117
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+125
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+97
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN5
	DD	imagerel $LN5+84
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+97
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+78
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN5
	DD	imagerel $LN5+84
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+86
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+78
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN5
	DD	imagerel $LN5+84
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD imagerel $LN4
	DD	imagerel $LN4+86
	DD	imagerel $unwind$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+54
	DD	imagerel $unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+66
	DD	imagerel $unwind$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z DD imagerel $LN4
	DD	imagerel $LN4+48
	DD	imagerel $unwind$?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z DD imagerel $LN6
	DD	imagerel $LN6+88
	DD	imagerel $unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD imagerel $LN4
	DD	imagerel $LN4+43
	DD	imagerel $unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+456
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+86
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+55
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN8
	DD	imagerel $LN8+135
	DD	imagerel $unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+155
	DD	imagerel $unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAU_Iterator_base12@std@@$$T@std@@YAPEAU_Iterator_base12@0@AEAPEAU10@$$QEA$$T@Z DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$??$exchange@PEAU_Iterator_base12@std@@$$T@std@@YAPEAU_Iterator_base12@0@AEAPEAU10@$$QEA$$T@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+56
	DD	imagerel $unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+102
	DD	imagerel $unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen_string@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?_Xlen_string@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@D@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??0?$allocator@D@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD imagerel $LN13
	DD	imagerel $LN13+212
	DD	imagerel $unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD imagerel $LN5
	DD	imagerel $LN5+100
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+100
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD imagerel $LN6
	DD	imagerel $LN6+85
	DD	imagerel $unwind$?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z DD imagerel $LN4
	DD	imagerel $LN4+102
	DD	imagerel $unwind$?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+58
	DD	imagerel $unwind$?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+198
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+168
	DD	imagerel $unwind$?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+218
	DD	imagerel $unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z DD imagerel $LN4
	DD	imagerel $LN4+236
	DD	imagerel $unwind$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel $LN4
	DD	imagerel $LN4+57
	DD	imagerel $unwind$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel $LN4
	DD	imagerel $LN4+57
	DD	imagerel $unwind$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN4
	DD	imagerel $LN4+53
	DD	imagerel $unwind$?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN4
	DD	imagerel $LN4+53
	DD	imagerel $unwind$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN4
	DD	imagerel $LN4+227
	DD	imagerel $unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+139
	DD	imagerel $unwind$?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z DD imagerel $LN6
	DD	imagerel $LN6+272
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+203
	DD	imagerel $unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ DD imagerel $LN4
	DD	imagerel $LN4+57
	DD	imagerel $unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ DD imagerel $LN4
	DD	imagerel $LN4+57
	DD	imagerel $unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+45
	DD	imagerel $unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_cast@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+92
	DD	imagerel $unwind$??0bad_cast@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_cast@std@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$??1bad_cast@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_cast@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+78
	DD	imagerel $unwind$??0bad_cast@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_cast@std@@UEAAPEAXI@Z DD imagerel $LN5
	DD	imagerel $LN5+84
	DD	imagerel $unwind$??_Gbad_cast@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_cast@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?_Throw_bad_cast@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1locale@std@@QEAA@XZ DD imagerel $LN7
	DD	imagerel $LN7+145
	DD	imagerel $unwind$??1locale@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z DD imagerel $LN8
	DD	imagerel $LN8+209
	DD	imagerel $unwind$?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z DD imagerel $LN11
	DD	imagerel $LN11+399
	DD	imagerel $unwind$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA DD imagerel ?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA+37
	DD	imagerel $unwind$?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA DD imagerel ?dtor$1@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA
	DD	imagerel ?dtor$1@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA+39
	DD	imagerel $unwind$?dtor$1@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Max_limit@_J@std@@YA_JXZ DD imagerel $LN4
	DD	imagerel $LN4+56
	DD	imagerel $unwind$??$_Max_limit@_J@std@@YA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stoi@std@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PEA_KH@Z DD imagerel $LN6
	DD	imagerel $LN6+273
	DD	imagerel $unwind$?stoi@std@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PEA_KH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN6
	DD	imagerel $LN6+120
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Convert_size@_K_K@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??$_Convert_size@_K_K@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+54
	DD	imagerel $unwind$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z DD imagerel $LN7
	DD	imagerel $LN7+582
	DD	imagerel $unwind$??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z@4HA DD imagerel ?dtor$0@?0???$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@QEBA@QEADQEBD_KD@Z DD imagerel $LN3
	DD	imagerel $LN3+162
	DD	imagerel $unwind$??R<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@QEBA@QEADQEBD_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z DD imagerel $LN6
	DD	imagerel $LN6+537
	DD	imagerel $unwind$??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@D@std@@YAPEADPEAD@Z DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN6
	DD	imagerel $LN6+120
	DD	imagerel $unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+100
	DD	imagerel $unwind$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+115
	DD	imagerel $unwind$??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+89
	DD	imagerel $unwind$??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ DD imagerel $LN4
	DD	imagerel $LN4+75
	DD	imagerel $unwind$?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+84
	DD	imagerel $unwind$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+187
	DD	imagerel $unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z DD imagerel $LN4
	DD	imagerel $LN4+99
	DD	imagerel $unwind$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+93
	DD	imagerel $unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+95
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+78
	DD	imagerel $unwind$??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+74
	DD	imagerel $unwind$??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+280
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$00@std@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$_Get_size_of_n@$00@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN43
	DD	imagerel $LN43+2654
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$0 DD imagerel main$dtor$0
	DD	imagerel main$dtor$0+36
	DD	imagerel $unwind$main$dtor$0
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$1 DD imagerel main$dtor$1
	DD	imagerel main$dtor$1+39
	DD	imagerel $unwind$main$dtor$1
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$2 DD imagerel main$dtor$2
	DD	imagerel main$dtor$2+39
	DD	imagerel $unwind$main$dtor$2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$3 DD imagerel main$dtor$3
	DD	imagerel main$dtor$3+39
	DD	imagerel $unwind$main$dtor$3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$4 DD imagerel main$dtor$4
	DD	imagerel main$dtor$4+39
	DD	imagerel $unwind$main$dtor$4
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$5 DD imagerel main$dtor$5
	DD	imagerel main$dtor$5+39
	DD	imagerel $unwind$main$dtor$5
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$6 DD imagerel main$dtor$6
	DD	imagerel main$dtor$6+39
	DD	imagerel $unwind$main$dtor$6
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$7 DD imagerel main$dtor$7
	DD	imagerel main$dtor$7+39
	DD	imagerel $unwind$main$dtor$7
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$8 DD imagerel main$dtor$8
	DD	imagerel main$dtor$8+39
	DD	imagerel $unwind$main$dtor$8
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$9 DD imagerel main$dtor$9
	DD	imagerel main$dtor$9+39
	DD	imagerel $unwind$main$dtor$9
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$10 DD imagerel main$dtor$10
	DD	imagerel main$dtor$10+39
	DD	imagerel $unwind$main$dtor$10
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$11 DD imagerel main$dtor$11
	DD	imagerel main$dtor$11+39
	DD	imagerel $unwind$main$dtor$11
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$12 DD imagerel main$dtor$12
	DD	imagerel main$dtor$12+39
	DD	imagerel $unwind$main$dtor$12
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$13 DD imagerel main$dtor$13
	DD	imagerel main$dtor$13+39
	DD	imagerel $unwind$main$dtor$13
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$14 DD imagerel main$dtor$14
	DD	imagerel main$dtor$14+39
	DD	imagerel $unwind$main$dtor$14
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$15 DD imagerel main$dtor$15
	DD	imagerel main$dtor$15+39
	DD	imagerel $unwind$main$dtor$15
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$16 DD imagerel main$dtor$16
	DD	imagerel main$dtor$16+39
	DD	imagerel $unwind$main$dtor$16
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$17 DD imagerel main$dtor$17
	DD	imagerel main$dtor$17+39
	DD	imagerel $unwind$main$dtor$17
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$18 DD imagerel main$dtor$18
	DD	imagerel main$dtor$18+39
	DD	imagerel $unwind$main$dtor$18
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$20 DD imagerel main$dtor$20
	DD	imagerel main$dtor$20+57
	DD	imagerel $unwind$main$dtor$20
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN25
	DD	imagerel $LN25+945
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+80
	DD	imagerel $unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+118
	DD	imagerel $unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD imagerel $LN22
	DD	imagerel $LN22+864
	DD	imagerel $unwind$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA DD imagerel ?dtor$0@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA DD imagerel ?dtor$1@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
	DD	imagerel ?dtor$1@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA+39
	DD	imagerel $unwind$?dtor$1@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA DD imagerel ?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
	DD	imagerel ?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA+80
	DD	imagerel $unwind$?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+150
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN7
	DD	imagerel $LN7+263
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN7
	DD	imagerel $LN7+118
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+150
	DD	imagerel $unwind$??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA DD imagerel ?dtor$0@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DD imagerel $LN26
	DD	imagerel $LN26+924
	DD	imagerel $unwind$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD imagerel ?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD imagerel ?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
	DD	imagerel ?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA+80
	DD	imagerel $unwind$?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CC@EPIHPMBK@?D?n?5?d?m?$PP?5?b?$OA?x?e?c?n?5?p?n?f?d?e?m?h?$PP?5?n?q?r?$OA?k?n?q?$PM@
CONST	SEGMENT
??_C@_0CC@EPIHPMBK@?D?n?5?d?m?$PP?5?b?$OA?x?e?c?n?5?p?n?f?d?e?m?h?$PP?5?n?q?r?$OA?k?n?q?$PM@ DB 0c4H
	DB	0eeH, ' ', 0e4H, 0edH, 0ffH, ' ', 0e2H, 0e0H, 0f8H, 0e5H, 0e3H
	DB	0eeH, ' ', 0f0H, 0eeH, 0e6H, 0e4H, 0e5H, 0edH, 0e8H, 0ffH, ' ', 0eeH
	DB	0f1H, 0f2H, 0e0H, 0ebH, 0eeH, 0f1H, 0fcH, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CCKJDNGA@?5?d?m?e?i?5@
CONST	SEGMENT
??_C@_06CCKJDNGA@?5?d?m?e?i?5@ DB ' ', 0e4H, 0edH, 0e5H, 0e9H, ' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DIPLOPKJ@?4?5?M?$OA?g?b?$OA?m?h?e?5?l?e?q?$PP?v?$OA?5?p?n?f?d?e?m?h?$PP?3?5@
CONST	SEGMENT
??_C@_0BN@DIPLOPKJ@?4?5?M?$OA?g?b?$OA?m?h?e?5?l?e?q?$PP?v?$OA?5?p?n?f?d?e?m?h?$PP?3?5@ DB '.'
	DB	' ', 0cdH, 0e0H, 0e7H, 0e2H, 0e0H, 0edH, 0e8H, 0e5H, ' ', 0ecH
	DB	0e5H, 0f1H, 0ffH, 0f6H, 0e0H, ' ', 0f0H, 0eeH, 0e6H, 0e4H, 0e5H
	DB	0edH, 0e8H, 0ffH, ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@INKKNDJD@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?l?e?q?$PP?v?$OA?3?5@
CONST	SEGMENT
??_C@_0BK@INKKNDJD@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?l?e?q?$PP?v?$OA?3?5@ DB 0cfH
	DB	0eeH, 0f0H, 0ffH, 0e4H, 0eaH, 0eeH, 0e2H, 0fbH, 0e9H, ' ', 0edH
	DB	0eeH, 0ecH, 0e5H, 0f0H, ' ', 0ecH, 0e5H, 0f1H, 0ffH, 0f6H, 0e0H
	DB	': ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KNLOKJBO@?4?5?M?$OA?g?b?$OA?m?h?e?5?b?b?e?d?e?m?m?n?c?n?5?l?e?q?$PP?v?$OA?3?5@
CONST	SEGMENT
??_C@_0BP@KNLOKJBO@?4?5?M?$OA?g?b?$OA?m?h?e?5?b?b?e?d?e?m?m?n?c?n?5?l?e?q?$PP?v?$OA?3?5@ DB '.'
	DB	' ', 0cdH, 0e0H, 0e7H, 0e2H, 0e0H, 0edH, 0e8H, 0e5H, ' ', 0e2H
	DB	0e2H, 0e5H, 0e4H, 0e5H, 0edH, 0edH, 0eeH, 0e3H, 0eeH, ' ', 0ecH
	DB	0e5H, 0f1H, 0ffH, 0f6H, 0e0H, ': ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MJKMOEOM@?D?e?j?$OA?a?p?$PM@
CONST	SEGMENT
??_C@_07MJKMOEOM@?D?e?j?$OA?a?p?$PM@ DB 0c4H, 0e5H, 0eaH, 0e0H, 0e1H, 0f0H
	DB	0fcH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06EKHNJIII@?M?n?$PP?a?p?$PM@
CONST	SEGMENT
??_C@_06EKHNJIII@?M?n?$PP?a?p?$PM@ DB 0cdH, 0eeH, 0ffH, 0e1H, 0f0H, 0fcH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07KDBBAIGI@?N?j?r?$PP?a?p?$PM@
CONST	SEGMENT
??_C@_07KDBBAIGI@?N?j?r?$PP?a?p?$PM@ DB 0ceH, 0eaH, 0f2H, 0ffH, 0e1H, 0f0H
	DB	0fcH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08ECPNNGFL@?Q?e?m?r?$PP?a?p?$PM@
CONST	SEGMENT
??_C@_08ECPNNGFL@?Q?e?m?r?$PP?a?p?$PM@ DB 0d1H, 0e5H, 0edH, 0f2H, 0ffH, 0e1H
	DB	0f0H, 0fcH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06JMCJJLBN@?$MA?b?c?s?q?r@
CONST	SEGMENT
??_C@_06JMCJJLBN@?$MA?b?c?s?q?r@ DB 0c0H, 0e2H, 0e3H, 0f3H, 0f1H, 0f2H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04JLLPFLJM@?H?$PO?k?$PM@
CONST	SEGMENT
??_C@_04JLLPFLJM@?H?$PO?k?$PM@ DB 0c8H, 0feH, 0ebH, 0fcH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04JPDCCHCO@?H?$PO?m?$PM@
CONST	SEGMENT
??_C@_04JPDCCHCO@?H?$PO?m?$PM@ DB 0c8H, 0feH, 0edH, 0fcH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03MEHOOJFI@?L?$OA?i@
CONST	SEGMENT
??_C@_03MEHOOJFI@?L?$OA?i@ DB 0ccH, 0e0H, 0e9H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PNLHGGPK@?$MA?o?p?e?k?$PM@
CONST	SEGMENT
??_C@_06PNLHGGPK@?$MA?o?p?e?k?$PM@ DB 0c0H, 0efH, 0f0H, 0e5H, 0ebH, 0fcH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04FAAJLMOP@?L?$OA?p?r@
CONST	SEGMENT
??_C@_04FAAJLMOP@?L?$OA?p?r@ DB 0ccH, 0e0H, 0f0H, 0f2H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07JBGLOLNM@?T?e?b?p?$OA?k?$PM@
CONST	SEGMENT
??_C@_07JBGLOLNM@?T?e?b?p?$OA?k?$PM@ DB 0d4H, 0e5H, 0e2H, 0f0H, 0e0H, 0ebH
	DB	0fcH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMGEFDJH@?$NP?m?b?$OA?p?$PM@
CONST	SEGMENT
??_C@_06BMGEFDJH@?$NP?m?b?$OA?p?$PM@ DB 0dfH, 0edH, 0e2H, 0e0H, 0f0H, 0fcH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@PJJGMNHH@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?b?b?e?d?e?m?m?n?c?n?5?d?m?$PP@
CONST	SEGMENT
??_C@_0CP@PJJGMNHH@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?b?b?e?d?e?m?m?n?c?n?5?d?m?$PP@ DB 0cfH
	DB	0eeH, 0f0H, 0ffH, 0e4H, 0eaH, 0eeH, 0e2H, 0fbH, 0e9H, ' ', 0edH
	DB	0eeH, 0ecH, 0e5H, 0f0H, ' ', 0e2H, 0e2H, 0e5H, 0e4H, 0e5H, 0edH
	DB	0edH, 0eeH, 0e3H, 0eeH, ' ', 0e4H, 0edH, 0ffH, ' ', 0e2H, ' ', 0e3H
	DB	0eeH, 0e4H, 0f3H, ' ', 0f0H, 0e0H, 0e2H, 0e5H, 0edH, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BCBIAMKN@?5?9?5?m?e?5?b?h?q?n?j?n?q?m?$PL?i?5?c?n?d?4@
CONST	SEGMENT
??_C@_0BG@BCBIAMKN@?5?9?5?m?e?5?b?h?q?n?j?n?q?m?$PL?i?5?c?n?d?4@ DB ' - ', 0edH
	DB	0e5H, ' ', 0e2H, 0e8H, 0f1H, 0eeH, 0eaH, 0eeH, 0f1H, 0edH, 0fbH
	DB	0e9H, ' ', 0e3H, 0eeH, 0e4H, '.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@COMGIBML@?5?9?5?b?h?q?n?j?n?q?m?$PL?i?5?c?n?d?4@
CONST	SEGMENT
??_C@_0BD@COMGIBML@?5?9?5?b?h?q?n?j?n?q?m?$PL?i?5?c?n?d?4@ DB ' - ', 0e2H
	DB	0e8H, 0f1H, 0eeH, 0eaH, 0eeH, 0f1H, 0edH, 0fbH, 0e9H, ' ', 0e3H
	DB	0eeH, 0e4H, '.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DOGGEIDJ@?N?x?h?a?j?$OA?3?B?$PL?5?e?y?e?5?m?e?5?p?n?d?h?k?h?q?$PM?$CB@
CONST	SEGMENT
??_C@_0BL@DOGGEIDJ@?N?x?h?a?j?$OA?3?B?$PL?5?e?y?e?5?m?e?5?p?n?d?h?k?h?q?$PM?$CB@ DB 0ceH
	DB	0f8H, 0e8H, 0e1H, 0eaH, 0e0H, ':', 0c2H, 0fbH, ' ', 0e5H, 0f9H
	DB	0e5H, ' ', 0edH, 0e5H, ' ', 0f0H, 0eeH, 0e4H, 0e8H, 0ebH, 0e8H
	DB	0f1H, 0fcH, '!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@EPALFKK@?B?b?e?d?h?r?e?5?d?$OA?r?s?5c?b?n?e?c?n?5?p?n?f?d?e?m?h?$PP?5?b?5@
CONST	SEGMENT
??_C@_0DC@EPALFKK@?B?b?e?d?h?r?e?5?d?$OA?r?s?5c?b?n?e?c?n?5?p?n?f?d?e?m?h?$PP?5?b?5@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0e4H, 0e0H, 0f2H, 0f3H
	DB	' c', 0e2H, 0eeH, 0e5H, 0e3H, 0eeH, ' ', 0f0H, 0eeH, 0e6H, 0e4H
	DB	0e5H, 0edH, 0e8H, 0ffH, ' ', 0e2H, ' ', 0f4H, 0eeH, 0f0H, 0ecH
	DB	0e0H, 0f2H, 0e5H, ' ', 0c4H, 0c4H, 0ccH, 0ccH, 0c3H, 0c3H, 0c3H
	DB	0c3H, ': ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DMIKHOJH@?N?x?h?a?j?$OA?3?M?E?J?N?P?E?J?R?M?N@
CONST	SEGMENT
??_C@_0BC@DMIKHOJH@?N?x?h?a?j?$OA?3?M?E?J?N?P?E?J?R?M?N@ DB 0ceH, 0f8H, 0e8H
	DB	0e1H, 0eaH, 0e0H, ':', 0cdH, 0c5H, 0caH, 0ceH, 0d0H, 0c5H, 0caH
	DB	0d2H, 0cdH, 0ceH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HEBGIABN@?N?x?h?a?j?$OA?3?B?b?e?d?h?r?e?5?d?$OA?ry?5?b?5?o?p?$OA?b?h?k?$PM?m?n@
CONST	SEGMENT
??_C@_0CJ@HEBGIABN@?N?x?h?a?j?$OA?3?B?b?e?d?h?r?e?5?d?$OA?ry?5?b?5?o?p?$OA?b?h?k?$PM?m?n@ DB 0ceH
	DB	0f8H, 0e8H, 0e1H, 0eaH, 0e0H, ':', 0c2H, 0e2H, 0e5H, 0e4H, 0e8H
	DB	0f2H, 0e5H, ' ', 0e4H, 0e0H, 0f2H, 'y ', 0e2H, ' ', 0efH, 0f0H
	DB	0e0H, 0e2H, 0e8H, 0ebH, 0fcH, 0edH, 0eeH, 0ecH, ' ', 0f4H, 0eeH
	DB	0f0H, 0ecH, 0e0H, 0f2H, 0e5H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GJFPIFCJ@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@
CONST	SEGMENT
??_C@_0CC@GJFPIFCJ@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0e4H, 0e0H, 0f2H, 0f3H
	DB	' ', 0e2H, ' ', 0f4H, 0eeH, 0f0H, 0ecH, 0e0H, 0f2H, 0e5H, ' ', 0c4H
	DB	0c4H, 0ccH, 0ccH, 0c3H, 0c3H, 0c3H, 0c3H, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03EJKFMIHK@rus@
CONST	SEGMENT
??_C@_03EJKFMIHK@rus@ DB 'rus', 00H			; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD imagerel ??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD imagerel ??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 01H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_cast@std@@@8
	DD	imagerel ??_R3bad_cast@std@@8
	DD	imagerel ??_R4bad_cast@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ DB '"'
	DB	00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'z', 00H
	DB	'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
CONST	SEGMENT
??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ DB 'null pointe'
	DB	'r cannot point to a block of non-zero size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MFFNMGGC@stoi?5argument?5out?5of?5range@
CONST	SEGMENT
??_C@_0BL@MFFNMGGC@stoi?5argument?5out?5of?5range@ DB 'stoi argument out '
	DB	'of range', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HGEDEDEC@invalid?5stoi?5argument@
CONST	SEGMENT
??_C@_0BG@HGEDEDEC@invalid?5stoi?5argument@ DB 'invalid stoi argument', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_cast@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT _CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
_CTA2?AVbad_cast@std@@ DD 02H
	DD	imagerel _CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI2?AVbad_cast@std@@
xdata$x	SEGMENT
_TI2?AVbad_cast@std@@ DD 00H
	DD	imagerel ??1bad_cast@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast@ DB 'bad cast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DQ FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DQ	FLAT:??_Ebad_cast@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@MIFAIHL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@MIFAIHL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '4', 00H, '1', 00H, '.', 00H, '3', 00H, '4', 00H, '1'
	DB	00H, '2', 00H, '0', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@OGIIGPAB@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@OGIIGPAB@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'41.34120\include\xmemory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA DD 0a9H ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	0383H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 0aH
	DB	00H
	DB	00H
	DB	0edH, 03H
	DB	02H
	DB	'<'
	DB	04H
	DB	'%', 08H
	DB	02H
	DB	'v'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 02H
	DB	02H
	DB	02H
	DB	04H
	DD	imagerel $handlerMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
	DB	028H
	DB	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
	DD	imagerel $tryMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
	DD	imagerel $ip2state$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DD 025054719H
	DD	0118231dH
	DD	070110031H
	DD	05010H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
	DD	0173H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcName$0 DB 05fH ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcVarDesc DD 068H ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
	DD	010H
	DQ	FLAT:??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcName$0
	ORG $+48
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcFrameData DD 01H ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
	DD	00H
	DQ	FLAT:??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z DB 06H
	DB	00H
	DB	00H
	DB	'|'
	DB	02H
	DB	'B'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z DB 028H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z
	DD	imagerel $ip2state$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z DD 025051d11H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 06H
	DB	00H
	DB	00H
	DB	'r'
	DB	02H
	DB	0f5H, 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	imagerel $ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025051811H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	0347H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DB 0eH
	DB	00H
	DB	00H
	DB	0dcH
	DB	02H
	DB	0a8H
	DB	04H
	DB	' '
	DB	02H
	DB	'8'
	DB	06H
	DB	01H, 07H
	DB	02H
	DB	0e6H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DB 02H
	DB	04H
	DB	04H
	DB	06H
	DD	imagerel $handlerMap$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DB 08H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
	DB	050H
	DB	058H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	imagerel $tryMap$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	imagerel $ip2state$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 025054219H
	DD	01132318H
	DD	0700c0043H
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	020bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$rtcName$0 DB 05fH ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$rtcVarDesc DD 068H ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
	DD	010H
	DQ	FLAT:??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$rtcName$0
	ORG $+48
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$rtcFrameData DD 01H ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
	DD	00H
	DQ	FLAT:??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	0398H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 0aH
	DB	00H
	DB	00H
	DB	'E', 04H
	DB	02H
	DB	'<'
	DB	04H
	DB	'!', 08H
	DB	02H
	DB	'v'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	02H
	DB	02H
	DB	04H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DB	028H
	DB	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 025054219H
	DD	01132318H
	DD	0700c0035H
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	0193H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0 DB 05fH ; std::operator<<<std::char_traits<char> >
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc DD 088H ; std::operator<<<std::char_traits<char> >
	DD	010H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0
	ORG $+48
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData DD 01H ; std::operator<<<std::char_traits<char> >
	DD	00H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02aH
	DW	0a45H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$20 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$18 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$17 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$16 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$15 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$14 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$13 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$12 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$11 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$10 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$9 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$8 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$7 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$6 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$5 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$4 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$3 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$2 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$1 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$0 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$main DB '~'
	DB	00H
	DB	00H
	DB	0b1H, 02H
	DB	02H
	DB	01aH
	DB	04H
	DB	0e4H
	DB	02H
	DB	01aH
	DB	00H
	DB	'('
	DB	04H
	DB	'4'
	DB	06H
	DB	':'
	DB	08H
	DB	':'
	DB	0aH
	DB	'M', 04H
	DB	08H
	DB	01aH
	DB	06H
	DB	01aH
	DB	04H
	DB	01aH
	DB	02H
	DB	01aH
	DB	00H
	DB	'('
	DB	0aH
	DB	0f0H
	DB	08H
	DB	01aH
	DB	06H
	DB	01aH
	DB	04H
	DB	01aH
	DB	02H
	DB	01aH
	DB	00H
	DB	'('
	DB	0aH
	DB	':'
	DB	0cH
	DB	'@'
	DB	0eH
	DB	'@'
	DB	010H
	DB	']', 04H
	DB	0eH
	DB	01aH
	DB	0cH
	DB	01aH
	DB	0aH
	DB	01aH
	DB	08H
	DB	01aH
	DB	06H
	DB	01aH
	DB	04H
	DB	01aH
	DB	02H
	DB	01aH
	DB	00H
	DB	'('
	DB	010H
	DB	01H, 02H
	DB	0eH
	DB	01aH
	DB	0cH
	DB	01aH
	DB	0aH
	DB	01aH
	DB	08H
	DB	01aH
	DB	06H
	DB	01aH
	DB	04H
	DB	01aH
	DB	02H
	DB	01aH
	DB	00H
	DB	'('
	DB	010H
	DB	'}', 03H
	DB	012H
	DB	'('
	DB	014H
	DB	'('
	DB	016H
	DB	'('
	DB	018H
	DB	'('
	DB	01aH
	DB	'('
	DB	01cH
	DB	'('
	DB	01eH
	DB	'('
	DB	' '
	DB	'('
	DB	'"'
	DB	'('
	DB	'$'
	DB	'('
	DB	'&'
	DB	'('
	DB	'('
	DB	'u', 05H
	DB	010H
	DB	'>'
	DB	0eH
	DB	01aH
	DB	0cH
	DB	01aH
	DB	0aH
	DB	01aH
	DB	08H
	DB	01aH
	DB	06H
	DB	01aH
	DB	04H
	DB	01aH
	DB	02H
	DB	01aH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$main DB 028H
	DB	0eH
	DD	imagerel main$dtor$0
	DB	02eH
	DD	imagerel main$dtor$1
	DB	02eH
	DD	imagerel main$dtor$2
	DB	02eH
	DD	imagerel main$dtor$3
	DB	02eH
	DD	imagerel main$dtor$4
	DB	02eH
	DD	imagerel main$dtor$5
	DB	02eH
	DD	imagerel main$dtor$6
	DB	02eH
	DD	imagerel main$dtor$7
	DB	02eH
	DD	imagerel main$dtor$8
	DB	02eH
	DD	imagerel main$dtor$9
	DB	02eH
	DD	imagerel main$dtor$10
	DB	02eH
	DD	imagerel main$dtor$11
	DB	02eH
	DD	imagerel main$dtor$12
	DB	02eH
	DD	imagerel main$dtor$13
	DB	02eH
	DD	imagerel main$dtor$14
	DB	02eH
	DD	imagerel main$dtor$15
	DB	02eH
	DD	imagerel main$dtor$16
	DB	02eH
	DD	imagerel main$dtor$17
	DB	02eH
	DD	imagerel main$dtor$18
	DB	0cdH
	DB	03H
	DD	imagerel main$dtor$20
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$main DB 028H
	DD	imagerel $stateUnwindMap$main
	DD	imagerel $ip2state$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	035053119H
	DD	010a330fH
	DD	07003010fH
	DD	05002H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$main
	DD	0862H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
main$rtcName$0 DB 044H
	DB	061H
	DB	079H
	DB	073H
	DB	049H
	DB	06eH
	DB	04dH
	DB	06fH
	DB	075H
	DB	06eH
	DB	074H
	DB	063H
	DB	068H
	DB	00H
	ORG $+2
main$rtcName$1 DB 064H
	DB	061H
	DB	074H
	DB	065H
	DB	00H
	ORG $+3
main$rtcName$2 DB 062H
	DB	069H
	DB	072H
	DB	074H
	DB	068H
	DB	064H
	DB	061H
	DB	079H
	DB	05fH
	DB	073H
	DB	074H
	DB	072H
	DB	00H
	ORG $+3
main$rtcName$3 DB 064H
	DB	061H
	DB	079H
	DB	05fH
	DB	073H
	DB	074H
	DB	072H
	DB	00H
main$rtcName$4 DB 06dH
	DB	06fH
	DB	06eH
	DB	074H
	DB	068H
	DB	05fH
	DB	073H
	DB	074H
	DB	072H
	DB	00H
	ORG $+6
main$rtcName$5 DB 079H
	DB	065H
	DB	061H
	DB	072H
	DB	05fH
	DB	073H
	DB	074H
	DB	072H
	DB	00H
	ORG $+3
main$rtcName$6 DB 062H
	DB	064H
	DB	05fH
	DB	073H
	DB	06dH
	DB	00H
	ORG $+6
main$rtcName$7 DB 06dH
	DB	06fH
	DB	06eH
	DB	074H
	DB	068H
	DB	042H
	DB	044H
	DB	05fH
	DB	073H
	DB	074H
	DB	072H
	DB	00H
	ORG $+4
main$rtcName$8 DB 079H
	DB	065H
	DB	061H
	DB	072H
	DB	042H
	DB	044H
	DB	05fH
	DB	073H
	DB	074H
	DB	072H
	DB	00H
	ORG $+5
main$rtcName$9 DB 06eH
	DB	061H
	DB	06dH
	DB	065H
	DB	04dH
	DB	06fH
	DB	06eH
	DB	074H
	DB	068H
	DB	00H
	ORG $+14
main$rtcVarDesc DD 0370H
	DD	01e0H
	DQ	FLAT:main$rtcName$9
	DD	02a8H
	DD	028H
	DQ	FLAT:main$rtcName$8
	DD	0268H
	DD	028H
	DQ	FLAT:main$rtcName$7
	DD	0228H
	DD	028H
	DQ	FLAT:main$rtcName$6
	DD	0188H
	DD	028H
	DQ	FLAT:main$rtcName$5
	DD	0148H
	DD	028H
	DQ	FLAT:main$rtcName$4
	DD	0108H
	DD	028H
	DQ	FLAT:main$rtcName$3
	DD	0c8H
	DD	028H
	DQ	FLAT:main$rtcName$2
	DD	088H
	DD	028H
	DQ	FLAT:main$rtcName$1
	DD	038H
	DD	030H
	DQ	FLAT:main$rtcName$0
	ORG $+480
main$rtcFrameData DD 0aH
	DD	00H
	DQ	FLAT:main$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$00@std@@YA_K_K@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 035051301H
	DD	010e3313H
	DD	07007002bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD 025051d01H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 025051819H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAX_K@Z DD 05051601H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z DD 025051819H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0200H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z DD 035054c19H
	DD	011d3322H
	DD	070160043H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0208H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back'::`2'::<lambda_1>,char>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	063H
	DB	061H
	DB	070H
	DB	061H
	DB	063H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+2
??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z$rtcName$1 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back'::`2'::<lambda_1>,char>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z$rtcVarDesc DD 0f8H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back'::`2'::<lambda_1>,char>
	DD	08H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z$rtcName$1
	DD	0b8H
	DD	08H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z$rtcName$0
	ORG $+96
??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z$rtcFrameData DD 02H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back'::`2'::<lambda_1>,char>
	DD	00H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@QEBA@QEADQEBD_KD@Z DD 025052201H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	022dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z DB 0aH
	DB	00H
	DB	00H
	DB	0d1H, 02H
	DB	02H
	DB	0f8H
	DB	00H
	DB	'$'
	DB	02H
	DB	'9', 03H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z
	DD	imagerel $ip2state$??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z DD 025054719H
	DD	0118231dH
	DD	070110043H
	DD	05010H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z
	DD	020aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z$rtcName$0 DB 024H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	DB	053H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z$rtcName$1 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z$rtcName$2 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	063H
	DB	061H
	DB	070H
	DB	061H
	DB	063H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+2
??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z$rtcName$3 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z$rtcVarDesc DD 0f8H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	DD	08H
	DQ	FLAT:??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z$rtcName$3
	DD	0d8H
	DD	08H
	DQ	FLAT:??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z$rtcName$2
	DD	0a8H
	DD	010H
	DQ	FLAT:??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z$rtcName$1
	DD	084H
	DD	01H
	DQ	FLAT:??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z$rtcName$0
	ORG $+192
??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z$rtcFrameData DD 04H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	DD	00H
	DQ	FLAT:??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Convert_size@_K_K@std@@YA_K_K@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	040H
	DB	0f8H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stoi@std@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PEA_KH@Z DD 025054719H
	DD	0118231dH
	DD	07011002dH
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stoi@std@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PEA_KH@Z$rtcName$0 DB 05fH ; std::stoi
	DB	045H
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+10
?stoi@std@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PEA_KH@Z$rtcVarDesc DD 068H ; std::stoi
	DD	08H
	DQ	FLAT:?stoi@std@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PEA_KH@Z$rtcName$0
	ORG $+48
?stoi@std@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PEA_KH@Z$rtcFrameData DD 01H ; std::stoi
	DD	00H
	DQ	FLAT:?stoi@std@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PEA_KH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Max_limit@_J@std@@YA_JXZ DD 025050f01H
	DD	010a230fH
	DD	070030021H
	DD	05002H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	0176H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z DB 0aH
	DB	00H
	DB	00H
	DB	0aeH
	DB	02H
	DB	'y', 02H
	DB	04H
	DB	084H
	DB	02H
	DB	'0'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
	DD	imagerel $ip2state$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z DD 025053d19H
	DD	010e2313H
	DD	070070039H
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
	DD	01baH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z$rtcName$0 DB 05fH ; std::use_facet<std::ctype<char> >
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+2
??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z$rtcName$1 DB 05fH ; std::use_facet<std::ctype<char> >
	DB	050H
	DB	073H
	DB	061H
	DB	076H
	DB	065H
	DB	00H
	ORG $+1
??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z$rtcName$2 DB 05fH ; std::use_facet<std::ctype<char> >
	DB	050H
	DB	073H
	DB	061H
	DB	076H
	DB	065H
	DB	05fH
	DB	067H
	DB	075H
	DB	061H
	DB	072H
	DB	064H
	DB	00H
	ORG $+3
??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z$rtcVarDesc DD 0c8H ; std::use_facet<std::ctype<char> >
	DD	08H
	DQ	FLAT:??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z$rtcName$0
	ORG $+144
??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z$rtcFrameData DD 03H ; std::use_facet<std::ctype<char> >
	DD	00H
	DQ	FLAT:??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1locale@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_cast@std@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	070030023H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_cast@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_cast@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_cast@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_cast@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070029H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	040H
	DB	0f7H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z DD 025054719H
	DD	0118231dH
	DD	070110025H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DB	04dH
	DB	061H
	DB	073H
	DB	06bH
	DB	065H
	DB	064H
	DB	00H
	ORG $+8
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcVarDesc DD 028H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DD	08H
	DQ	FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcName$0
	ORG $+48
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DD	00H
	DQ	FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z DD 035052201H
	DD	011d3322H
	DD	070160027H
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	036H
	DB	0caH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 025053d19H
	DD	010e2313H
	DD	070070031H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+5
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcVarDesc DD 028H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DD	08H
	DQ	FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcName$0
	ORG $+48
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DD	00H
	DQ	FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z DD 025051701H
	DD	01122317H
	DD	0700b002dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	036H
	DB	0c1H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 025053d19H
	DD	010e2313H
	DD	070070029H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DB	053H
	DB	034H
	DB	00H
	ORG $+12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcVarDesc DD 044H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	01H
	DQ	FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	00H
	DQ	FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070029H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z DB 060H
	DD	imagerel $ip2state$?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z DD 025051d19H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DB 06H
	DB	00H
	DB	00H
	DB	'x'
	DB	02H
	DB	'V'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DB 028H
	DD	imagerel $stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD 025051811H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z DB 06H
	DB	00H
	DB	00H
	DB	09aH
	DB	02H
	DB	0d0H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z DD 025052211H
	DD	011d2322H
	DD	070160021H
	DD	05015H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z DD 025051d01H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD 035051d01H
	DD	0118331dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@D@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen_string@std@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAU_Iterator_base12@std@@$$T@std@@YAPEAU_Iterator_base12@0@AEAPEAU10@$$QEA$$T@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	036H
	DB	082H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD 025053d19H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0f8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all_locked_v3
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	04H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	00H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 035051801H
	DD	01133318H
	DD	0700c002fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	070030023H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z DD 025051601H
	DD	01112316H
	DD	0700a001fH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z DD 025051201H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\__msvc_string_view.hpp
;	COMDAT ??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
_TEXT	SEGMENT
_State$ = 4
_Pad$ = 40
_Ok$ = 72
$T4 = 312
tv279 = 324
tv281 = 324
tv136 = 328
tv291 = 328
tv292 = 328
__$ArrayPad$ = 336
_Ostr$ = 384
_Data$ = 392
_Size$ = 400
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z PROC ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>, COMDAT

; 468  :     basic_ostream<_Elem, _Traits>& _Ostr, const _Elem* const _Data, const _SizeT _Size) {

$LN26:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 50 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3D3FEF16___msvc_string_view@hpp
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00053	90		 npad	 1

; 469  :     // insert a character-type sequence into _Ostr as if through a basic_string copy
; 470  :     using _Ostr_t                    = basic_ostream<_Elem, _Traits>;
; 471  :     typename _Ostr_t::iostate _State = _Ostr_t::goodbit;

  00054	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 472  : 
; 473  :     _SizeT _Pad;
; 474  :     if (_Ostr.width() <= 0 || static_cast<_SizeT>(_Ostr.width()) <= _Size) {

  0005b	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00062	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00065	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00069	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00070	48 03 c8	 add	 rcx, rax
  00073	48 8b c1	 mov	 rax, rcx
  00076	48 8b c8	 mov	 rcx, rax
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  0007f	48 85 c0	 test	 rax, rax
  00082	7e 2d		 jle	 SHORT $LN10@Insert_str
  00084	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0008b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00092	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00099	48 03 c8	 add	 rcx, rax
  0009c	48 8b c1	 mov	 rax, rcx
  0009f	48 8b c8	 mov	 rcx, rax
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000a8	48 3b 85 90 01
	00 00		 cmp	 rax, QWORD PTR _Size$[rbp]
  000af	77 0a		 ja	 SHORT $LN8@Insert_str
$LN10@Insert_str:

; 475  :         _Pad = 0;

  000b1	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR _Pad$[rbp], 0

; 476  :     } else {

  000b9	eb 2f		 jmp	 SHORT $LN9@Insert_str
$LN8@Insert_str:

; 477  :         _Pad = static_cast<_SizeT>(_Ostr.width()) - _Size;

  000bb	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000c9	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000d0	48 03 c8	 add	 rcx, rax
  000d3	48 8b c1	 mov	 rax, rcx
  000d6	48 8b c8	 mov	 rcx, rax
  000d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000df	48 2b 85 90 01
	00 00		 sub	 rax, QWORD PTR _Size$[rbp]
  000e6	48 89 45 28	 mov	 QWORD PTR _Pad$[rbp], rax
$LN9@Insert_str:

; 478  :     }
; 479  : 
; 480  :     const typename _Ostr_t::sentry _Ok(_Ostr);

  000ea	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  000f1	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  000f5	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000fa	90		 npad	 1

; 481  : 
; 482  :     if (!_Ok) {

  000fb	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  000ff	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00104	0f b6 c0	 movzx	 eax, al
  00107	85 c0		 test	 eax, eax
  00109	75 0e		 jne	 SHORT $LN11@Insert_str

; 483  :         _State |= _Ostr_t::badbit;

  0010b	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0010e	83 c8 04	 or	 eax, 4
  00111	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 484  :     } else { // state okay, insert characters

  00114	e9 0b 02 00 00	 jmp	 $LN12@Insert_str
$LN11@Insert_str:

; 485  :         _TRY_IO_BEGIN
; 486  :         if ((_Ostr.flags() & _Ostr_t::adjustfield) != _Ostr_t::left) {

  00119	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00120	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00123	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00127	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0012e	48 03 c8	 add	 rcx, rax
  00131	48 8b c1	 mov	 rax, rcx
  00134	48 8b c8	 mov	 rcx, rax
  00137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  0013d	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00142	83 f8 40	 cmp	 eax, 64			; 00000040H
  00145	0f 84 a5 00 00
	00		 je	 $LN14@Insert_str

; 487  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0014b	eb 0b		 jmp	 SHORT $LN4@Insert_str
$LN2@Insert_str:
  0014d	48 8b 45 28	 mov	 rax, QWORD PTR _Pad$[rbp]
  00151	48 ff c8	 dec	 rax
  00154	48 89 45 28	 mov	 QWORD PTR _Pad$[rbp], rax
$LN4@Insert_str:
  00158	48 83 7d 28 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  0015d	0f 86 8d 00 00
	00		 jbe	 $LN14@Insert_str

; 488  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00163	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0016a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0016d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00171	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00178	48 03 c8	 add	 rcx, rax
  0017b	48 8b c1	 mov	 rax, rcx
  0017e	48 8b c8	 mov	 rcx, rax
  00181	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  00187	88 85 44 01 00
	00		 mov	 BYTE PTR tv281[rbp], al
  0018d	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00194	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00197	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  0019b	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  001a2	48 03 d1	 add	 rdx, rcx
  001a5	48 8b ca	 mov	 rcx, rdx
  001a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001ae	0f b6 8d 44 01
	00 00		 movzx	 ecx, BYTE PTR tv281[rbp]
  001b5	0f b6 d1	 movzx	 edx, cl
  001b8	48 8b c8	 mov	 rcx, rax
  001bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  001c1	89 85 48 01 00
	00		 mov	 DWORD PTR tv136[rbp], eax
  001c7	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001cc	8b 95 48 01 00
	00		 mov	 edx, DWORD PTR tv136[rbp]
  001d2	8b c8		 mov	 ecx, eax
  001d4	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  001d9	0f b6 c0	 movzx	 eax, al
  001dc	85 c0		 test	 eax, eax
  001de	74 0b		 je	 SHORT $LN15@Insert_str

; 489  :                     _State |= _Ostr_t::badbit; // insertion failed, quit

  001e0	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  001e3	83 c8 04	 or	 eax, 4
  001e6	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 490  :                     break;

  001e9	eb 05		 jmp	 SHORT $LN14@Insert_str
$LN15@Insert_str:

; 491  :                 }
; 492  :             }

  001eb	e9 5d ff ff ff	 jmp	 $LN2@Insert_str
$LN14@Insert_str:

; 493  :         }
; 494  : 
; 495  :         if (_State == _Ostr_t::goodbit
; 496  :             && _Ostr.rdbuf()->sputn(_Data, static_cast<streamsize>(_Size)) != static_cast<streamsize>(_Size)) {

  001f0	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  001f4	75 60		 jne	 SHORT $LN16@Insert_str
  001f6	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  001fd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00200	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00204	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0020b	48 03 c8	 add	 rcx, rax
  0020e	48 8b c1	 mov	 rax, rcx
  00211	48 8b c8	 mov	 rcx, rax
  00214	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0021a	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR _Size$[rbp]
  00221	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR _Data$[rbp]
  00228	48 8b c8	 mov	 rcx, rax
  0022b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  00231	48 89 85 48 01
	00 00		 mov	 QWORD PTR tv291[rbp], rax
  00238	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR _Size$[rbp]
  0023f	48 39 85 48 01
	00 00		 cmp	 QWORD PTR tv291[rbp], rax
  00246	74 0e		 je	 SHORT $LN16@Insert_str

; 497  :             _State |= _Ostr_t::badbit;

  00248	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0024b	83 c8 04	 or	 eax, 4
  0024e	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 498  :         } else {

  00251	e9 a5 00 00 00	 jmp	 $LN17@Insert_str
$LN16@Insert_str:

; 499  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00256	eb 0b		 jmp	 SHORT $LN7@Insert_str
$LN5@Insert_str:
  00258	48 8b 45 28	 mov	 rax, QWORD PTR _Pad$[rbp]
  0025c	48 ff c8	 dec	 rax
  0025f	48 89 45 28	 mov	 QWORD PTR _Pad$[rbp], rax
$LN7@Insert_str:
  00263	48 83 7d 28 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  00268	0f 86 8d 00 00
	00		 jbe	 $LN17@Insert_str

; 500  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0026e	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00275	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00278	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0027c	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00283	48 03 c8	 add	 rcx, rax
  00286	48 8b c1	 mov	 rax, rcx
  00289	48 8b c8	 mov	 rcx, rax
  0028c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  00292	88 85 44 01 00
	00		 mov	 BYTE PTR tv279[rbp], al
  00298	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0029f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002a2	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  002a6	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  002ad	48 03 d1	 add	 rdx, rcx
  002b0	48 8b ca	 mov	 rcx, rdx
  002b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002b9	0f b6 8d 44 01
	00 00		 movzx	 ecx, BYTE PTR tv279[rbp]
  002c0	0f b6 d1	 movzx	 edx, cl
  002c3	48 8b c8	 mov	 rcx, rax
  002c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  002cc	89 85 48 01 00
	00		 mov	 DWORD PTR tv292[rbp], eax
  002d2	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  002d7	8b 95 48 01 00
	00		 mov	 edx, DWORD PTR tv292[rbp]
  002dd	8b c8		 mov	 ecx, eax
  002df	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  002e4	0f b6 c0	 movzx	 eax, al
  002e7	85 c0		 test	 eax, eax
  002e9	74 0b		 je	 SHORT $LN18@Insert_str

; 501  :                     _State |= _Ostr_t::badbit; // insertion failed, quit

  002eb	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  002ee	83 c8 04	 or	 eax, 4
  002f1	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 502  :                     break;

  002f4	eb 05		 jmp	 SHORT $LN17@Insert_str
$LN18@Insert_str:

; 503  :                 }
; 504  :             }

  002f6	e9 5d ff ff ff	 jmp	 $LN5@Insert_str
$LN17@Insert_str:

; 505  :         }
; 506  : 
; 507  :         _Ostr.width(0);

  002fb	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00302	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00305	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00309	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00310	48 03 c8	 add	 rcx, rax
  00313	48 8b c1	 mov	 rax, rcx
  00316	33 d2		 xor	 edx, edx
  00318	48 8b c8	 mov	 rcx, rax
  0031b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  00321	90		 npad	 1
  00322	eb 00		 jmp	 SHORT $LN12@Insert_str
$LN24@Insert_str:
$LN12@Insert_str:

; 508  :         _CATCH_IO_(_Ostr_t, _Ostr)
; 509  :     }
; 510  : 
; 511  :     _Ostr.setstate(_State);

  00324	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0032b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0032e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00332	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00339	48 03 c8	 add	 rcx, rax
  0033c	48 8b c1	 mov	 rax, rcx
  0033f	45 33 c0	 xor	 r8d, r8d
  00342	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  00345	48 8b c8	 mov	 rcx, rax
  00348	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0034e	90		 npad	 1

; 512  :     return _Ostr;

  0034f	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00356	48 89 85 38 01
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  0035d	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00361	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00366	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR $T4[rbp]

; 513  : }

  0036d	48 8b f8	 mov	 rdi, rax
  00370	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00374	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcFrameData
  0037b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00380	48 8b c7	 mov	 rax, rdi
  00383	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0038a	48 33 cd	 xor	 rcx, rbp
  0038d	e8 00 00 00 00	 call	 __security_check_cookie
  00392	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  00399	5f		 pop	 rdi
  0039a	5d		 pop	 rbp
  0039b	c3		 ret	 0
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z ENDP ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Pad$ = 40
_Ok$ = 72
$T4 = 312
tv279 = 324
tv281 = 324
tv136 = 328
tv291 = 328
tv292 = 328
__$ArrayPad$ = 336
_Ostr$ = 384
_Data$ = 392
_Size$ = 400
?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA PROC ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA ENDP ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Pad$ = 40
_Ok$ = 72
$T4 = 312
tv279 = 324
tv281 = 324
tv136 = 328
tv291 = 328
tv292 = 328
__$ArrayPad$ = 336
_Ostr$ = 384
_Data$ = 392
_Size$ = 400
?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA PROC ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::catch$1

; 508  :         _CATCH_IO_(_Ostr_t, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$0:
  00014	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00040	90		 npad	 1
  00041	48 8d 05 00 00
	00 00		 lea	 rax, $LN24@catch$1
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
  0004f	cc		 int	 3
?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA ENDP ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  0001f	90		 npad	 1
  00020	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\istream
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 100  :         explicit __CLR_OR_THIS_CALL operator bool() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2C3777E4_istream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 101  :             return _Ok;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]

; 102  :         }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\istream
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z
_TEXT	SEGMENT
this$ = 224
_Istr$ = 232
_Noskip$ = 240
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 98   :             : _Sentry_base(_Istr), _Ok(_Sentry_base::_Myistr._Ipfx(_Noskip)) {}

$LN4:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2C3777E4_istream
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	90		 npad	 1
  0002a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Istr$[rbp]
  00031	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00038	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  0003d	90		 npad	 1
  0003e	0f b6 95 f0 00
	00 00		 movzx	 edx, BYTE PTR _Noskip$[rbp]
  00045	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z
  00055	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005c	88 41 08	 mov	 BYTE PTR [rcx+8], al
  0005f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00066	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006d	5f		 pop	 rdi
  0006e	5d		 pop	 rbp
  0006f	c3		 ret	 0
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
_Istr$ = 232
_Noskip$ = 240
?dtor$0@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA PROC ; `std::basic_istream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA ENDP ; `std::basic_istream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\istream
;	COMDAT ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Rdbuf$ = 8
tv72 = 216
this$ = 256
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 83   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2C3777E4_istream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 84   :             const auto _Rdbuf = _Myistr.rdbuf();

  00020	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002a	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  00031	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv72[rbp]
  00038	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003b	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0003f	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv72[rbp]
  00046	48 03 c8	 add	 rcx, rax
  00049	48 8b c1	 mov	 rax, rcx
  0004c	48 8b c8	 mov	 rcx, rax
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00055	48 89 45 08	 mov	 QWORD PTR _Rdbuf$[rbp], rax

; 85   :             if (_Rdbuf) {

  00059	48 83 7d 08 00	 cmp	 QWORD PTR _Rdbuf$[rbp], 0
  0005e	74 0f		 je	 SHORT $LN2@Sentry_bas

; 86   :                 _Rdbuf->_Unlock();

  00060	48 8b 45 08	 mov	 rax, QWORD PTR _Rdbuf$[rbp]
  00064	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00067	48 8b 4d 08	 mov	 rcx, QWORD PTR _Rdbuf$[rbp]
  0006b	ff 50 10	 call	 QWORD PTR [rax+16]
  0006e	90		 npad	 1
$LN2@Sentry_bas:

; 87   :             }
; 88   :         }

  0006f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\istream
;	COMDAT ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Rdbuf$ = 8
tv73 = 216
this$ = 256
_Istr$ = 264
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 76   :         __CLR_OR_THIS_CALL _Sentry_base(basic_istream& _Istr) : _Myistr(_Istr) {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2C3777E4_istream
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1
  00025	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  00033	48 89 08	 mov	 QWORD PTR [rax], rcx

; 77   :             const auto _Rdbuf = _Myistr.rdbuf();

  00036	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00040	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv73[rbp], rax
  00047	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv73[rbp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00055	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv73[rbp]
  0005c	48 03 c8	 add	 rcx, rax
  0005f	48 8b c1	 mov	 rax, rcx
  00062	48 8b c8	 mov	 rcx, rax
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006b	48 89 45 08	 mov	 QWORD PTR _Rdbuf$[rbp], rax

; 78   :             if (_Rdbuf) {

  0006f	48 83 7d 08 00	 cmp	 QWORD PTR _Rdbuf$[rbp], 0
  00074	74 0f		 je	 SHORT $LN2@Sentry_bas

; 79   :                 _Rdbuf->_Lock();

  00076	48 8b 45 08	 mov	 rax, QWORD PTR _Rdbuf$[rbp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 4d 08	 mov	 rcx, QWORD PTR _Rdbuf$[rbp]
  00081	ff 50 08	 call	 QWORD PTR [rax+8]
  00084	90		 npad	 1
$LN2@Sentry_bas:

; 80   :             }
; 81   :         }

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00093	5f		 pop	 rdi
  00094	5d		 pop	 rbp
  00095	c3		 ret	 0
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 128  :         explicit __CLR_OR_THIS_CALL operator bool() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4FE742DE_ostream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 129  :             return _Ok;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]

; 130  :         }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Zero_uncaught_exceptions$ = 4
tv72 = 212
this$ = 256
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 113  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4FE742DE_ostream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 114  : #if !_HAS_EXCEPTIONS
; 115  :             const bool _Zero_uncaught_exceptions = true;
; 116  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00020	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00025	0f b6 c0	 movzx	 eax, al
  00028	85 c0		 test	 eax, eax
  0002a	75 09		 jne	 SHORT $LN4@sentry
  0002c	c6 85 d4 00 00
	00 01		 mov	 BYTE PTR tv72[rbp], 1
  00033	eb 07		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  00035	c6 85 d4 00 00
	00 00		 mov	 BYTE PTR tv72[rbp], 0
$LN5@sentry:
  0003c	0f b6 85 d4 00
	00 00		 movzx	 eax, BYTE PTR tv72[rbp]
  00043	88 45 04	 mov	 BYTE PTR _Zero_uncaught_exceptions$[rbp], al

; 118  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 119  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 120  : #endif // ^^^ !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION ^^^
; 121  : 
; 122  :             if (_Zero_uncaught_exceptions) {

  00046	0f b6 45 04	 movzx	 eax, BYTE PTR _Zero_uncaught_exceptions$[rbp]
  0004a	85 c0		 test	 eax, eax
  0004c	74 11		 je	 SHORT $LN2@sentry

; 123  :                 this->_Myostr._Osfx();

  0004e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00055	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  0005e	90		 npad	 1
$LN2@sentry:

; 124  :             }
; 125  :         }

  0005f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  0006b	90		 npad	 1
  0006c	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00073	5f		 pop	 rdi
  00074	5d		 pop	 rbp
  00075	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Tied$ = 8
this$ = 256
_Ostr$ = 264
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 96   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4FE742DE_ostream
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1
  00025	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  0002c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00033	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00038	90		 npad	 1

; 97   :             if (!_Ostr.good()) {

  00039	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00040	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00043	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00047	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0004e	48 03 c8	 add	 rcx, rax
  00051	48 8b c1	 mov	 rax, rcx
  00054	48 8b c8	 mov	 rcx, rax
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  0005d	0f b6 c0	 movzx	 eax, al
  00060	85 c0		 test	 eax, eax
  00062	75 10		 jne	 SHORT $LN2@sentry

; 98   :                 _Ok = false;

  00064	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006b	c6 40 08 00	 mov	 BYTE PTR [rax+8], 0

; 99   :                 return;

  0006f	e9 82 00 00 00	 jmp	 $LN1@sentry
$LN2@sentry:

; 100  :             }
; 101  : 
; 102  :             const auto _Tied = _Ostr.tie();

  00074	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00082	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00089	48 03 c8	 add	 rcx, rax
  0008c	48 8b c1	 mov	 rax, rcx
  0008f	48 8b c8	 mov	 rcx, rax
  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  00098	48 89 45 08	 mov	 QWORD PTR _Tied$[rbp], rax

; 103  :             if (!_Tied || _Tied == &_Ostr) {

  0009c	48 83 7d 08 00	 cmp	 QWORD PTR _Tied$[rbp], 0
  000a1	74 0d		 je	 SHORT $LN4@sentry
  000a3	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000aa	48 39 45 08	 cmp	 QWORD PTR _Tied$[rbp], rax
  000ae	75 0d		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 104  :                 _Ok = true;

  000b0	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b7	c6 40 08 01	 mov	 BYTE PTR [rax+8], 1

; 105  :                 return;

  000bb	eb 39		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 106  :             }
; 107  : 
; 108  :             _Tied->flush();

  000bd	48 8b 4d 08	 mov	 rcx, QWORD PTR _Tied$[rbp]
  000c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ
  000c7	90		 npad	 1

; 109  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000c8	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000cf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d2	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000d6	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000dd	48 03 c8	 add	 rcx, rax
  000e0	48 8b c1	 mov	 rax, rcx
  000e3	48 8b c8	 mov	 rcx, rax
  000e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  000ec	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f3	88 41 08	 mov	 BYTE PTR [rcx+8], al
$LN1@sentry:

; 110  :         }

  000f6	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fd	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00104	5f		 pop	 rdi
  00105	5d		 pop	 rbp
  00106	c3		 ret	 0
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Tied$ = 8
this$ = 256
_Ostr$ = 264
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Rdbuf$ = 8
tv72 = 216
this$ = 256
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 82   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4FE742DE_ostream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 83   :             const auto _Rdbuf = _Myostr.rdbuf();

  00020	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002a	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  00031	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv72[rbp]
  00038	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003b	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0003f	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv72[rbp]
  00046	48 03 c8	 add	 rcx, rax
  00049	48 8b c1	 mov	 rax, rcx
  0004c	48 8b c8	 mov	 rcx, rax
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00055	48 89 45 08	 mov	 QWORD PTR _Rdbuf$[rbp], rax

; 84   :             if (_Rdbuf) {

  00059	48 83 7d 08 00	 cmp	 QWORD PTR _Rdbuf$[rbp], 0
  0005e	74 0f		 je	 SHORT $LN2@Sentry_bas

; 85   :                 _Rdbuf->_Unlock();

  00060	48 8b 45 08	 mov	 rax, QWORD PTR _Rdbuf$[rbp]
  00064	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00067	48 8b 4d 08	 mov	 rcx, QWORD PTR _Rdbuf$[rbp]
  0006b	ff 50 10	 call	 QWORD PTR [rax+16]
  0006e	90		 npad	 1
$LN2@Sentry_bas:

; 86   :             }
; 87   :         }

  0006f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Rdbuf$ = 8
tv73 = 216
this$ = 256
_Ostr$ = 264
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 75   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4FE742DE_ostream
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1
  00025	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00033	48 89 08	 mov	 QWORD PTR [rax], rcx

; 76   :             const auto _Rdbuf = _Myostr.rdbuf();

  00036	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00040	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv73[rbp], rax
  00047	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv73[rbp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00055	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv73[rbp]
  0005c	48 03 c8	 add	 rcx, rax
  0005f	48 8b c1	 mov	 rax, rcx
  00062	48 8b c8	 mov	 rcx, rax
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006b	48 89 45 08	 mov	 QWORD PTR _Rdbuf$[rbp], rax

; 77   :             if (_Rdbuf) {

  0006f	48 83 7d 08 00	 cmp	 QWORD PTR _Rdbuf$[rbp], 0
  00074	74 0f		 je	 SHORT $LN2@Sentry_bas

; 78   :                 _Rdbuf->_Lock();

  00076	48 8b 45 08	 mov	 rax, QWORD PTR _Rdbuf$[rbp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 4d 08	 mov	 rcx, QWORD PTR _Rdbuf$[rbp]
  00081	ff 50 08	 call	 QWORD PTR [rax+8]
  00084	90		 npad	 1
$LN2@Sentry_bas:

; 79   :             }
; 80   :         }

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00093	5f		 pop	 rdi
  00094	5d		 pop	 rbp
  00095	c3		 ret	 0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
tv66 = 192
_Ostr$ = 240
_Str$ = 248
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3421 :     basic_ostream<_Elem, _Traits>& _Ostr, const basic_string<_Elem, _Traits, _Alloc>& _Str) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 3422 :     return _Insert_string(_Ostr, _Str.data(), _Str.size());

  00025	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  0002c	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00031	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv66[rbp], rax
  00038	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  0003f	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  00044	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv66[rbp]
  0004b	4c 8b c1	 mov	 r8, rcx
  0004e	48 8b d0	 mov	 rdx, rax
  00051	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00058	e8 00 00 00 00	 call	 ??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>

; 3423 : }

  0005d	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
_State$ = 4
_Changed$ = 36
_Ok$ = 72
_Ctype_fac$4 = 120
_Size$5 = 152
_Meta$6 = 180
$T7 = 408
$T8 = 456
tv262 = 468
tv263 = 468
tv264 = 468
tv65 = 472
tv150 = 472
tv259 = 480
__$ArrayPad$ = 488
_Istr$ = 528
_Str$ = 536
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator>><char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3372 :     basic_istream<_Elem, _Traits>& _Istr, basic_string<_Elem, _Traits, _Alloc>& _Str) {

$LN22:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001d	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR [rsp+568]
  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00038	48 33 c5	 xor	 rax, rbp
  0003b	48 89 85 e8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  00049	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004e	90		 npad	 1

; 3373 :     using _Myis   = basic_istream<_Elem, _Traits>;
; 3374 :     using _Ctype  = typename _Myis::_Ctype;
; 3375 :     using _Mystr  = basic_string<_Elem, _Traits, _Alloc>;
; 3376 :     using _Mysizt = typename _Mystr::size_type;
; 3377 : 
; 3378 :     typename _Myis::iostate _State = _Myis::goodbit;

  0004f	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 3379 :     bool _Changed                  = false;

  00056	c6 45 24 00	 mov	 BYTE PTR _Changed$[rbp], 0

; 3380 :     const typename _Myis::sentry _Ok(_Istr);

  0005a	45 33 c0	 xor	 r8d, r8d
  0005d	48 8b 95 10 02
	00 00		 mov	 rdx, QWORD PTR _Istr$[rbp]
  00064	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00068	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
  0006d	90		 npad	 1

; 3381 : 
; 3382 :     if (_Ok) { // state okay, extract characters

  0006e	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00072	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
  00077	0f b6 c0	 movzx	 eax, al
  0007a	85 c0		 test	 eax, eax
  0007c	0f 84 2e 02 00
	00		 je	 $LN5@operator

; 3383 :         const _Ctype& _Ctype_fac = _STD use_facet<_Ctype>(_Istr.getloc());

  00082	48 8b 85 10 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  00089	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008c	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00090	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  00097	48 03 c8	 add	 rcx, rax
  0009a	48 8b c1	 mov	 rax, rcx
  0009d	48 8d 95 98 01
	00 00		 lea	 rdx, QWORD PTR $T7[rbp]
  000a4	48 8b c8	 mov	 rcx, rax
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?getloc@ios_base@std@@QEBA?AVlocale@2@XZ
  000ad	48 89 85 d8 01
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  000b4	48 8b 85 d8 01
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  000bb	48 89 85 e0 01
	00 00		 mov	 QWORD PTR tv259[rbp], rax
  000c2	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR tv259[rbp]
  000c9	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  000ce	48 89 45 78	 mov	 QWORD PTR _Ctype_fac$4[rbp], rax
  000d2	48 8d 8d 98 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  000d9	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  000de	90		 npad	 1

; 3384 :         _Str.erase();

  000df	33 d2		 xor	 edx, edx
  000e1	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  000e8	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  000ed	90		 npad	 1

; 3385 : 
; 3386 :         _TRY_IO_BEGIN
; 3387 :         _Mysizt _Size;
; 3388 :         if (0 < _Istr.width() && static_cast<_Mysizt>(_Istr.width()) < _Str.max_size()) {

  000ee	48 8b 85 10 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  000f5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f8	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000fc	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  00103	48 03 c8	 add	 rcx, rax
  00106	48 8b c1	 mov	 rax, rcx
  00109	48 8b c8	 mov	 rcx, rax
  0010c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  00112	48 85 c0	 test	 rax, rax
  00115	7e 6d		 jle	 SHORT $LN7@operator
  00117	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  0011e	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00123	48 89 85 d8 01
	00 00		 mov	 QWORD PTR tv150[rbp], rax
  0012a	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  00131	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00134	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  00138	48 8b 95 10 02
	00 00		 mov	 rdx, QWORD PTR _Istr$[rbp]
  0013f	48 03 d1	 add	 rdx, rcx
  00142	48 8b ca	 mov	 rcx, rdx
  00145	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  0014b	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR tv150[rbp]
  00152	48 3b c1	 cmp	 rax, rcx
  00155	73 2d		 jae	 SHORT $LN7@operator

; 3389 :             _Size = static_cast<_Mysizt>(_Istr.width());

  00157	48 8b 85 10 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  0015e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00161	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00165	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  0016c	48 03 c8	 add	 rcx, rax
  0016f	48 8b c1	 mov	 rax, rcx
  00172	48 8b c8	 mov	 rcx, rax
  00175	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  0017b	48 89 85 98 00
	00 00		 mov	 QWORD PTR _Size$5[rbp], rax

; 3390 :         } else {

  00182	eb 13		 jmp	 SHORT $LN8@operator
$LN7@operator:

; 3391 :             _Size = _Str.max_size();

  00184	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  0018b	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00190	48 89 85 98 00
	00 00		 mov	 QWORD PTR _Size$5[rbp], rax
$LN8@operator:

; 3392 :         }
; 3393 : 
; 3394 :         typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  00197	48 8b 85 10 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  0019e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001a1	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001a5	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  001ac	48 03 c8	 add	 rcx, rax
  001af	48 8b c1	 mov	 rax, rcx
  001b2	48 8b c8	 mov	 rcx, rax
  001b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001bb	48 8b c8	 mov	 rcx, rax
  001be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ
  001c4	89 85 d4 01 00
	00		 mov	 DWORD PTR tv262[rbp], eax
  001ca	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR tv262[rbp]
  001d0	89 85 b4 00 00
	00		 mov	 DWORD PTR _Meta$6[rbp], eax

; 3395 : 
; 3396 :         for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc()) {

  001d6	eb 50		 jmp	 SHORT $LN4@operator
$LN2@operator:
  001d8	48 8b 85 98 00
	00 00		 mov	 rax, QWORD PTR _Size$5[rbp]
  001df	48 ff c8	 dec	 rax
  001e2	48 89 85 98 00
	00 00		 mov	 QWORD PTR _Size$5[rbp], rax
  001e9	48 8b 85 10 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  001f0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001f3	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001f7	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  001fe	48 03 c8	 add	 rcx, rax
  00201	48 8b c1	 mov	 rax, rcx
  00204	48 8b c8	 mov	 rcx, rax
  00207	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0020d	48 8b c8	 mov	 rcx, rax
  00210	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ
  00216	89 85 d4 01 00
	00		 mov	 DWORD PTR tv263[rbp], eax
  0021c	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR tv263[rbp]
  00222	89 85 b4 00 00
	00		 mov	 DWORD PTR _Meta$6[rbp], eax
$LN4@operator:
  00228	48 83 bd 98 00
	00 00 00	 cmp	 QWORD PTR _Size$5[rbp], 0
  00230	76 7c		 jbe	 SHORT $LN3@operator

; 3397 :             if (_Traits::eq_int_type(_Traits::eof(), _Meta)) { // end of file, quit

  00232	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00237	8b 95 b4 00 00
	00		 mov	 edx, DWORD PTR _Meta$6[rbp]
  0023d	8b c8		 mov	 ecx, eax
  0023f	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00244	0f b6 c0	 movzx	 eax, al
  00247	85 c0		 test	 eax, eax
  00249	74 0d		 je	 SHORT $LN9@operator

; 3398 :                 _State |= _Myis::eofbit;

  0024b	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0024e	83 c8 01	 or	 eax, 1
  00251	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 3399 :                 break;

  00254	eb 58		 jmp	 SHORT $LN3@operator
  00256	eb 51		 jmp	 SHORT $LN10@operator
$LN9@operator:

; 3400 :             } else if (_Ctype_fac.is(_Ctype::space, _Traits::to_char_type(_Meta))) {

  00258	8b 8d b4 00 00
	00		 mov	 ecx, DWORD PTR _Meta$6[rbp]
  0025e	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  00263	44 0f b6 c0	 movzx	 r8d, al
  00267	66 ba 48 00	 mov	 dx, 72			; 00000048H
  0026b	48 8b 4d 78	 mov	 rcx, QWORD PTR _Ctype_fac$4[rbp]
  0026f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?is@?$ctype@D@std@@QEBA_NFD@Z
  00275	88 85 d4 01 00
	00		 mov	 BYTE PTR tv264[rbp], al
  0027b	0f b6 85 d4 01
	00 00		 movzx	 eax, BYTE PTR tv264[rbp]
  00282	85 c0		 test	 eax, eax
  00284	74 04		 je	 SHORT $LN11@operator

; 3401 :                 break; // whitespace, quit

  00286	eb 26		 jmp	 SHORT $LN3@operator

; 3402 :             } else { // add character to string

  00288	eb 1f		 jmp	 SHORT $LN10@operator
$LN11@operator:

; 3403 :                 _Str.push_back(_Traits::to_char_type(_Meta));

  0028a	8b 8d b4 00 00
	00		 mov	 ecx, DWORD PTR _Meta$6[rbp]
  00290	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  00295	0f b6 d0	 movzx	 edx, al
  00298	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  0029f	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
  002a4	90		 npad	 1

; 3404 :                 _Changed = true;

  002a5	c6 45 24 01	 mov	 BYTE PTR _Changed$[rbp], 1
$LN10@operator:

; 3405 :             }
; 3406 :         }

  002a9	e9 2a ff ff ff	 jmp	 $LN2@operator
$LN3@operator:
  002ae	eb 00		 jmp	 SHORT $LN5@operator
$LN20@operator:
$LN5@operator:

; 3407 :         _CATCH_IO_(_Myis, _Istr)
; 3408 :     }
; 3409 : 
; 3410 :     _Istr.width(0);

  002b0	48 8b 85 10 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  002b7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002ba	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002be	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  002c5	48 03 c8	 add	 rcx, rax
  002c8	48 8b c1	 mov	 rax, rcx
  002cb	33 d2		 xor	 edx, edx
  002cd	48 8b c8	 mov	 rcx, rax
  002d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  002d6	90		 npad	 1

; 3411 :     if (!_Changed) {

  002d7	0f b6 45 24	 movzx	 eax, BYTE PTR _Changed$[rbp]
  002db	85 c0		 test	 eax, eax
  002dd	75 09		 jne	 SHORT $LN13@operator

; 3412 :         _State |= _Myis::failbit;

  002df	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  002e2	83 c8 02	 or	 eax, 2
  002e5	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN13@operator:

; 3413 :     }
; 3414 : 
; 3415 :     _Istr.setstate(_State);

  002e8	48 8b 85 10 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  002ef	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002f2	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002f6	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  002fd	48 03 c8	 add	 rcx, rax
  00300	48 8b c1	 mov	 rax, rcx
  00303	45 33 c0	 xor	 r8d, r8d
  00306	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  00309	48 8b c8	 mov	 rcx, rax
  0030c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00312	90		 npad	 1

; 3416 :     return _Istr;

  00313	48 8b 85 10 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  0031a	48 89 85 c8 01
	00 00		 mov	 QWORD PTR $T8[rbp], rax
  00321	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00325	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  0032a	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR $T8[rbp]

; 3417 : }

  00331	48 8b f8	 mov	 rdi, rax
  00334	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00338	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$rtcFrameData
  0033f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00344	48 8b c7	 mov	 rax, rdi
  00347	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0034e	48 33 cd	 xor	 rcx, rbp
  00351	e8 00 00 00 00	 call	 __security_check_cookie
  00356	48 8d a5 f8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+504]
  0035d	5f		 pop	 rdi
  0035e	5d		 pop	 rbp
  0035f	c3		 ret	 0
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Changed$ = 36
_Ok$ = 72
_Ctype_fac$4 = 120
_Size$5 = 152
_Meta$6 = 180
$T7 = 408
$T8 = 456
tv262 = 468
tv263 = 468
tv264 = 468
tv65 = 472
tv150 = 472
tv259 = 480
__$ArrayPad$ = 488
_Istr$ = 528
_Str$ = 536
?dtor$0@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA PROC ; `std::operator>><char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA ENDP ; `std::operator>><char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Changed$ = 36
_Ok$ = 72
_Ctype_fac$4 = 120
_Size$5 = 152
_Meta$6 = 180
$T7 = 408
$T8 = 456
tv262 = 468
tv263 = 468
tv264 = 468
tv65 = 472
tv150 = 472
tv259 = 480
__$ArrayPad$ = 488
_Istr$ = 528
_Str$ = 536
?dtor$1@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA PROC ; `std::operator>><char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d 98 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  0001b	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$1@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA ENDP ; `std::operator>><char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Changed$ = 36
_Ok$ = 72
_Ctype_fac$4 = 120
_Size$5 = 152
_Meta$6 = 180
$T7 = 408
$T8 = 456
tv262 = 468
tv263 = 468
tv264 = 468
tv65 = 472
tv150 = 472
tv259 = 480
__$ArrayPad$ = 488
_Istr$ = 528
_Str$ = 536
?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA PROC ; `std::operator>><char,std::char_traits<char>,std::allocator<char> >'::`1'::catch$2

; 3407 :         _CATCH_IO_(_Myis, _Istr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0:
  00014	48 8b 85 10 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00040	90		 npad	 1
  00041	48 8d 05 00 00
	00 00		 lea	 rax, $LN20@catch$2
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
  0004f	cc		 int	 3
?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA ENDP ; `std::operator>><char,std::char_traits<char>,std::allocator<char> >'::`1'::catch$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Ostr$ = 224
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 1018 :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4FE742DE_ostream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1019 :     _Ostr.put(_Ostr.widen('\n'));

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00027	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00035	48 03 c8	 add	 rcx, rax
  00038	48 8b c1	 mov	 rax, rcx
  0003b	b2 0a		 mov	 dl, 10
  0003d	48 8b c8	 mov	 rcx, rax
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
  00046	0f b6 d0	 movzx	 edx, al
  00049	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z
  00056	90		 npad	 1

; 1020 :     _Ostr.flush();

  00057	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ
  00064	90		 npad	 1

; 1021 :     return _Ostr;

  00065	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]

; 1022 : }

  0006c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00073	5f		 pop	 rdi
  00074	5d		 pop	 rbp
  00075	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 344
tv283 = 356
tv285 = 356
tv137 = 360
tv139 = 360
tv295 = 360
tv296 = 360
__$ArrayPad$ = 368
_Ostr$ = 416
_Val$ = 424
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 774  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, const char* _Val) {

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001d	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+456]
  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00038	48 33 c5	 xor	 rax, rbp
  0003b	48 89 85 70 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4FE742DE_ostream
  00049	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004e	90		 npad	 1

; 775  :     // insert NTBS into char stream
; 776  :     using _Elem = char;
; 777  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 778  : 
; 779  :     ios_base::iostate _State = ios_base::goodbit;

  0004f	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 780  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00056	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR _Val$[rbp]
  0005d	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
  00062	48 89 45 28	 mov	 QWORD PTR _Count$[rbp], rax

; 781  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00066	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0006d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00070	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00074	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0007b	48 03 c8	 add	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	48 8b c8	 mov	 rcx, rax
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  0008a	48 85 c0	 test	 rax, rax
  0008d	7e 5b		 jle	 SHORT $LN17@operator
  0008f	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0009d	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000a4	48 03 c8	 add	 rcx, rax
  000a7	48 8b c1	 mov	 rax, rcx
  000aa	48 8b c8	 mov	 rcx, rax
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000b3	48 3b 45 28	 cmp	 rax, QWORD PTR _Count$[rbp]
  000b7	7e 31		 jle	 SHORT $LN17@operator
  000b9	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000c0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c3	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000c7	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000ce	48 03 c8	 add	 rcx, rax
  000d1	48 8b c1	 mov	 rax, rcx
  000d4	48 8b c8	 mov	 rcx, rax
  000d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000dd	48 2b 45 28	 sub	 rax, QWORD PTR _Count$[rbp]
  000e1	48 89 85 68 01
	00 00		 mov	 QWORD PTR tv137[rbp], rax
  000e8	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000ea	48 c7 85 68 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv137[rbp], 0
$LN18@operator:
  000f5	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR tv137[rbp]
  000fc	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax

; 782  :     const typename _Myos::sentry _Ok(_Ostr);

  00100	48 8b 95 a0 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  00107	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  0010b	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00110	90		 npad	 1

; 783  : 
; 784  :     if (!_Ok) {

  00111	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00115	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0011a	0f b6 c0	 movzx	 eax, al
  0011d	85 c0		 test	 eax, eax
  0011f	75 0e		 jne	 SHORT $LN8@operator

; 785  :         _State |= ios_base::badbit;

  00121	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00124	83 c8 04	 or	 eax, 4
  00127	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 786  :     } else { // state okay, insert

  0012a	e9 0a 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 787  :         _TRY_IO_BEGIN
; 788  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  0012f	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00136	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00139	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0013d	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00144	48 03 c8	 add	 rcx, rax
  00147	48 8b c1	 mov	 rax, rcx
  0014a	48 8b c8	 mov	 rcx, rax
  0014d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  00153	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00158	83 f8 40	 cmp	 eax, 64			; 00000040H
  0015b	0f 84 a5 00 00
	00		 je	 $LN11@operator

; 789  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00161	eb 0b		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00163	48 8b 45 48	 mov	 rax, QWORD PTR _Pad$[rbp]
  00167	48 ff c8	 dec	 rax
  0016a	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax
$LN4@operator:
  0016e	48 83 7d 48 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  00173	0f 8e 8d 00 00
	00		 jle	 $LN11@operator

; 790  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00179	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00180	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00183	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00187	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0018e	48 03 c8	 add	 rcx, rax
  00191	48 8b c1	 mov	 rax, rcx
  00194	48 8b c8	 mov	 rcx, rax
  00197	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  0019d	88 85 64 01 00
	00		 mov	 BYTE PTR tv285[rbp], al
  001a3	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  001aa	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001ad	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  001b1	48 8b 95 a0 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  001b8	48 03 d1	 add	 rdx, rcx
  001bb	48 8b ca	 mov	 rcx, rdx
  001be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001c4	0f b6 8d 64 01
	00 00		 movzx	 ecx, BYTE PTR tv285[rbp]
  001cb	0f b6 d1	 movzx	 edx, cl
  001ce	48 8b c8	 mov	 rcx, rax
  001d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  001d7	89 85 68 01 00
	00		 mov	 DWORD PTR tv139[rbp], eax
  001dd	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001e2	8b 95 68 01 00
	00		 mov	 edx, DWORD PTR tv139[rbp]
  001e8	8b c8		 mov	 ecx, eax
  001ea	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  001ef	0f b6 c0	 movzx	 eax, al
  001f2	85 c0		 test	 eax, eax
  001f4	74 0b		 je	 SHORT $LN12@operator

; 791  :                     _State |= ios_base::badbit; // insertion failed, quit

  001f6	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  001f9	83 c8 04	 or	 eax, 4
  001fc	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 792  :                     break;

  001ff	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 793  :                 }
; 794  :             }

  00201	e9 5d ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 795  :         }
; 796  : 
; 797  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00206	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  0020a	75 55		 jne	 SHORT $LN13@operator
  0020c	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00213	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00216	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0021a	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00221	48 03 c8	 add	 rcx, rax
  00224	48 8b c1	 mov	 rax, rcx
  00227	48 8b c8	 mov	 rcx, rax
  0022a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00230	4c 8b 45 28	 mov	 r8, QWORD PTR _Count$[rbp]
  00234	48 8b 95 a8 01
	00 00		 mov	 rdx, QWORD PTR _Val$[rbp]
  0023b	48 8b c8	 mov	 rcx, rax
  0023e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  00244	48 89 85 68 01
	00 00		 mov	 QWORD PTR tv295[rbp], rax
  0024b	48 8b 45 28	 mov	 rax, QWORD PTR _Count$[rbp]
  0024f	48 39 85 68 01
	00 00		 cmp	 QWORD PTR tv295[rbp], rax
  00256	74 09		 je	 SHORT $LN13@operator

; 798  :             _State |= ios_base::badbit;

  00258	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0025b	83 c8 04	 or	 eax, 4
  0025e	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN13@operator:

; 799  :         }
; 800  : 
; 801  :         if (_State == ios_base::goodbit) {

  00261	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  00265	0f 85 a5 00 00
	00		 jne	 $LN14@operator

; 802  :             for (; 0 < _Pad; --_Pad) { // pad on right

  0026b	eb 0b		 jmp	 SHORT $LN7@operator
$LN5@operator:
  0026d	48 8b 45 48	 mov	 rax, QWORD PTR _Pad$[rbp]
  00271	48 ff c8	 dec	 rax
  00274	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax
$LN7@operator:
  00278	48 83 7d 48 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  0027d	0f 8e 8d 00 00
	00		 jle	 $LN14@operator

; 803  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00283	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0028a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0028d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00291	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00298	48 03 c8	 add	 rcx, rax
  0029b	48 8b c1	 mov	 rax, rcx
  0029e	48 8b c8	 mov	 rcx, rax
  002a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  002a7	88 85 64 01 00
	00		 mov	 BYTE PTR tv283[rbp], al
  002ad	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002b4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002b7	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  002bb	48 8b 95 a0 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  002c2	48 03 d1	 add	 rdx, rcx
  002c5	48 8b ca	 mov	 rcx, rdx
  002c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002ce	0f b6 8d 64 01
	00 00		 movzx	 ecx, BYTE PTR tv283[rbp]
  002d5	0f b6 d1	 movzx	 edx, cl
  002d8	48 8b c8	 mov	 rcx, rax
  002db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  002e1	89 85 68 01 00
	00		 mov	 DWORD PTR tv296[rbp], eax
  002e7	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  002ec	8b 95 68 01 00
	00		 mov	 edx, DWORD PTR tv296[rbp]
  002f2	8b c8		 mov	 ecx, eax
  002f4	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  002f9	0f b6 c0	 movzx	 eax, al
  002fc	85 c0		 test	 eax, eax
  002fe	74 0b		 je	 SHORT $LN15@operator

; 804  :                     _State |= ios_base::badbit; // insertion failed, quit

  00300	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00303	83 c8 04	 or	 eax, 4
  00306	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 805  :                     break;

  00309	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 806  :                 }
; 807  :             }

  0030b	e9 5d ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 808  :         }
; 809  : 
; 810  :         _Ostr.width(0);

  00310	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00317	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0031a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0031e	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00325	48 03 c8	 add	 rcx, rax
  00328	48 8b c1	 mov	 rax, rcx
  0032b	33 d2		 xor	 edx, edx
  0032d	48 8b c8	 mov	 rcx, rax
  00330	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  00336	90		 npad	 1
  00337	eb 00		 jmp	 SHORT $LN9@operator
$LN23@operator:
$LN9@operator:

; 811  :         _CATCH_IO_(ios_base, _Ostr)
; 812  :     }
; 813  : 
; 814  :     _Ostr.setstate(_State);

  00339	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00340	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00343	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00347	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0034e	48 03 c8	 add	 rcx, rax
  00351	48 8b c1	 mov	 rax, rcx
  00354	45 33 c0	 xor	 r8d, r8d
  00357	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  0035a	48 8b c8	 mov	 rcx, rax
  0035d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00363	90		 npad	 1

; 815  :     return _Ostr;

  00364	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0036b	48 89 85 58 01
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  00372	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00376	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0037b	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR $T4[rbp]

; 816  : }

  00382	48 8b f8	 mov	 rdi, rax
  00385	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00389	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData
  00390	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00395	48 8b c7	 mov	 rax, rdi
  00398	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0039f	48 33 cd	 xor	 rcx, rbp
  003a2	e8 00 00 00 00	 call	 __security_check_cookie
  003a7	48 8d a5 88 01
	00 00		 lea	 rsp, QWORD PTR [rbp+392]
  003ae	5f		 pop	 rdi
  003af	5d		 pop	 rbp
  003b0	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 344
tv283 = 356
tv285 = 356
tv137 = 360
tv139 = 360
tv295 = 360
tv296 = 360
__$ArrayPad$ = 368
_Ostr$ = 416
_Val$ = 424
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 344
tv283 = 356
tv285 = 356
tv137 = 360
tv139 = 360
tv295 = 360
tv296 = 360
__$ArrayPad$ = 368
_Ostr$ = 416
_Val$ = 424
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 811  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00014	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00040	90		 npad	 1
  00041	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
  0004f	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pipec\sem2\kpo\lab3\test\test\test.cpp
;	COMDAT main
_TEXT	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main	PROC						; COMDAT

; 6    : {

$LN43:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 78 08
	00 00		 sub	 rsp, 2168		; 00000878H
  0000a	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0000f	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00014	b9 82 01 00 00	 mov	 ecx, 386		; 00000182H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00027	48 33 c5	 xor	 rax, rbp
  0002a	48 89 85 30 08
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1C9D9D2D_test@cpp
  00038	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003d	90		 npad	 1

; 7    : 	setlocale(LC_ALL, "rus");

  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03EJKFMIHK@rus@
  00045	33 c9		 xor	 ecx, ecx
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setlocale
  0004d	90		 npad	 1

; 8    : 	int DaysInMountch[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

  0004e	c7 45 08 1f 00
	00 00		 mov	 DWORD PTR DaysInMountch$[rbp], 31
  00055	c7 45 0c 1c 00
	00 00		 mov	 DWORD PTR DaysInMountch$[rbp+4], 28
  0005c	c7 45 10 1f 00
	00 00		 mov	 DWORD PTR DaysInMountch$[rbp+8], 31
  00063	c7 45 14 1e 00
	00 00		 mov	 DWORD PTR DaysInMountch$[rbp+12], 30
  0006a	c7 45 18 1f 00
	00 00		 mov	 DWORD PTR DaysInMountch$[rbp+16], 31
  00071	c7 45 1c 1e 00
	00 00		 mov	 DWORD PTR DaysInMountch$[rbp+20], 30
  00078	c7 45 20 1f 00
	00 00		 mov	 DWORD PTR DaysInMountch$[rbp+24], 31
  0007f	c7 45 24 1f 00
	00 00		 mov	 DWORD PTR DaysInMountch$[rbp+28], 31
  00086	c7 45 28 1e 00
	00 00		 mov	 DWORD PTR DaysInMountch$[rbp+32], 30
  0008d	c7 45 2c 1f 00
	00 00		 mov	 DWORD PTR DaysInMountch$[rbp+36], 31
  00094	c7 45 30 1e 00
	00 00		 mov	 DWORD PTR DaysInMountch$[rbp+40], 30
  0009b	c7 45 34 1f 00
	00 00		 mov	 DWORD PTR DaysInMountch$[rbp+44], 31

; 9    : 	string date, birthday_str;

  000a2	48 8d 4d 58	 lea	 rcx, QWORD PTR date$[rbp]
  000a6	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ab	90		 npad	 1
  000ac	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR birthday_str$[rbp]
  000b3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000b8	90		 npad	 1

; 10   : 	cout << "Введите дату в формате ДДММГГГГ: " << endl;

  000b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@GJFPIFCJ@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@
  000c0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000c7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  000cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  000d3	48 8b c8	 mov	 rcx, rax
  000d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  000dc	90		 npad	 1

; 11   : 	cin >> date;

  000dd	48 8d 55 58	 lea	 rdx, QWORD PTR date$[rbp]
  000e1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  000e8	e8 00 00 00 00	 call	 ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
  000ed	90		 npad	 1

; 12   : 	if (date.length() != 8) {

  000ee	48 8d 4d 58	 lea	 rcx, QWORD PTR date$[rbp]
  000f2	e8 00 00 00 00	 call	 ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
  000f7	48 83 f8 08	 cmp	 rax, 8
  000fb	74 4f		 je	 SHORT $LN2@main

; 13   : 		cout << "Ошибка:Введите датy в правильном формате" << endl;

  000fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@HEBGIABN@?N?x?h?a?j?$OA?3?B?b?e?d?h?r?e?5?d?$OA?ry?5?b?5?o?p?$OA?b?h?k?$PM?m?n@
  00104	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0010b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00110	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00117	48 8b c8	 mov	 rcx, rax
  0011a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  00120	90		 npad	 1

; 14   : 		return 1;

  00121	c7 85 94 07 00
	00 01 00 00 00	 mov	 DWORD PTR $T13[rbp], 1
  0012b	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR birthday_str$[rbp]
  00132	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00137	90		 npad	 1
  00138	48 8d 4d 58	 lea	 rcx, QWORD PTR date$[rbp]
  0013c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00141	8b 85 94 07 00
	00		 mov	 eax, DWORD PTR $T13[rbp]
  00147	e9 e3 08 00 00	 jmp	 $LN41@main
$LN2@main:

; 15   : 	}
; 16   : 	string day_str = date.substr(0, 2);

  0014c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00152	45 33 c0	 xor	 r8d, r8d
  00155	48 8d 95 d8 00
	00 00		 lea	 rdx, QWORD PTR day_str$[rbp]
  0015c	48 8d 4d 58	 lea	 rcx, QWORD PTR date$[rbp]
  00160	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  00165	90		 npad	 1

; 17   : 	string month_str = date.substr(2, 2);

  00166	41 b9 02 00 00
	00		 mov	 r9d, 2
  0016c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00172	48 8d 95 18 01
	00 00		 lea	 rdx, QWORD PTR month_str$[rbp]
  00179	48 8d 4d 58	 lea	 rcx, QWORD PTR date$[rbp]
  0017d	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  00182	90		 npad	 1

; 18   : 	string year_str = date.substr(4, 4);

  00183	41 b9 04 00 00
	00		 mov	 r9d, 4
  00189	41 b8 04 00 00
	00		 mov	 r8d, 4
  0018f	48 8d 95 58 01
	00 00		 lea	 rdx, QWORD PTR year_str$[rbp]
  00196	48 8d 4d 58	 lea	 rcx, QWORD PTR date$[rbp]
  0019a	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  0019f	90		 npad	 1

; 19   : 	//преобразовние из строки в число
; 20   : 
; 21   : 	int day = stoi(day_str);

  001a0	41 b8 0a 00 00
	00		 mov	 r8d, 10
  001a6	33 d2		 xor	 edx, edx
  001a8	48 8d 8d d8 00
	00 00		 lea	 rcx, QWORD PTR day_str$[rbp]
  001af	e8 00 00 00 00	 call	 ?stoi@std@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PEA_KH@Z ; std::stoi
  001b4	89 85 94 01 00
	00		 mov	 DWORD PTR day$[rbp], eax

; 22   : 	int month = stoi(month_str);

  001ba	41 b8 0a 00 00
	00		 mov	 r8d, 10
  001c0	33 d2		 xor	 edx, edx
  001c2	48 8d 8d 18 01
	00 00		 lea	 rcx, QWORD PTR month_str$[rbp]
  001c9	e8 00 00 00 00	 call	 ?stoi@std@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PEA_KH@Z ; std::stoi
  001ce	89 85 b4 01 00
	00		 mov	 DWORD PTR month$[rbp], eax

; 23   : 	int year = stoi(year_str);

  001d4	41 b8 0a 00 00
	00		 mov	 r8d, 10
  001da	33 d2		 xor	 edx, edx
  001dc	48 8d 8d 58 01
	00 00		 lea	 rcx, QWORD PTR year_str$[rbp]
  001e3	e8 00 00 00 00	 call	 ?stoi@std@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PEA_KH@Z ; std::stoi
  001e8	89 85 d4 01 00
	00		 mov	 DWORD PTR year$[rbp], eax

; 24   : 	
; 25   : 	
; 26   : 	if ((day > DaysInMountch[month - 1] && !defineLeapYear(year)) || day <= 0 || month <= 0 || month > 12 || year <= 0||((day > DaysInMountch[month - 1] && month!=2)||(month==2 && day>29) && defineLeapYear(year)))

  001ee	8b 85 b4 01 00
	00		 mov	 eax, DWORD PTR month$[rbp]
  001f4	ff c8		 dec	 eax
  001f6	48 98		 cdqe
  001f8	8b 44 85 08	 mov	 eax, DWORD PTR DaysInMountch$[rbp+rax*4]
  001fc	39 85 94 01 00
	00		 cmp	 DWORD PTR day$[rbp], eax
  00202	7e 12		 jle	 SHORT $LN5@main
  00204	8b 8d d4 01 00
	00		 mov	 ecx, DWORD PTR year$[rbp]
  0020a	e8 00 00 00 00	 call	 ?defineLeapYear@@YA_NH@Z ; defineLeapYear
  0020f	0f b6 c0	 movzx	 eax, al
  00212	85 c0		 test	 eax, eax
  00214	74 6f		 je	 SHORT $LN4@main
$LN5@main:
  00216	83 bd 94 01 00
	00 00		 cmp	 DWORD PTR day$[rbp], 0
  0021d	7e 66		 jle	 SHORT $LN4@main
  0021f	83 bd b4 01 00
	00 00		 cmp	 DWORD PTR month$[rbp], 0
  00226	7e 5d		 jle	 SHORT $LN4@main
  00228	83 bd b4 01 00
	00 0c		 cmp	 DWORD PTR month$[rbp], 12
  0022f	7f 54		 jg	 SHORT $LN4@main
  00231	83 bd d4 01 00
	00 00		 cmp	 DWORD PTR year$[rbp], 0
  00238	7e 4b		 jle	 SHORT $LN4@main
  0023a	8b 85 b4 01 00
	00		 mov	 eax, DWORD PTR month$[rbp]
  00240	ff c8		 dec	 eax
  00242	48 98		 cdqe
  00244	8b 44 85 08	 mov	 eax, DWORD PTR DaysInMountch$[rbp+rax*4]
  00248	39 85 94 01 00
	00		 cmp	 DWORD PTR day$[rbp], eax
  0024e	7e 09		 jle	 SHORT $LN7@main
  00250	83 bd b4 01 00
	00 02		 cmp	 DWORD PTR month$[rbp], 2
  00257	75 2c		 jne	 SHORT $LN4@main
$LN7@main:
  00259	83 bd b4 01 00
	00 02		 cmp	 DWORD PTR month$[rbp], 2
  00260	0f 85 95 00 00
	00		 jne	 $LN3@main
  00266	83 bd 94 01 00
	00 1d		 cmp	 DWORD PTR day$[rbp], 29
  0026d	0f 8e 88 00 00
	00		 jle	 $LN3@main
  00273	8b 8d d4 01 00
	00		 mov	 ecx, DWORD PTR year$[rbp]
  00279	e8 00 00 00 00	 call	 ?defineLeapYear@@YA_NH@Z ; defineLeapYear
  0027e	0f b6 c0	 movzx	 eax, al
  00281	85 c0		 test	 eax, eax
  00283	74 76		 je	 SHORT $LN3@main
$LN4@main:

; 27   : 	{
; 28   : 		cout << "Ошибка:НЕКОРЕКТНО" << endl;

  00285	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DMIKHOJH@?N?x?h?a?j?$OA?3?M?E?J?N?P?E?J?R?M?N@
  0028c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00293	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00298	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0029f	48 8b c8	 mov	 rcx, rax
  002a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  002a8	90		 npad	 1

; 29   : 		return 1;

  002a9	c7 85 b4 07 00
	00 01 00 00 00	 mov	 DWORD PTR $T14[rbp], 1
  002b3	48 8d 8d 58 01
	00 00		 lea	 rcx, QWORD PTR year_str$[rbp]
  002ba	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002bf	90		 npad	 1
  002c0	48 8d 8d 18 01
	00 00		 lea	 rcx, QWORD PTR month_str$[rbp]
  002c7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002cc	90		 npad	 1
  002cd	48 8d 8d d8 00
	00 00		 lea	 rcx, QWORD PTR day_str$[rbp]
  002d4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002d9	90		 npad	 1
  002da	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR birthday_str$[rbp]
  002e1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002e6	90		 npad	 1
  002e7	48 8d 4d 58	 lea	 rcx, QWORD PTR date$[rbp]
  002eb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002f0	8b 85 b4 07 00
	00		 mov	 eax, DWORD PTR $T14[rbp]
  002f6	e9 34 07 00 00	 jmp	 $LN41@main
$LN3@main:

; 30   : 	}
; 31   : 
; 32   : 
; 33   : 	cout << "Введите дату cвоего рождения в формате ДДММГГГГ: " << endl;

  002fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@EPALFKK@?B?b?e?d?h?r?e?5?d?$OA?r?s?5c?b?n?e?c?n?5?p?n?f?d?e?m?h?$PP?5?b?5@
  00302	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00309	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0030e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00315	48 8b c8	 mov	 rcx, rax
  00318	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  0031e	90		 npad	 1

; 34   : 	cin >> birthday_str;

  0031f	48 8d 95 98 00
	00 00		 lea	 rdx, QWORD PTR birthday_str$[rbp]
  00326	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  0032d	e8 00 00 00 00	 call	 ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
  00332	90		 npad	 1

; 35   : 
; 36   : 	if (birthday_str.length() != 8) {

  00333	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR birthday_str$[rbp]
  0033a	e8 00 00 00 00	 call	 ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
  0033f	48 83 f8 08	 cmp	 rax, 8
  00343	74 76		 je	 SHORT $LN8@main

; 37   : 		cout << "Ошибка:Введите датy в правильном формате" << endl;

  00345	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@HEBGIABN@?N?x?h?a?j?$OA?3?B?b?e?d?h?r?e?5?d?$OA?ry?5?b?5?o?p?$OA?b?h?k?$PM?m?n@
  0034c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00353	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00358	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0035f	48 8b c8	 mov	 rcx, rax
  00362	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  00368	90		 npad	 1

; 38   : 		return 1;

  00369	c7 85 d4 07 00
	00 01 00 00 00	 mov	 DWORD PTR $T15[rbp], 1
  00373	48 8d 8d 58 01
	00 00		 lea	 rcx, QWORD PTR year_str$[rbp]
  0037a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0037f	90		 npad	 1
  00380	48 8d 8d 18 01
	00 00		 lea	 rcx, QWORD PTR month_str$[rbp]
  00387	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0038c	90		 npad	 1
  0038d	48 8d 8d d8 00
	00 00		 lea	 rcx, QWORD PTR day_str$[rbp]
  00394	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00399	90		 npad	 1
  0039a	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR birthday_str$[rbp]
  003a1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003a6	90		 npad	 1
  003a7	48 8d 4d 58	 lea	 rcx, QWORD PTR date$[rbp]
  003ab	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003b0	8b 85 d4 07 00
	00		 mov	 eax, DWORD PTR $T15[rbp]
  003b6	e9 74 06 00 00	 jmp	 $LN41@main
$LN8@main:

; 39   : 	}
; 40   : 
; 41   : 	string bd_sm = birthday_str.substr(0, 2);

  003bb	41 b9 02 00 00
	00		 mov	 r9d, 2
  003c1	45 33 c0	 xor	 r8d, r8d
  003c4	48 8d 95 f8 01
	00 00		 lea	 rdx, QWORD PTR bd_sm$[rbp]
  003cb	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR birthday_str$[rbp]
  003d2	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  003d7	90		 npad	 1

; 42   : 	string monthBD_str = birthday_str.substr(2, 2);

  003d8	41 b9 02 00 00
	00		 mov	 r9d, 2
  003de	41 b8 02 00 00
	00		 mov	 r8d, 2
  003e4	48 8d 95 38 02
	00 00		 lea	 rdx, QWORD PTR monthBD_str$[rbp]
  003eb	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR birthday_str$[rbp]
  003f2	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  003f7	90		 npad	 1

; 43   : 	string yearBD_str = birthday_str.substr(4, 4);

  003f8	41 b9 04 00 00
	00		 mov	 r9d, 4
  003fe	41 b8 04 00 00
	00		 mov	 r8d, 4
  00404	48 8d 95 78 02
	00 00		 lea	 rdx, QWORD PTR yearBD_str$[rbp]
  0040b	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR birthday_str$[rbp]
  00412	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  00417	90		 npad	 1

; 44   : 
; 45   : 	int birthday = stoi(bd_sm);

  00418	41 b8 0a 00 00
	00		 mov	 r8d, 10
  0041e	33 d2		 xor	 edx, edx
  00420	48 8d 8d f8 01
	00 00		 lea	 rcx, QWORD PTR bd_sm$[rbp]
  00427	e8 00 00 00 00	 call	 ?stoi@std@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PEA_KH@Z ; std::stoi
  0042c	89 85 b4 02 00
	00		 mov	 DWORD PTR birthday$[rbp], eax

; 46   : 	int monthOfBirth = stoi(monthBD_str);

  00432	41 b8 0a 00 00
	00		 mov	 r8d, 10
  00438	33 d2		 xor	 edx, edx
  0043a	48 8d 8d 38 02
	00 00		 lea	 rcx, QWORD PTR monthBD_str$[rbp]
  00441	e8 00 00 00 00	 call	 ?stoi@std@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PEA_KH@Z ; std::stoi
  00446	89 85 d4 02 00
	00		 mov	 DWORD PTR monthOfBirth$[rbp], eax

; 47   : 	int yearOfBirth = stoi(yearBD_str);

  0044c	41 b8 0a 00 00
	00		 mov	 r8d, 10
  00452	33 d2		 xor	 edx, edx
  00454	48 8d 8d 78 02
	00 00		 lea	 rcx, QWORD PTR yearBD_str$[rbp]
  0045b	e8 00 00 00 00	 call	 ?stoi@std@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PEA_KH@Z ; std::stoi
  00460	89 85 f4 02 00
	00		 mov	 DWORD PTR yearOfBirth$[rbp], eax

; 48   : 
; 49   : 	if (((birthday > DaysInMountch[month - 1]) && !defineLeapYear(yearOfBirth)) || birthday <= 0 || monthOfBirth <= 0 || monthOfBirth > 12 || yearOfBirth <= 0 ||

  00466	8b 85 b4 01 00
	00		 mov	 eax, DWORD PTR month$[rbp]
  0046c	ff c8		 dec	 eax
  0046e	48 98		 cdqe
  00470	8b 44 85 08	 mov	 eax, DWORD PTR DaysInMountch$[rbp+rax*4]
  00474	39 85 b4 02 00
	00		 cmp	 DWORD PTR birthday$[rbp], eax
  0047a	7e 12		 jle	 SHORT $LN11@main
  0047c	8b 8d f4 02 00
	00		 mov	 ecx, DWORD PTR yearOfBirth$[rbp]
  00482	e8 00 00 00 00	 call	 ?defineLeapYear@@YA_NH@Z ; defineLeapYear
  00487	0f b6 c0	 movzx	 eax, al
  0048a	85 c0		 test	 eax, eax
  0048c	74 73		 je	 SHORT $LN10@main
$LN11@main:
  0048e	83 bd b4 02 00
	00 00		 cmp	 DWORD PTR birthday$[rbp], 0
  00495	7e 6a		 jle	 SHORT $LN10@main
  00497	83 bd d4 02 00
	00 00		 cmp	 DWORD PTR monthOfBirth$[rbp], 0
  0049e	7e 61		 jle	 SHORT $LN10@main
  004a0	83 bd d4 02 00
	00 0c		 cmp	 DWORD PTR monthOfBirth$[rbp], 12
  004a7	7f 58		 jg	 SHORT $LN10@main
  004a9	83 bd f4 02 00
	00 00		 cmp	 DWORD PTR yearOfBirth$[rbp], 0
  004b0	7e 4f		 jle	 SHORT $LN10@main
  004b2	8b 85 b4 01 00
	00		 mov	 eax, DWORD PTR month$[rbp]
  004b8	ff c8		 dec	 eax
  004ba	48 98		 cdqe
  004bc	8b 44 85 08	 mov	 eax, DWORD PTR DaysInMountch$[rbp+rax*4]
  004c0	39 85 b4 02 00
	00		 cmp	 DWORD PTR birthday$[rbp], eax
  004c6	7e 09		 jle	 SHORT $LN13@main
  004c8	83 bd d4 02 00
	00 02		 cmp	 DWORD PTR monthOfBirth$[rbp], 2
  004cf	75 30		 jne	 SHORT $LN10@main
$LN13@main:
  004d1	83 bd d4 02 00
	00 02		 cmp	 DWORD PTR monthOfBirth$[rbp], 2
  004d8	0f 85 c0 00 00
	00		 jne	 $LN9@main
  004de	83 bd b4 02 00
	00 1d		 cmp	 DWORD PTR birthday$[rbp], 29
  004e5	0f 8e b3 00 00
	00		 jle	 $LN9@main
  004eb	8b 8d f4 02 00
	00		 mov	 ecx, DWORD PTR yearOfBirth$[rbp]
  004f1	e8 00 00 00 00	 call	 ?defineLeapYear@@YA_NH@Z ; defineLeapYear
  004f6	0f b6 c0	 movzx	 eax, al
  004f9	85 c0		 test	 eax, eax
  004fb	0f 84 9d 00 00
	00		 je	 $LN9@main
$LN10@main:

; 50   : 		((birthday > DaysInMountch[month - 1] && monthOfBirth != 2) || (monthOfBirth == 2 && birthday > 29) && defineLeapYear(yearOfBirth)))
; 51   : 	{
; 52   : 		cout << "Ошибка:НЕКОРЕКТНО" << endl;

  00501	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DMIKHOJH@?N?x?h?a?j?$OA?3?M?E?J?N?P?E?J?R?M?N@
  00508	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0050f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00514	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0051b	48 8b c8	 mov	 rcx, rax
  0051e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  00524	90		 npad	 1

; 53   : 		return 1;

  00525	c7 85 f4 07 00
	00 01 00 00 00	 mov	 DWORD PTR $T16[rbp], 1
  0052f	48 8d 8d 78 02
	00 00		 lea	 rcx, QWORD PTR yearBD_str$[rbp]
  00536	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0053b	90		 npad	 1
  0053c	48 8d 8d 38 02
	00 00		 lea	 rcx, QWORD PTR monthBD_str$[rbp]
  00543	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00548	90		 npad	 1
  00549	48 8d 8d f8 01
	00 00		 lea	 rcx, QWORD PTR bd_sm$[rbp]
  00550	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00555	90		 npad	 1
  00556	48 8d 8d 58 01
	00 00		 lea	 rcx, QWORD PTR year_str$[rbp]
  0055d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00562	90		 npad	 1
  00563	48 8d 8d 18 01
	00 00		 lea	 rcx, QWORD PTR month_str$[rbp]
  0056a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0056f	90		 npad	 1
  00570	48 8d 8d d8 00
	00 00		 lea	 rcx, QWORD PTR day_str$[rbp]
  00577	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0057c	90		 npad	 1
  0057d	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR birthday_str$[rbp]
  00584	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00589	90		 npad	 1
  0058a	48 8d 4d 58	 lea	 rcx, QWORD PTR date$[rbp]
  0058e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00593	8b 85 f4 07 00
	00		 mov	 eax, DWORD PTR $T16[rbp]
  00599	e9 91 04 00 00	 jmp	 $LN41@main
$LN9@main:

; 54   : 	}
; 55   : 
; 56   : 	if ((year < yearOfBirth) || (year == yearOfBirth && ((month < monthOfBirth) || (month == monthOfBirth && day < birthday)))) 

  0059e	8b 85 f4 02 00
	00		 mov	 eax, DWORD PTR yearOfBirth$[rbp]
  005a4	39 85 d4 01 00
	00		 cmp	 DWORD PTR year$[rbp], eax
  005aa	7c 44		 jl	 SHORT $LN15@main
  005ac	8b 85 f4 02 00
	00		 mov	 eax, DWORD PTR yearOfBirth$[rbp]
  005b2	39 85 d4 01 00
	00		 cmp	 DWORD PTR year$[rbp], eax
  005b8	0f 85 cf 00 00
	00		 jne	 $LN14@main
  005be	8b 85 d4 02 00
	00		 mov	 eax, DWORD PTR monthOfBirth$[rbp]
  005c4	39 85 b4 01 00
	00		 cmp	 DWORD PTR month$[rbp], eax
  005ca	7c 24		 jl	 SHORT $LN15@main
  005cc	8b 85 d4 02 00
	00		 mov	 eax, DWORD PTR monthOfBirth$[rbp]
  005d2	39 85 b4 01 00
	00		 cmp	 DWORD PTR month$[rbp], eax
  005d8	0f 85 af 00 00
	00		 jne	 $LN14@main
  005de	8b 85 b4 02 00
	00		 mov	 eax, DWORD PTR birthday$[rbp]
  005e4	39 85 94 01 00
	00		 cmp	 DWORD PTR day$[rbp], eax
  005ea	0f 8d 9d 00 00
	00		 jge	 $LN14@main
$LN15@main:

; 57   : 	{
; 58   : 		cout << "Ошибка:Вы еще не родились!" << endl;

  005f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@DOGGEIDJ@?N?x?h?a?j?$OA?3?B?$PL?5?e?y?e?5?m?e?5?p?n?d?h?k?h?q?$PM?$CB@
  005f7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  005fe	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00603	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0060a	48 8b c8	 mov	 rcx, rax
  0060d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  00613	90		 npad	 1

; 59   : 		return 1;

  00614	c7 85 14 08 00
	00 01 00 00 00	 mov	 DWORD PTR $T17[rbp], 1
  0061e	48 8d 8d 78 02
	00 00		 lea	 rcx, QWORD PTR yearBD_str$[rbp]
  00625	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0062a	90		 npad	 1
  0062b	48 8d 8d 38 02
	00 00		 lea	 rcx, QWORD PTR monthBD_str$[rbp]
  00632	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00637	90		 npad	 1
  00638	48 8d 8d f8 01
	00 00		 lea	 rcx, QWORD PTR bd_sm$[rbp]
  0063f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00644	90		 npad	 1
  00645	48 8d 8d 58 01
	00 00		 lea	 rcx, QWORD PTR year_str$[rbp]
  0064c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00651	90		 npad	 1
  00652	48 8d 8d 18 01
	00 00		 lea	 rcx, QWORD PTR month_str$[rbp]
  00659	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0065e	90		 npad	 1
  0065f	48 8d 8d d8 00
	00 00		 lea	 rcx, QWORD PTR day_str$[rbp]
  00666	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0066b	90		 npad	 1
  0066c	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR birthday_str$[rbp]
  00673	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00678	90		 npad	 1
  00679	48 8d 4d 58	 lea	 rcx, QWORD PTR date$[rbp]
  0067d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00682	8b 85 14 08 00
	00		 mov	 eax, DWORD PTR $T17[rbp]
  00688	e9 a2 03 00 00	 jmp	 $LN41@main
$LN14@main:

; 60   : 	}
; 61   : 
; 62   : 
; 63   : 	if (defineLeapYear(year)) 

  0068d	8b 8d d4 01 00
	00		 mov	 ecx, DWORD PTR year$[rbp]
  00693	e8 00 00 00 00	 call	 ?defineLeapYear@@YA_NH@Z ; defineLeapYear
  00698	0f b6 c0	 movzx	 eax, al
  0069b	85 c0		 test	 eax, eax
  0069d	74 35		 je	 SHORT $LN17@main

; 64   : 	{
; 65   : 		cout << year << " - високосный год." << endl;

  0069f	8b 95 d4 01 00
	00		 mov	 edx, DWORD PTR year$[rbp]
  006a5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  006ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  006b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@COMGIBML@?5?9?5?b?h?q?n?j?n?q?m?$PL?i?5?c?n?d?4@
  006b9	48 8b c8	 mov	 rcx, rax
  006bc	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  006c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  006c8	48 8b c8	 mov	 rcx, rax
  006cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  006d1	90		 npad	 1

; 66   : 	}

  006d2	eb 33		 jmp	 SHORT $LN18@main
$LN17@main:

; 67   : 	else {
; 68   : 		cout << year << " - не високосный год." << endl;

  006d4	8b 95 d4 01 00
	00		 mov	 edx, DWORD PTR year$[rbp]
  006da	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  006e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  006e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@BCBIAMKN@?5?9?5?m?e?5?b?h?q?n?j?n?q?m?$PL?i?5?c?n?d?4@
  006ee	48 8b c8	 mov	 rcx, rax
  006f1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  006f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  006fd	48 8b c8	 mov	 rcx, rax
  00700	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  00706	90		 npad	 1
$LN18@main:

; 69   : 	}
; 70   : 
; 71   : 	int OrdinalNumber = countNumber(day, month, year);

  00707	44 8b 85 d4 01
	00 00		 mov	 r8d, DWORD PTR year$[rbp]
  0070e	8b 95 b4 01 00
	00		 mov	 edx, DWORD PTR month$[rbp]
  00714	8b 8d 94 01 00
	00		 mov	 ecx, DWORD PTR day$[rbp]
  0071a	e8 00 00 00 00	 call	 ?countNumber@@YAHHHH@Z	; countNumber
  0071f	89 85 14 03 00
	00		 mov	 DWORD PTR OrdinalNumber$[rbp], eax

; 72   : 	cout << "Порядковый номер введенного дня в году равен: " << OrdinalNumber << endl;

  00725	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@PJJGMNHH@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?b?b?e?d?e?m?m?n?c?n?5?d?m?$PP@
  0072c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00733	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00738	8b 95 14 03 00
	00		 mov	 edx, DWORD PTR OrdinalNumber$[rbp]
  0073e	48 8b c8	 mov	 rcx, rax
  00741	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00747	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0074e	48 8b c8	 mov	 rcx, rax
  00751	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  00757	90		 npad	 1

; 73   : 
; 74   : 	string nameMonth[12] = { "Январь", "Февраль", "Март", "Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь" };

  00758	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06BMGEFDJH@?$NP?m?b?$OA?p?$PM@
  0075f	48 8d 8d 40 03
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp]
  00766	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0076b	90		 npad	 1
  0076c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07JBGLOLNM@?T?e?b?p?$OA?k?$PM@
  00773	48 8d 8d 68 03
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+40]
  0077a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0077f	90		 npad	 1
  00780	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04FAAJLMOP@?L?$OA?p?r@
  00787	48 8d 8d 90 03
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+80]
  0078e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00793	90		 npad	 1
  00794	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06PNLHGGPK@?$MA?o?p?e?k?$PM@
  0079b	48 8d 8d b8 03
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+120]
  007a2	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  007a7	90		 npad	 1
  007a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03MEHOOJFI@?L?$OA?i@
  007af	48 8d 8d e0 03
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+160]
  007b6	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  007bb	90		 npad	 1
  007bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04JPDCCHCO@?H?$PO?m?$PM@
  007c3	48 8d 8d 08 04
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+200]
  007ca	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  007cf	90		 npad	 1
  007d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04JLLPFLJM@?H?$PO?k?$PM@
  007d7	48 8d 8d 30 04
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+240]
  007de	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  007e3	90		 npad	 1
  007e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06JMCJJLBN@?$MA?b?c?s?q?r@
  007eb	48 8d 8d 58 04
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+280]
  007f2	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  007f7	90		 npad	 1
  007f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08ECPNNGFL@?Q?e?m?r?$PP?a?p?$PM@
  007ff	48 8d 8d 80 04
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+320]
  00806	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0080b	90		 npad	 1
  0080c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07KDBBAIGI@?N?j?r?$PP?a?p?$PM@
  00813	48 8d 8d a8 04
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+360]
  0081a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0081f	90		 npad	 1
  00820	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06EKHNJIII@?M?n?$PP?a?p?$PM@
  00827	48 8d 8d d0 04
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+400]
  0082e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00833	90		 npad	 1
  00834	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07MJKMOEOM@?D?e?j?$OA?a?p?$PM@
  0083b	48 8d 8d f8 04
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+440]
  00842	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00847	90		 npad	 1

; 75   : 	cout <<"Порядковый номер месяца: " << month<<". Название введенного месяца: " << nameMonth[month - 1] << endl;

  00848	8b 85 b4 01 00
	00		 mov	 eax, DWORD PTR month$[rbp]
  0084e	ff c8		 dec	 eax
  00850	48 98		 cdqe
  00852	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00856	48 8d 84 05 40
	03 00 00	 lea	 rax, QWORD PTR nameMonth$[rbp+rax]
  0085e	48 89 85 28 08
	00 00		 mov	 QWORD PTR tv384[rbp], rax
  00865	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@INKKNDJD@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?l?e?q?$PP?v?$OA?3?5@
  0086c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00873	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00878	8b 95 b4 01 00
	00		 mov	 edx, DWORD PTR month$[rbp]
  0087e	48 8b c8	 mov	 rcx, rax
  00881	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00887	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@KNLOKJBO@?4?5?M?$OA?g?b?$OA?m?h?e?5?b?b?e?d?e?m?m?n?c?n?5?l?e?q?$PP?v?$OA?3?5@
  0088e	48 8b c8	 mov	 rcx, rax
  00891	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00896	48 8b 8d 28 08
	00 00		 mov	 rcx, QWORD PTR tv384[rbp]
  0089d	48 8b d1	 mov	 rdx, rcx
  008a0	48 8b c8	 mov	 rcx, rax
  008a3	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  008a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  008af	48 8b c8	 mov	 rcx, rax
  008b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  008b8	90		 npad	 1

; 76   : 	cout<<"Порядковый номер месяца: " <<monthOfBirth <<". Название месяца рождения: " << nameMonth[monthOfBirth - 1] << endl;

  008b9	8b 85 d4 02 00
	00		 mov	 eax, DWORD PTR monthOfBirth$[rbp]
  008bf	ff c8		 dec	 eax
  008c1	48 98		 cdqe
  008c3	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  008c7	48 8d 84 05 40
	03 00 00	 lea	 rax, QWORD PTR nameMonth$[rbp+rax]
  008cf	48 89 85 28 08
	00 00		 mov	 QWORD PTR tv402[rbp], rax
  008d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@INKKNDJD@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?l?e?q?$PP?v?$OA?3?5@
  008dd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  008e4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  008e9	8b 95 d4 02 00
	00		 mov	 edx, DWORD PTR monthOfBirth$[rbp]
  008ef	48 8b c8	 mov	 rcx, rax
  008f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  008f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@DIPLOPKJ@?4?5?M?$OA?g?b?$OA?m?h?e?5?l?e?q?$PP?v?$OA?5?p?n?f?d?e?m?h?$PP?3?5@
  008ff	48 8b c8	 mov	 rcx, rax
  00902	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00907	48 8b 8d 28 08
	00 00		 mov	 rcx, QWORD PTR tv402[rbp]
  0090e	48 8b d1	 mov	 rdx, rcx
  00911	48 8b c8	 mov	 rcx, rax
  00914	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00919	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00920	48 8b c8	 mov	 rcx, rax
  00923	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  00929	90		 npad	 1

; 77   : 	
; 78   : 	int summDays = countDays(birthday, monthOfBirth, day, month, year, yearOfBirth);

  0092a	8b 85 f4 02 00
	00		 mov	 eax, DWORD PTR yearOfBirth$[rbp]
  00930	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00934	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR year$[rbp]
  0093a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0093e	44 8b 8d b4 01
	00 00		 mov	 r9d, DWORD PTR month$[rbp]
  00945	44 8b 85 94 01
	00 00		 mov	 r8d, DWORD PTR day$[rbp]
  0094c	8b 95 d4 02 00
	00		 mov	 edx, DWORD PTR monthOfBirth$[rbp]
  00952	8b 8d b4 02 00
	00		 mov	 ecx, DWORD PTR birthday$[rbp]
  00958	e8 00 00 00 00	 call	 ?countDays@@YAHHHHHHH@Z	; countDays
  0095d	89 85 34 05 00
	00		 mov	 DWORD PTR summDays$[rbp], eax

; 79   : 	cout << "До дня вашего рождения осталось: " << summDays<<" дней " << endl;

  00963	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@EPIHPMBK@?D?n?5?d?m?$PP?5?b?$OA?x?e?c?n?5?p?n?f?d?e?m?h?$PP?5?n?q?r?$OA?k?n?q?$PM@
  0096a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00971	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00976	8b 95 34 05 00
	00		 mov	 edx, DWORD PTR summDays$[rbp]
  0097c	48 8b c8	 mov	 rcx, rax
  0097f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00985	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06CCKJDNGA@?5?d?m?e?i?5@
  0098c	48 8b c8	 mov	 rcx, rax
  0098f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00994	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0099b	48 8b c8	 mov	 rcx, rax
  0099e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  009a4	90		 npad	 1

; 80   : 	
; 81   : }

  009a5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  009ac	41 b8 0c 00 00
	00		 mov	 r8d, 12
  009b2	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  009b7	48 8d 8d 40 03
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp]
  009be	e8 00 00 00 00	 call	 ??_M@YAXPEAX_K1P6AX0@Z@Z
  009c3	90		 npad	 1
  009c4	48 8d 8d 78 02
	00 00		 lea	 rcx, QWORD PTR yearBD_str$[rbp]
  009cb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  009d0	90		 npad	 1
  009d1	48 8d 8d 38 02
	00 00		 lea	 rcx, QWORD PTR monthBD_str$[rbp]
  009d8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  009dd	90		 npad	 1
  009de	48 8d 8d f8 01
	00 00		 lea	 rcx, QWORD PTR bd_sm$[rbp]
  009e5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  009ea	90		 npad	 1
  009eb	48 8d 8d 58 01
	00 00		 lea	 rcx, QWORD PTR year_str$[rbp]
  009f2	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  009f7	90		 npad	 1
  009f8	48 8d 8d 18 01
	00 00		 lea	 rcx, QWORD PTR month_str$[rbp]
  009ff	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00a04	90		 npad	 1
  00a05	48 8d 8d d8 00
	00 00		 lea	 rcx, QWORD PTR day_str$[rbp]
  00a0c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00a11	90		 npad	 1
  00a12	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR birthday_str$[rbp]
  00a19	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00a1e	90		 npad	 1
  00a1f	48 8d 4d 58	 lea	 rcx, QWORD PTR date$[rbp]
  00a23	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00a28	90		 npad	 1
  00a29	eb 02		 jmp	 SHORT $LN42@main
  00a2b	eb 02		 jmp	 SHORT $LN41@main
$LN42@main:
  00a2d	33 c0		 xor	 eax, eax
$LN41@main:
  00a2f	48 8b f8	 mov	 rdi, rax
  00a32	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00a36	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:main$rtcFrameData
  00a3d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00a42	48 8b c7	 mov	 rax, rdi
  00a45	48 8b 8d 30 08
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00a4c	48 33 cd	 xor	 rcx, rbp
  00a4f	e8 00 00 00 00	 call	 __security_check_cookie
  00a54	48 8d a5 48 08
	00 00		 lea	 rsp, QWORD PTR [rbp+2120]
  00a5b	5f		 pop	 rdi
  00a5c	5d		 pop	 rbp
  00a5d	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$0 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 58	 lea	 rcx, QWORD PTR date$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
main$dtor$0 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$1 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR birthday_str$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$1 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$2 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d d8 00
	00 00		 lea	 rcx, QWORD PTR day_str$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$2 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$3 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 18 01
	00 00		 lea	 rcx, QWORD PTR month_str$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$3 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$4 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 58 01
	00 00		 lea	 rcx, QWORD PTR year_str$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$4 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$5 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d f8 01
	00 00		 lea	 rcx, QWORD PTR bd_sm$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$5 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$6 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 38 02
	00 00		 lea	 rcx, QWORD PTR monthBD_str$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$6 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$7 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 78 02
	00 00		 lea	 rcx, QWORD PTR yearBD_str$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$7 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$8 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 40 03
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$8 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$9 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 68 03
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+40]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$9 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$10 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 90 03
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+80]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$10 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$11 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d b8 03
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+120]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$11 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$12 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d e0 03
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+160]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$12 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$13 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 08 04
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+200]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$13 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$14 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 30 04
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+240]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$14 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$15 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 58 04
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+280]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$15 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$16 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 80 04
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+320]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$16 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$17 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d a8 04
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+360]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$17 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$18 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d d0 04
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp+400]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
main$dtor$18 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
DaysInMountch$ = 8
date$ = 88
birthday_str$ = 152
day_str$ = 216
month_str$ = 280
year_str$ = 344
day$ = 404
month$ = 436
year$ = 468
bd_sm$ = 504
monthBD_str$ = 568
yearBD_str$ = 632
birthday$ = 692
monthOfBirth$ = 724
yearOfBirth$ = 756
OrdinalNumber$ = 788
nameMonth$ = 832
summDays$ = 1332
$T13 = 1940
$T14 = 1972
$T15 = 2004
$T16 = 2036
$T17 = 2068
tv384 = 2088
tv402 = 2088
__$ArrayPad$ = 2096
main$dtor$20 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001b	41 b8 0c 00 00
	00		 mov	 r8d, 12
  00021	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00026	48 8d 8d 40 03
	00 00		 lea	 rcx, QWORD PTR nameMonth$[rbp]
  0002d	e8 00 00 00 00	 call	 ??_M@YAXPEAX_K1P6AX0@Z@Z
  00032	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
main$dtor$20 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Get_size_of_n@$00@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 4
_Count$ = 256
??$_Get_size_of_n@$00@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<1>, COMDAT

; 79   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 80   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00020	c6 45 04 00	 mov	 BYTE PTR _Overflow_is_possible$[rbp], 0

; 81   : 
; 82   :     if constexpr (_Overflow_is_possible) {
; 83   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 84   :         if (_Count > _Max_possible) {
; 85   :             _Throw_bad_array_new_length(); // multiply overflow
; 86   :         }
; 87   :     }
; 88   : 
; 89   :     return _Count * _Ty_size;

  00024	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]

; 90   : }

  0002b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
??$_Get_size_of_n@$00@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 8
_Ptr_container$ = 40
_Ptr$ = 72
_Bytes$ = 320
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 151  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 152  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 153  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00020	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  00027	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  0002b	48 89 45 08	 mov	 QWORD PTR _Block_size$[rbp], rax

; 154  :     if (_Block_size <= _Bytes) {

  0002f	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  00036	48 39 45 08	 cmp	 QWORD PTR _Block_size$[rbp], rax
  0003a	77 06		 ja	 SHORT $LN8@Allocate_m

; 155  :         _Throw_bad_array_new_length(); // add overflow

  0003c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
  00041	90		 npad	 1
$LN8@Allocate_m:

; 156  :     }
; 157  : 
; 158  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00042	48 8b 4d 08	 mov	 rcx, QWORD PTR _Block_size$[rbp]
  00046	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  0004b	48 89 45 28	 mov	 QWORD PTR _Ptr_container$[rbp], rax
$LN4@Allocate_m:

; 159  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0004f	48 83 7d 28 00	 cmp	 QWORD PTR _Ptr_container$[rbp], 0
  00054	74 02		 je	 SHORT $LN9@Allocate_m
  00056	eb 6c		 jmp	 SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  0005f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00064	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0006b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00070	45 33 c9	 xor	 r9d, r9d
  00073	41 b8 9f 00 00
	00		 mov	 r8d, 159		; 0000009fH
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GC@OGIIGPAB@C?3?2Program?5Files?2Microsoft?5Visu@
  00080	b9 02 00 00 00	 mov	 ecx, 2
  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0008b	83 f8 01	 cmp	 eax, 1
  0008e	75 03		 jne	 SHORT $LN12@Allocate_m
  00090	cc		 int	 3
  00091	33 c0		 xor	 eax, eax
$LN12@Allocate_m:
  00093	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0009c	41 b9 9f 00 00
	00		 mov	 r9d, 159		; 0000009fH
  000a2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1ME@MIFAIHL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000bd	90		 npad	 1
  000be	33 c0		 xor	 eax, eax
  000c0	85 c0		 test	 eax, eax
  000c2	75 94		 jne	 SHORT $LN7@Allocate_m
$LN10@Allocate_m:
  000c4	33 c0		 xor	 eax, eax
  000c6	85 c0		 test	 eax, eax
  000c8	75 85		 jne	 SHORT $LN4@Allocate_m

; 160  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  000ca	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr_container$[rbp]
  000ce	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  000d2	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H
  000d6	48 89 45 48	 mov	 QWORD PTR _Ptr$[rbp], rax

; 161  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  000da	b8 08 00 00 00	 mov	 eax, 8
  000df	48 6b c0 ff	 imul	 rax, rax, -1
  000e3	48 8b 4d 48	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000e7	48 8b 55 28	 mov	 rdx, QWORD PTR _Ptr_container$[rbp]
  000eb	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 162  : 
; 163  : #ifdef _DEBUG
; 164  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

  000ef	b8 08 00 00 00	 mov	 eax, 8
  000f4	48 6b c0 fe	 imul	 rax, rax, -2
  000f8	48 8b 4d 48	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000fc	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  00106	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 165  : #endif // defined(_DEBUG)
; 166  :     return _Ptr;

  0010a	48 8b 45 48	 mov	 rax, QWORD PTR _Ptr$[rbp]
$LN11@Allocate_m:

; 167  : }

  0010e	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00115	5f		 pop	 rdi
  00116	5d		 pop	 rbp
  00117	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z
_TEXT	SEGMENT
_Al$ = 224
_Count$ = 232
??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z PROC ; std::_Allocate_at_least_helper<std::allocator<char> >, COMDAT

; 2173 :     _Alloc& _Al, _CRT_GUARDOVERFLOW typename allocator_traits<_Alloc>::size_type& _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 2174 : #if _HAS_CXX23
; 2175 :     if constexpr (_Should_allocate_at_least<_Alloc>) {
; 2176 :         auto [_Ptr, _Allocated] = _Al.allocate_at_least(_Count);
; 2177 :         _Count                  = _Allocated;
; 2178 :         return _Ptr;
; 2179 :     } else
; 2180 : #endif // _HAS_CXX23
; 2181 :     {
; 2182 :         return _Al.allocate(_Count);

  00025	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  0002c	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0002f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00036	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate

; 2183 :     }
; 2184 : }

  0003b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00042	5f		 pop	 rdi
  00043	5d		 pop	 rbp
  00044	c3		 ret	 0
??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z ENDP ; std::_Allocate_at_least_helper<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
_Al$ = 224
_Ptr$ = 232
_Count$ = 240
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 682  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	90		 npad	 1

; 683  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 684  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 685  :         if (_STD is_constant_evaluated()) {
; 686  :             _Al.deallocate(_Ptr, _Count);
; 687  :         } else
; 688  : #endif // _HAS_CXX20
; 689  :         {
; 690  :             (void) _Al;
; 691  :             _STD _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0002a	48 6b 85 f0 00
	00 00 10	 imul	 rax, QWORD PTR _Count$[rbp], 16
  00032	48 8b d0	 mov	 rdx, rax
  00035	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  0003c	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z ; std::_Deallocate<16>
  00041	90		 npad	 1

; 692  :         }
; 693  :     }

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
_Val1$ = 240
??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>, COMDAT

; 1500 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  00023	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00028	90		 npad	 1
  00029	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  00038	90		 npad	 1
  00039	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00047	5f		 pop	 rdi
  00048	5d		 pop	 rbp
  00049	c3		 ret	 0
??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
<_Val2_0>$ = 240
??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>, COMDAT

; 1495 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  00023	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00028	90		 npad	 1
  00029	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR <_Val2_0>$[rbp]
  00037	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0003a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 1558 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__08D5818C_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1559 :     return __builtin_addressof(_Val);

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 1560 : }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 224
??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits>, COMDAT

; 194  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 195  :     // allocate _Bytes
; 196  :     if (_Bytes == 0) {

  00020	48 83 bd e0 00
	00 00 00	 cmp	 QWORD PTR _Bytes$[rbp], 0
  00028	75 04		 jne	 SHORT $LN2@Allocate

; 197  :         return nullptr;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 27		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 198  :     }
; 199  : 
; 200  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 201  :     if (_STD is_constant_evaluated()) {
; 202  :         return _Traits::_Allocate(_Bytes);
; 203  :     }
; 204  : #endif // _HAS_CXX20
; 205  : 
; 206  : #ifdef __cpp_aligned_new
; 207  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 208  :         size_t _Passed_align = _Align;
; 209  : #if defined(_M_IX86) || defined(_M_X64)
; 210  :         if (_Bytes >= _Big_allocation_threshold) {
; 211  :             // boost the alignment of big allocations to help autovectorization
; 212  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 213  :         }
; 214  : #endif // defined(_M_IX86) || defined(_M_X64)
; 215  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 216  :     } else
; 217  : #endif // defined(__cpp_aligned_new)
; 218  :     {
; 219  : #if defined(_M_IX86) || defined(_M_X64)
; 220  :         if (_Bytes >= _Big_allocation_threshold) {

  0002e	48 81 bd e0 00
	00 00 00 10 00
	00		 cmp	 QWORD PTR _Bytes$[rbp], 4096 ; 00001000H
  00039	72 0e		 jb	 SHORT $LN3@Allocate

; 221  :             // boost the alignment of big allocations to help autovectorization
; 222  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0003b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00042	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00047	eb 0c		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 223  :         }
; 224  : #endif // defined(_M_IX86) || defined(_M_X64)
; 225  :         return _Traits::_Allocate(_Bytes);

  00049	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00050	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
$LN1@Allocate:

; 226  :     }
; 227  : }

  00055	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 4
_Max_possible$1 = 40
_Count$ = 288
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 79   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 80   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00020	c6 45 04 01	 mov	 BYTE PTR _Overflow_is_possible$[rbp], 1

; 81   : 
; 82   :     if constexpr (_Overflow_is_possible) {
; 83   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00024	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  0002e	48 89 45 28	 mov	 QWORD PTR _Max_possible$1[rbp], rax

; 84   :         if (_Count > _Max_possible) {

  00032	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  0003c	48 39 85 20 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  00043	76 06		 jbe	 SHORT $LN2@Get_size_o

; 85   :             _Throw_bad_array_new_length(); // multiply overflow

  00045	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
  0004a	90		 npad	 1
$LN2@Get_size_o:

; 86   :         }
; 87   :     }
; 88   : 
; 89   :     return _Count * _Ty_size;

  0004b	48 6b 85 20 01
	00 00 10	 imul	 rax, QWORD PTR _Count$[rbp], 16
$LN3@Get_size_o:

; 90   : }

  00053	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0005a	5f		 pop	 rdi
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\utility
;	COMDAT ??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z
_TEXT	SEGMENT
_Old_val$ = 8
_Val$ = 256
_New_val$ = 264
??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z PROC ; std::exchange<std::_Facet_base *,std::nullptr_t>, COMDAT

; 751  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9D8F0974_utility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 752  :     // assign _New_val to _Val, return previous _Val
; 753  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00025	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]
  0002c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002f	48 89 45 08	 mov	 QWORD PTR _Old_val$[rbp], rax

; 754  :     _Val         = static_cast<_Other&&>(_New_val);

  00033	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]
  0003a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_val$[rbp]
  00041	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00044	48 89 08	 mov	 QWORD PTR [rax], rcx

; 755  :     return _Old_val;

  00047	48 8b 45 08	 mov	 rax, QWORD PTR _Old_val$[rbp]

; 756  : }

  0004b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z ENDP ; std::exchange<std::_Facet_base *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits
;	COMDAT ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z PROC		; std::addressof<char *>, COMDAT

; 1558 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__08D5818C_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1559 :     return __builtin_addressof(_Val);

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 1560 : }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xutility
;	COMDAT ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z
_TEXT	SEGMENT
$T1 = 200
_Obj$ = 256
<_Args_0>$ = 264
??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 396  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A278CDB8_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 397  : #if _HAS_CXX20
; 398  :     if (_STD is_constant_evaluated()) {
; 399  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 400  :     } else
; 401  : #endif // _HAS_CXX20
; 402  :     {
; 403  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00025	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Obj$[rbp]
  0002c	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char *>
  00031	48 8b d0	 mov	 rdx, rax
  00034	b9 08 00 00 00	 mov	 ecx, 8
  00039	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0003e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00045	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]
  0004c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  00053	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00056	48 89 08	 mov	 QWORD PTR [rax], rcx

; 404  :     }
; 405  : }

  00059	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z
_TEXT	SEGMENT
_Fancy_ptr$ = 8
_Al$ = 256
_Capacity$ = 264
??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Allocate_for_capacity<0>, COMDAT

; 804  :     _NODISCARD static _CONSTEXPR20 pointer _Allocate_for_capacity(_Alty& _Al, size_type& _Capacity) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 805  :         _STL_INTERNAL_CHECK(_Capacity > _Small_string_capacity);
; 806  :         ++_Capacity; // Take null terminator into consideration

  00025	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Capacity$[rbp]
  0002c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002f	48 ff c0	 inc	 rax
  00032	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Capacity$[rbp]
  00039	48 89 01	 mov	 QWORD PTR [rcx], rax

; 807  : 
; 808  :         pointer _Fancy_ptr = nullptr;

  0003c	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR _Fancy_ptr$[rbp], 0

; 809  :         if constexpr (_Policy == _Allocation_policy::_At_least) {
; 810  :             _Fancy_ptr = _Allocate_at_least_helper(_Al, _Capacity);

  00044	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Capacity$[rbp]
  0004b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00052	e8 00 00 00 00	 call	 ??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z ; std::_Allocate_at_least_helper<std::allocator<char> >
  00057	48 89 45 08	 mov	 QWORD PTR _Fancy_ptr$[rbp], rax

; 811  :         } else {
; 812  :             _STL_INTERNAL_STATIC_ASSERT(_Policy == _Allocation_policy::_Exactly);
; 813  :             _Fancy_ptr = _Al.allocate(_Capacity);
; 814  :         }
; 815  : 
; 816  : #if _HAS_CXX20
; 817  :         // Start element lifetimes to avoid UB. This is a more general mechanism than _String_val::_Activate_SSO_buffer,
; 818  :         // but likely more impactful to throughput.
; 819  :         if (_STD is_constant_evaluated()) {
; 820  :             _Elem* const _Ptr = _Unfancy(_Fancy_ptr);
; 821  :             for (size_type _Idx = 0; _Idx < _Capacity; ++_Idx) {
; 822  :                 _STD construct_at(_Ptr + _Idx);
; 823  :             }
; 824  :         }
; 825  : #endif // _HAS_CXX20
; 826  :         --_Capacity;

  0005b	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Capacity$[rbp]
  00062	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00065	48 ff c8	 dec	 rax
  00068	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Capacity$[rbp]
  0006f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 827  :         return _Fancy_ptr;

  00072	48 8b 45 08	 mov	 rax, QWORD PTR _Fancy_ptr$[rbp]

; 828  :     }

  00076	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007d	5f		 pop	 rdi
  0007e	5d		 pop	 rbp
  0007f	c3		 ret	 0
??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Allocate_for_capacity<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 35   : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 36   :     return _Ptr;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]

; 37   : }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1459 :     _CONSTEXPR20 ~_Container_proxy_ptr12() {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1460 :         if (_Ptr) {

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0002b	74 1b		 je	 SHORT $LN2@Container_

; 1461 :             _Delete_plain_internal(_Al, _Ptr);

  0002d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00042	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00047	90		 npad	 1
$LN2@Container_:

; 1462 :         }
; 1463 :     }

  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_Al_$ = 264
_Mycont$ = 272
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1445 :     _CONSTEXPR20 _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont) : _Al(_Al_) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	90		 npad	 1
  0002a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ??0_Basic_container_proxy_ptr12@std@@IEAA@XZ ; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
  00036	90		 npad	 1
  00037	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Al_$[rbp]
  00045	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1446 :         // create a new _Container_proxy pointing at _Mycont
; 1447 :         _Ptr = _Unfancy(_Al_.allocate(1));

  00049	ba 01 00 00 00	 mov	 edx, 1
  0004e	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Al_$[rbp]
  00055	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
  0005a	48 8b c8	 mov	 rcx, rax
  0005d	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  00062	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00069	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1448 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

  0006c	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR _Mycont$[rbp]
  00073	e8 00 00 00 00	 call	 ??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
  00078	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  0007f	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00086	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008d	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00090	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
  00095	90		 npad	 1

; 1449 :         _Mycont._Myproxy = _Ptr;

  00096	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR _Mycont$[rbp]
  0009d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1450 :     }

  000aa	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b1	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000b8	5f		 pop	 rdi
  000b9	5d		 pop	 rbp
  000ba	c3		 ret	 0
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 224
_Ptr$ = 232
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 1099 : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 1100 :     // deallocate a plain pointer using an allocator
; 1101 :     using _Alloc_traits = allocator_traits<_Alloc>;
; 1102 :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 1103 :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

  00025	41 b8 01 00 00
	00		 mov	 r8d, 1
  0002b	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00032	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00039	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  0003e	90		 npad	 1

; 1104 :     } else {
; 1105 :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 1106 :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 1107 :     }
; 1108 : }

  0003f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\memory
;	COMDAT ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_Ptr$ = 264
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>, COMDAT

; 3355 :     _CONSTEXPR23 explicit unique_ptr(pointer _Ptr) noexcept : _Mypair(_Zero_then_variadic_args_t{}, _Ptr) {}

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B5D87B11_memory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1
  00025	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002c	4c 8d 85 08 01
	00 00		 lea	 r8, QWORD PTR _Ptr$[rbp]
  00033	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  0003a	48 8b c8	 mov	 rcx, rax
  0003d	e8 00 00 00 00	 call	 ??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
  00042	90		 npad	 1
  00043	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 224
classSize$ = 232
?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAX_K@Z PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::__autoclassinit2, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  0001d	33 c0		 xor	 eax, eax
  0001f	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR classSize$[rbp]
  00026	f3 aa		 rep stosb
  00028	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002f	5f		 pop	 rdi
  00030	5d		 pop	 rbp
  00031	c3		 ret	 0
?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAX_K@Z ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first, COMDAT

; 1502 :     constexpr _Ty1& _Get_first() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1503 :         return *this;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 1504 :     }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\memory
;	COMDAT ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ
_TEXT	SEGMENT
$T1 = 196
this$ = 256
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release, COMDAT

; 3440 :     _CONSTEXPR23 pointer release() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B5D87B11_memory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 3441 :         return _STD exchange(_Mypair._Myval2, nullptr);

  00020	48 c7 85 c4 00
	00 00 00 00 00
	00		 mov	 QWORD PTR $T1[rbp], 0
  0002b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00032	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00039	48 8b c8	 mov	 rcx, rax
  0003c	e8 00 00 00 00	 call	 ??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z ; std::exchange<std::_Facet_base *,std::nullptr_t>

; 3442 :     }

  00041	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\memory
;	COMDAT ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >, COMDAT

; 3410 :     _CONSTEXPR23 ~unique_ptr() noexcept {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B5D87B11_memory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 3411 :         if (_Mypair._Myval2) {

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0002b	74 22		 je	 SHORT $LN2@unique_ptr

; 3412 :             _Mypair._Get_first()(_Mypair._Myval2);

  0002d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 8b c8	 mov	 rcx, rax
  00037	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
  0003c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00043	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00046	48 8b c8	 mov	 rcx, rax
  00049	e8 00 00 00 00	 call	 ??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
  0004e	90		 npad	 1
$LN2@unique_ptr:

; 3413 :         }
; 3414 :     }

  0004f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00056	5f		 pop	 rdi
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\memory
;	COMDAT ??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z
_TEXT	SEGMENT
$T1 = 200
tv70 = 216
this$ = 256
_Ptr$ = 264
??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z PROC ; std::default_delete<std::_Facet_base>::operator(), COMDAT

; 3300 :     _CONSTEXPR23 void operator()(_Ty* _Ptr) const noexcept /* strengthened */ { // delete a pointer

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B5D87B11_memory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 3301 :         static_assert(0 < sizeof(_Ty), "can't delete an incomplete type");
; 3302 :         delete _Ptr;

  00025	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  0002c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00033	48 83 bd c8 00
	00 00 00	 cmp	 QWORD PTR $T1[rbp], 0
  0003b	74 21		 je	 SHORT $LN3@operator
  0003d	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]
  00044	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00047	ba 01 00 00 00	 mov	 edx, 1
  0004c	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR $T1[rbp]
  00053	ff 10		 call	 QWORD PTR [rax]
  00055	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv70[rbp], rax
  0005c	eb 0b		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0005e	48 c7 85 d8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv70[rbp], 0
$LN4@operator:

; 3303 :     }

  00069	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00070	5f		 pop	 rdi
  00071	5d		 pop	 rbp
  00072	c3		 ret	 0
??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z ENDP ; std::default_delete<std::_Facet_base>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 224
_Bytes$ = 232
??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16>, COMDAT

; 230  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 231  :     // deallocate storage allocated by _Allocate
; 232  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 233  :     if (_STD is_constant_evaluated()) {
; 234  :         ::operator delete(_Ptr);
; 235  :         return;
; 236  :     }
; 237  : #endif // _HAS_CXX20
; 238  : 
; 239  : #ifdef __cpp_aligned_new
; 240  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 241  :         size_t _Passed_align = _Align;
; 242  : #if defined(_M_IX86) || defined(_M_X64)
; 243  :         if (_Bytes >= _Big_allocation_threshold) {
; 244  :             // boost the alignment of big allocations to help autovectorization
; 245  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 246  :         }
; 247  : #endif // defined(_M_IX86) || defined(_M_X64)
; 248  :         ::operator delete(_Ptr, _Bytes, align_val_t{_Passed_align});
; 249  :     } else
; 250  : #endif // defined(__cpp_aligned_new)
; 251  :     {
; 252  : #if defined(_M_IX86) || defined(_M_X64)
; 253  :         if (_Bytes >= _Big_allocation_threshold) {

  00025	48 81 bd e8 00
	00 00 00 10 00
	00		 cmp	 QWORD PTR _Bytes$[rbp], 4096 ; 00001000H
  00030	72 14		 jb	 SHORT $LN2@Deallocate

; 254  :             // boost the alignment of big allocations to help autovectorization
; 255  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  00032	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR _Bytes$[rbp]
  00039	48 8d 8d e0 00
	00 00		 lea	 rcx, QWORD PTR _Ptr$[rbp]
  00040	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
  00045	90		 npad	 1
$LN2@Deallocate:

; 256  :         }
; 257  : #endif // defined(_M_IX86) || defined(_M_X64)
; 258  :         ::operator delete(_Ptr, _Bytes);

  00046	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Bytes$[rbp]
  0004d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00054	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00059	90		 npad	 1

; 259  :     }
; 260  : }

  0005a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00061	5f		 pop	 rdi
  00062	5d		 pop	 rbp
  00063	c3		 ret	 0
??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\utility
;	COMDAT ??$max@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 200
tv65 = 216
_Left$ = 256
_Right$ = 264
??$max@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::max<unsigned __int64>, COMDAT

; 72   :     (max) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9D8F0974_utility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 73   :     // return larger of _Left and _Right
; 74   :     return _Left < _Right ? _Right : _Left;

  00025	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0002c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00033	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00036	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00039	73 10		 jae	 SHORT $LN3@max
  0003b	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00042	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  00049	eb 0e		 jmp	 SHORT $LN4@max
$LN3@max:
  0004b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00052	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
$LN4@max:
  00059	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  00060	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00067	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]

; 75   : }

  0006e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00075	5f		 pop	 rdi
  00076	5d		 pop	 rbp
  00077	c3		 ret	 0
??$max@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::max<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z
_TEXT	SEGMENT
_Obj$ = 224
??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z PROC	; std::_Destroy_in_place<char *>, COMDAT

; 289  : _CONSTEXPR20 void _Destroy_in_place(_Ty& _Obj) noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 290  :     if constexpr (is_array_v<_Ty>) {
; 291  :         _STD _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 292  :     } else {
; 293  :         _Obj.~_Ty();
; 294  :     }
; 295  : }

  00020	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z ENDP	; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Unfancy@D@std@@YAPEADPEAD@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Unfancy@D@std@@YAPEADPEAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 35   : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 36   :     return _Ptr;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]

; 37   : }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
??$_Unfancy@D@std@@YAPEADPEAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_size$ = 40
_New_size$ = 72
_Old_capacity$ = 104
_New_capacity$ = 136
_Al$ = 168
_New_ptr$ = 200
_Raw_new$ = 232
_Old_ptr$5 = 264
__$ArrayPad$ = 472
this$ = 512
_Size_increase$ = 520
_Fn$ = 528
<_Args_0>$ = 536
??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back'::`2'::<lambda_1>,char>, COMDAT

; 2999 :     _CONSTEXPR20 basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

$LN6:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00027	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR [rsp+568]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 d8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  00053	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00058	90		 npad	 1

; 3000 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 3001 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3002 :         auto& _My_data            = _Mypair._Myval2;

  00059	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 3003 :         const size_type _Old_size = _My_data._Mysize;

  00064	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00068	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0006c	48 89 45 28	 mov	 QWORD PTR _Old_size$[rbp], rax

; 3004 :         if (max_size() - _Old_size < _Size_increase) {

  00070	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00077	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0007c	48 2b 45 28	 sub	 rax, QWORD PTR _Old_size$[rbp]
  00080	48 3b 85 08 02
	00 00		 cmp	 rax, QWORD PTR _Size_increase$[rbp]
  00087	73 06		 jae	 SHORT $LN2@Reallocate

; 3005 :             _Xlen_string(); // result too long

  00089	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
  0008e	90		 npad	 1
$LN2@Reallocate:

; 3006 :         }
; 3007 : 
; 3008 :         const size_type _New_size     = _Old_size + _Size_increase;

  0008f	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR _Size_increase$[rbp]
  00096	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  0009a	48 03 c8	 add	 rcx, rax
  0009d	48 8b c1	 mov	 rax, rcx
  000a0	48 89 45 48	 mov	 QWORD PTR _New_size$[rbp], rax

; 3009 :         const size_type _Old_capacity = _My_data._Myres;

  000a4	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000a8	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ac	48 89 45 68	 mov	 QWORD PTR _Old_capacity$[rbp], rax

; 3010 :         size_type _New_capacity       = _Calculate_growth(_New_size);

  000b0	48 8b 55 48	 mov	 rdx, QWORD PTR _New_size$[rbp]
  000b4	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000bb	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  000c0	48 89 85 88 00
	00 00		 mov	 QWORD PTR _New_capacity$[rbp], rax

; 3011 :         auto& _Al                     = _Getal();

  000c7	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ce	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  000d3	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _Al$[rbp], rax

; 3012 :         const pointer _New_ptr        = _Allocate_for_capacity(_Al, _New_capacity); // throws

  000da	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR _New_capacity$[rbp]
  000e1	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  000e8	e8 00 00 00 00	 call	 ??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Allocate_for_capacity<0>
  000ed	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _New_ptr$[rbp], rax

; 3013 : 
; 3014 :         _My_data._Orphan_all();

  000f4	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000f8	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all
  000fd	90		 npad	 1

; 3015 :         _ASAN_STRING_REMOVE(*this);
; 3016 :         _My_data._Mysize      = _New_size;

  000fe	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00102	48 8b 4d 48	 mov	 rcx, QWORD PTR _New_size$[rbp]
  00106	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 3017 :         _My_data._Myres       = _New_capacity;

  0010a	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0010e	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  00115	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 3018 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  00119	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00120	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00125	48 89 85 e8 00
	00 00		 mov	 QWORD PTR _Raw_new$[rbp], rax

; 3019 :         if (_Old_capacity > _Small_string_capacity) {

  0012c	48 83 7d 68 0f	 cmp	 QWORD PTR _Old_capacity$[rbp], 15
  00131	76 6a		 jbe	 SHORT $LN3@Reallocate

; 3020 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00133	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00137	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0013b	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Old_ptr$5[rbp], rax

; 3021 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  00142	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Old_ptr$5[rbp]
  00149	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  0014e	0f b6 8d 18 02
	00 00		 movzx	 ecx, BYTE PTR <_Args_0>$[rbp]
  00155	88 4c 24 20	 mov	 BYTE PTR [rsp+32], cl
  00159	4c 8b 4d 28	 mov	 r9, QWORD PTR _Old_size$[rbp]
  0015d	4c 8b c0	 mov	 r8, rax
  00160	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Raw_new$[rbp]
  00167	48 8d 8d 10 02
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  0016e	e8 00 00 00 00	 call	 ??R<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@QEBA@QEADQEBD_KD@Z ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back'::`2'::<lambda_1>::operator()
  00173	90		 npad	 1

; 3022 :             _Deallocate_for_capacity(_Al, _Old_ptr, _Old_capacity);

  00174	4c 8b 45 68	 mov	 r8, QWORD PTR _Old_capacity$[rbp]
  00178	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$5[rbp]
  0017f	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00186	e8 00 00 00 00	 call	 ?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Deallocate_for_capacity
  0018b	90		 npad	 1

; 3023 :             _My_data._Bx._Ptr = _New_ptr;

  0018c	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00190	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00197	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 3024 :         } else {

  0019b	eb 46		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3025 :             _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  0019d	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  001a1	48 83 c0 08	 add	 rax, 8
  001a5	0f b6 8d 18 02
	00 00		 movzx	 ecx, BYTE PTR <_Args_0>$[rbp]
  001ac	88 4c 24 20	 mov	 BYTE PTR [rsp+32], cl
  001b0	4c 8b 4d 28	 mov	 r9, QWORD PTR _Old_size$[rbp]
  001b4	4c 8b c0	 mov	 r8, rax
  001b7	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Raw_new$[rbp]
  001be	48 8d 8d 10 02
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  001c5	e8 00 00 00 00	 call	 ??R<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@QEBA@QEADQEBD_KD@Z ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back'::`2'::<lambda_1>::operator()
  001ca	90		 npad	 1

; 3026 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  001cb	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  001cf	48 83 c0 08	 add	 rax, 8
  001d3	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR _New_ptr$[rbp]
  001da	48 8b c8	 mov	 rcx, rax
  001dd	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
  001e2	90		 npad	 1
$LN4@Reallocate:

; 3027 :         }
; 3028 : 
; 3029 :         _ASAN_STRING_CREATE(*this);
; 3030 :         return *this;

  001e3	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN5@Reallocate:

; 3031 :     }

  001ea	48 8b f8	 mov	 rdi, rax
  001ed	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  001f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z$rtcFrameData
  001f8	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001fd	48 8b c7	 mov	 rax, rdi
  00200	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00207	48 33 cd	 xor	 rcx, rbp
  0020a	e8 00 00 00 00	 call	 __security_check_cookie
  0020f	48 8d a5 e8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+488]
  00216	5f		 pop	 rdi
  00217	5d		 pop	 rbp
  00218	c3		 ret	 0
??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back'::`2'::<lambda_1>,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??R<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@QEBA@QEADQEBD_KD@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_New_ptr$ = 264
_Old_ptr$ = 272
_Old_size$ = 280
_Ch$ = 288
??R<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@QEBA@QEADQEBD_KD@Z PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back'::`2'::<lambda_1>::operator(), COMDAT

; 2290 :                 _STATIC_CALL_OPERATOR {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002e	90		 npad	 1

; 2291 :                     _Traits::copy(_New_ptr, _Old_ptr, _Old_size);

  0002f	4c 8b 85 18 01
	00 00		 mov	 r8, QWORD PTR _Old_size$[rbp]
  00036	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$[rbp]
  0003d	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00044	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy
  00049	90		 npad	 1

; 2292 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  0004a	48 8b 85 18 01
	00 00		 mov	 rax, QWORD PTR _Old_size$[rbp]
  00051	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00058	48 03 c8	 add	 rcx, rax
  0005b	48 8b c1	 mov	 rax, rcx
  0005e	48 8d 95 20 01
	00 00		 lea	 rdx, QWORD PTR _Ch$[rbp]
  00065	48 8b c8	 mov	 rcx, rax
  00068	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
  0006d	90		 npad	 1

; 2293 :                     _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  0006e	c6 85 c4 00 00
	00 00		 mov	 BYTE PTR $T1[rbp], 0
  00075	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _New_ptr$[rbp]
  0007c	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR _Old_size$[rbp]
  00083	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  00088	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0008f	48 8b c8	 mov	 rcx, rax
  00092	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
  00097	90		 npad	 1

; 2294 :                 },

  00098	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009f	5f		 pop	 rdi
  000a0	5d		 pop	 rbp
  000a1	c3		 ret	 0
??R<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@QEBA@QEADQEBD_KD@Z ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back'::`2'::<lambda_1>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z
_TEXT	SEGMENT
_My_data$ = 8
_Al$ = 40
_Alproxy$ = 72
$S10$ = 100
_Proxy$ = 136
_New_capacity$ = 184
_New_ptr$ = 216
$T7 = 436
$T8 = 468
__$ArrayPad$ = 488
this$ = 528
_Arg$ = 536
_Count$ = 544
??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT

; 852  :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR [rsp+568]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 e8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00053	90		 npad	 1

; 853  :         auto& _My_data = _Mypair._Myval2;

  00054	48 8b 85 10 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005b	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 854  :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 855  : 
; 856  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 857  :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 858  :         } else {
; 859  :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 860  :         }
; 861  : 
; 862  :         if (_Count > max_size()) {

  0005f	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0006b	48 39 85 20 02
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  00072	76 06		 jbe	 SHORT $LN2@Construct

; 863  :             _Xlen_string(); // result too long

  00074	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
  00079	90		 npad	 1
$LN2@Construct:

; 864  :         }
; 865  : 
; 866  :         auto& _Al       = _Getal();

  0007a	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00081	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00086	48 89 45 28	 mov	 QWORD PTR _Al$[rbp], rax

; 867  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);

  0008a	48 8b 55 28	 mov	 rdx, QWORD PTR _Al$[rbp]
  0008e	48 8d 4d 64	 lea	 rcx, QWORD PTR $S10$[rbp]
  00092	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  00097	48 8d 45 64	 lea	 rax, QWORD PTR $S10$[rbp]
  0009b	48 89 45 48	 mov	 QWORD PTR _Alproxy$[rbp], rax

; 868  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

  0009f	4c 8b 45 08	 mov	 r8, QWORD PTR _My_data$[rbp]
  000a3	48 8b 55 48	 mov	 rdx, QWORD PTR _Alproxy$[rbp]
  000a7	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Proxy$[rbp]
  000ae	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000b3	90		 npad	 1

; 869  : 
; 870  :         if (_Count <= _Small_string_capacity) {

  000b4	48 83 bd 20 02
	00 00 0f	 cmp	 QWORD PTR _Count$[rbp], 15
  000bc	0f 87 80 00 00
	00		 ja	 $LN3@Construct

; 871  :             _My_data._Mysize = _Count;

  000c2	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000c6	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  000cd	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 872  :             _My_data._Myres  = _Small_string_capacity;

  000d1	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000d5	48 c7 40 20 0f
	00 00 00	 mov	 QWORD PTR [rax+32], 15

; 873  : 
; 874  :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 875  :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 876  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 877  :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 878  :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count);

  000dd	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000e1	48 83 c0 08	 add	 rax, 8
  000e5	4c 8b 85 20 02
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  000ec	48 8b 95 18 02
	00 00		 mov	 rdx, QWORD PTR _Arg$[rbp]
  000f3	48 8b c8	 mov	 rcx, rax
  000f6	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy
  000fb	90		 npad	 1

; 879  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  000fc	c6 85 b4 01 00
	00 00		 mov	 BYTE PTR $T7[rbp], 0
  00103	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00107	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0010e	48 8d 44 08 08	 lea	 rax, QWORD PTR [rax+rcx+8]
  00113	48 8d 95 b4 01
	00 00		 lea	 rdx, QWORD PTR $T7[rbp]
  0011a	48 8b c8	 mov	 rcx, rax
  0011d	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
  00122	90		 npad	 1

; 880  :             } else { // _Strat == _Construct_strategy::_From_string
; 881  : #ifdef _INSERT_STRING_ANNOTATION
; 882  :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count + 1);
; 883  : #else // ^^^ _INSERT_STRING_ANNOTATION / !_INSERT_STRING_ANNOTATION vvv
; 884  :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _BUF_SIZE);
; 885  : #endif // ^^^ !_INSERT_STRING_ANNOTATION ^^^
; 886  :             }
; 887  : 
; 888  :             _Proxy._Release();

  00123	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Proxy$[rbp]
  0012a	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
  0012f	90		 npad	 1

; 889  :             return;

  00130	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Proxy$[rbp]
  00137	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0013c	90		 npad	 1
  0013d	e9 db 00 00 00	 jmp	 $LN4@Construct
$LN3@Construct:

; 890  :         }
; 891  : 
; 892  :         size_type _New_capacity = _Calculate_growth(_Count, _Small_string_capacity, max_size());

  00142	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00149	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0014e	4c 8b c0	 mov	 r8, rax
  00151	ba 0f 00 00 00	 mov	 edx, 15
  00156	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0015d	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00162	48 89 85 b8 00
	00 00		 mov	 QWORD PTR _New_capacity$[rbp], rax

; 893  :         const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws

  00169	48 8d 95 b8 00
	00 00		 lea	 rdx, QWORD PTR _New_capacity$[rbp]
  00170	48 8b 4d 28	 mov	 rcx, QWORD PTR _Al$[rbp]
  00174	e8 00 00 00 00	 call	 ??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Allocate_for_capacity<0>
  00179	48 89 85 d8 00
	00 00		 mov	 QWORD PTR _New_ptr$[rbp], rax

; 894  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00180	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00184	48 83 c0 08	 add	 rax, 8
  00188	48 8d 95 d8 00
	00 00		 lea	 rdx, QWORD PTR _New_ptr$[rbp]
  0018f	48 8b c8	 mov	 rcx, rax
  00192	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
  00197	90		 npad	 1

; 895  : 
; 896  :         _My_data._Mysize = _Count;

  00198	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0019c	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  001a3	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 897  :         _My_data._Myres  = _New_capacity;

  001a7	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  001ab	48 8b 8d b8 00
	00 00		 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  001b2	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 898  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 899  :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 900  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 901  :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 902  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);

  001b6	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  001bd	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  001c2	4c 8b 85 20 02
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  001c9	48 8b 95 18 02
	00 00		 mov	 rdx, QWORD PTR _Arg$[rbp]
  001d0	48 8b c8	 mov	 rcx, rax
  001d3	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy
  001d8	90		 npad	 1

; 903  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  001d9	c6 85 d4 01 00
	00 00		 mov	 BYTE PTR $T8[rbp], 0
  001e0	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  001e7	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  001ec	48 03 85 20 02
	00 00		 add	 rax, QWORD PTR _Count$[rbp]
  001f3	48 8d 95 d4 01
	00 00		 lea	 rdx, QWORD PTR $T8[rbp]
  001fa	48 8b c8	 mov	 rcx, rax
  001fd	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
  00202	90		 npad	 1

; 904  :         } else { // _Strat == _Construct_strategy::_From_string
; 905  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 906  :         }
; 907  : 
; 908  :         _ASAN_STRING_CREATE(*this);
; 909  :         _Proxy._Release();

  00203	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Proxy$[rbp]
  0020a	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
  0020f	90		 npad	 1

; 910  :     }

  00210	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Proxy$[rbp]
  00217	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0021c	90		 npad	 1
$LN4@Construct:
  0021d	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00221	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z$rtcFrameData
  00228	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0022d	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00234	48 33 cd	 xor	 rcx, rbp
  00237	e8 00 00 00 00	 call	 __security_check_cookie
  0023c	48 8d a5 f8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+504]
  00243	5f		 pop	 rdi
  00244	5d		 pop	 rbp
  00245	c3		 ret	 0
$LN6@Construct:
??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_My_data$ = 8
_Al$ = 40
_Alproxy$ = 72
$S10$ = 100
_Proxy$ = 136
_New_capacity$ = 184
_New_ptr$ = 216
$T7 = 436
$T8 = 468
__$ArrayPad$ = 488
this$ = 528
_Arg$ = 536
_Count$ = 544
?dtor$0@?0???$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Proxy$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT

; 1495 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN4:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00023	90		 npad	 1
  00024	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002b	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QEAA@XZ ; std::allocator<char>::allocator<char>
  00030	90		 npad	 1
  00031	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00038	48 8b c8	 mov	 rcx, rax
  0003b	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  00040	90		 npad	 1
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT

; 942  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1
  00025	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00033	5f		 pop	 rdi
  00034	5d		 pop	 rbp
  00035	c3		 ret	 0
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Convert_size@_K_K@std@@YA_K_K@Z
_TEXT	SEGMENT
_Len$ = 224
??$_Convert_size@_K_K@std@@YA_K_K@Z PROC		; std::_Convert_size<unsigned __int64,unsigned __int64>, COMDAT

; 1084 :     sizeof(_Unsigned_type) <= sizeof(_Size_type)) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1085 :     // convert _Unsigned_type to _Size_type, avoiding truncation
; 1086 :     _STL_INTERNAL_STATIC_ASSERT(_Unsigned_type(-1) > 0);
; 1087 :     _STL_INTERNAL_STATIC_ASSERT(_Size_type(-1) > 0);
; 1088 : 
; 1089 :     if constexpr (sizeof(_Unsigned_type) > sizeof(_Size_type)) {
; 1090 :         if (_Len > _STD _Max_limit<_Size_type>()) {
; 1091 :             _Xlength_error("size is too long for _Size_type");
; 1092 :         }
; 1093 :     }
; 1094 : 
; 1095 :     return static_cast<_Size_type>(_Len);

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Len$[rbp]

; 1096 : }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
??$_Convert_size@_K_K@std@@YA_K_K@Z ENDP		; std::_Convert_size<unsigned __int64,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
_New_proxy$ = 8
$T1 = 232
this$ = 288
_Al$ = 296
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT

; 1183 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 1184 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

  00025	ba 01 00 00 00	 mov	 edx, 1
  0002a	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00031	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0003e	48 89 45 08	 mov	 QWORD PTR _New_proxy$[rbp], rax

; 1185 :         _Construct_in_place(*_New_proxy, this);

  00042	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 89 85 e8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00050	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00057	48 8b 4d 08	 mov	 rcx, QWORD PTR _New_proxy$[rbp]
  0005b	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
  00060	90		 npad	 1

; 1186 :         _Myproxy            = _New_proxy;

  00061	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00068	48 8b 4d 08	 mov	 rcx, QWORD PTR _New_proxy$[rbp]
  0006c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1187 :         _New_proxy->_Mycont = this;

  0006f	48 8b 45 08	 mov	 rax, QWORD PTR _New_proxy$[rbp]
  00073	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1188 :     }

  0007d	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00084	5f		 pop	 rdi
  00085	5d		 pop	 rbp
  00086	c3		 ret	 0
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 224
_Ptr$ = 232
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 1111 : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 1112 :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1113 :     using _Ty = typename _Alloc::value_type;
; 1114 :     _Ptr->~_Ty();
; 1115 :     _STD _Deallocate_plain(_Al, _Ptr);

  00025	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0002c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00033	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
  00038	90		 npad	 1

; 1116 : }

  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 224
_Count$ = 232
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 952  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 953  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 954  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00025	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0002c	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ; std::_Get_size_of_n<16>
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits>

; 955  :     }

  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 200
tv65 = 216
_Left$ = 256
_Right$ = 264
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 95   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9D8F0974_utility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 96   :     // return smaller of _Left and _Right
; 97   :     return _Right < _Left ? _Right : _Left;

  00025	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0002c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  00033	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00036	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00039	73 10		 jae	 SHORT $LN3@min
  0003b	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00042	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  00049	eb 0e		 jmp	 SHORT $LN4@min
$LN3@min:
  0004b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00052	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
$LN4@min:
  00059	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  00060	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00067	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]

; 98   : }

  0006e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00075	5f		 pop	 rdi
  00076	5d		 pop	 rbp
  00077	c3		 ret	 0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\string
;	COMDAT ?stoi@std@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PEA_KH@Z
_TEXT	SEGMENT
_Errno_ref$ = 8
_Ptr$ = 40
_Eptr$ = 72
_Ans$ = 100
__$ArrayPad$ = 312
_Str$ = 352
_Idx$ = 360
_Base$ = 368
?stoi@std@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PEA_KH@Z PROC ; std::stoi, COMDAT

; 88   : _EXPORT_STD _NODISCARD inline int stoi(const string& _Str, size_t* _Idx = nullptr, int _Base = 10) {

$LN6:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 22 00 00 00	 mov	 ecx, 34			; 00000022H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C10BFD8D_string
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00053	90		 npad	 1

; 89   :     int& _Errno_ref  = errno; // Nonzero cost, pay it once

  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0005a	48 89 45 08	 mov	 QWORD PTR _Errno_ref$[rbp], rax

; 90   :     const char* _Ptr = _Str.c_str();

  0005e	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  00065	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0006a	48 89 45 28	 mov	 QWORD PTR _Ptr$[rbp], rax

; 91   :     char* _Eptr;
; 92   :     _Errno_ref      = 0;

  0006e	48 8b 45 08	 mov	 rax, QWORD PTR _Errno_ref$[rbp]
  00072	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 93   :     const long _Ans = _CSTD strtol(_Ptr, &_Eptr, _Base);

  00078	44 8b 85 70 01
	00 00		 mov	 r8d, DWORD PTR _Base$[rbp]
  0007f	48 8d 55 48	 lea	 rdx, QWORD PTR _Eptr$[rbp]
  00083	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtol
  0008d	89 45 64	 mov	 DWORD PTR _Ans$[rbp], eax

; 94   : 
; 95   :     if (_Ptr == _Eptr) {

  00090	48 8b 45 48	 mov	 rax, QWORD PTR _Eptr$[rbp]
  00094	48 39 45 28	 cmp	 QWORD PTR _Ptr$[rbp], rax
  00098	75 0d		 jne	 SHORT $LN2@stoi

; 96   :         _Xinvalid_argument("invalid stoi argument");

  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@HGEDEDEC@invalid?5stoi?5argument@
  000a1	e8 00 00 00 00	 call	 ?_Xinvalid_argument@std@@YAXPEBD@Z ; std::_Xinvalid_argument
  000a6	90		 npad	 1
$LN2@stoi:

; 97   :     }
; 98   : 
; 99   :     if (_Errno_ref == ERANGE) {

  000a7	48 8b 45 08	 mov	 rax, QWORD PTR _Errno_ref$[rbp]
  000ab	83 38 22	 cmp	 DWORD PTR [rax], 34	; 00000022H
  000ae	75 0d		 jne	 SHORT $LN3@stoi

; 100  :         _Xout_of_range("stoi argument out of range");

  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@MFFNMGGC@stoi?5argument?5out?5of?5range@
  000b7	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPEBD@Z ; std::_Xout_of_range
  000bc	90		 npad	 1
$LN3@stoi:

; 101  :     }
; 102  : 
; 103  :     if (_Idx) {

  000bd	48 83 bd 68 01
	00 00 00	 cmp	 QWORD PTR _Idx$[rbp], 0
  000c5	74 18		 je	 SHORT $LN4@stoi

; 104  :         *_Idx = static_cast<size_t>(_Eptr - _Ptr);

  000c7	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr$[rbp]
  000cb	48 8b 4d 48	 mov	 rcx, QWORD PTR _Eptr$[rbp]
  000cf	48 2b c8	 sub	 rcx, rax
  000d2	48 8b c1	 mov	 rax, rcx
  000d5	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _Idx$[rbp]
  000dc	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN4@stoi:

; 105  :     }
; 106  : 
; 107  :     return static_cast<int>(_Ans);

  000df	8b 45 64	 mov	 eax, DWORD PTR _Ans$[rbp]
$LN5@stoi:

; 108  : }

  000e2	48 8b f8	 mov	 rdi, rax
  000e5	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?stoi@std@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PEA_KH@Z$rtcFrameData
  000f0	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000f5	48 8b c7	 mov	 rax, rdi
  000f8	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000ff	48 33 cd	 xor	 rcx, rbp
  00102	e8 00 00 00 00	 call	 __security_check_cookie
  00107	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  0010e	5f		 pop	 rdi
  0010f	5d		 pop	 rbp
  00110	c3		 ret	 0
?stoi@std@@YAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PEA_KH@Z ENDP ; std::stoi
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\utility
;	COMDAT ??$_Max_limit@_J@std@@YA_JXZ
_TEXT	SEGMENT
_Unsigned_max$1 = 8
??$_Max_limit@_J@std@@YA_JXZ PROC			; std::_Max_limit<__int64>, COMDAT

; 849  : _NODISCARD constexpr _Ty _Max_limit() noexcept { // same as (numeric_limits<_Ty>::max)(), less throughput cost

$LN4:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9D8F0974_utility
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	90		 npad	 1

; 850  :     _STL_INTERNAL_STATIC_ASSERT(is_integral_v<_Ty>); // doesn't attempt to handle all types
; 851  :     if constexpr (is_signed_v<_Ty>) {
; 852  :         constexpr auto _Unsigned_max = static_cast<make_unsigned_t<_Ty>>(-1);

  0001c	48 c7 45 08 ff
	ff ff ff	 mov	 QWORD PTR _Unsigned_max$1[rbp], -1

; 853  :         return static_cast<_Ty>(_Unsigned_max >> 1);

  00024	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH

; 854  :     } else {
; 855  :         return static_cast<_Ty>(-1);
; 856  :     }
; 857  : }

  0002e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
??$_Max_limit@_J@std@@YA_JXZ ENDP			; std::_Max_limit<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
_TEXT	SEGMENT
_Lock$6 = 4
_Psave$7 = 40
_Id$8 = 72
_Pf$9 = 104
_Pfmod$10 = 136
_Psave_guard$11 = 168
$T12 = 392
__$ArrayPad$ = 408
_Loc$ = 448
??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 420  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+488]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 98 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5CF7981A_xlocale
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00049	90		 npad	 1

; 421  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  0004a	33 d2		 xor	 edx, edx
  0004c	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$6[rbp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  00056	90		 npad	 1

; 422  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  00057	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::ctype<char> >::_Psave
  0005e	48 89 45 28	 mov	 QWORD PTR _Psave$7[rbp], rax

; 423  : 
; 424  :     const size_t _Id         = _Facet::id;

  00062	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?id@?$ctype@D@std@@2V0locale@2@A
  00069	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??Bid@locale@std@@QEAA_KXZ
  0006f	48 89 45 48	 mov	 QWORD PTR _Id$8[rbp], rax

; 425  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);

  00073	48 8b 55 48	 mov	 rdx, QWORD PTR _Id$8[rbp]
  00077	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR _Loc$[rbp]
  0007e	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z ; std::locale::_Getfacet
  00083	48 89 45 68	 mov	 QWORD PTR _Pf$9[rbp], rax

; 426  : 
; 427  :     if (!_Pf) {

  00087	48 83 7d 68 00	 cmp	 QWORD PTR _Pf$9[rbp], 0
  0008c	0f 85 b2 00 00
	00		 jne	 $LN2@use_facet

; 428  :         if (_Psave) {

  00092	48 83 7d 28 00	 cmp	 QWORD PTR _Psave$7[rbp], 0
  00097	74 0d		 je	 SHORT $LN3@use_facet

; 429  :             _Pf = _Psave; // lazy facet already allocated

  00099	48 8b 45 28	 mov	 rax, QWORD PTR _Psave$7[rbp]
  0009d	48 89 45 68	 mov	 QWORD PTR _Pf$9[rbp], rax
  000a1	e9 9e 00 00 00	 jmp	 $LN2@use_facet
$LN3@use_facet:

; 430  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  000a6	48 8b 95 c0 01
	00 00		 mov	 rdx, QWORD PTR _Loc$[rbp]
  000ad	48 8d 4d 28	 lea	 rcx, QWORD PTR _Psave$7[rbp]
  000b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
  000b7	48 83 f8 ff	 cmp	 rax, -1
  000bb	75 08		 jne	 SHORT $LN5@use_facet

; 431  : #if _HAS_EXCEPTIONS
; 432  :             _Throw_bad_cast(); // lazy disallowed

  000bd	e8 00 00 00 00	 call	 ?_Throw_bad_cast@std@@YAXXZ ; std::_Throw_bad_cast
  000c2	90		 npad	 1

; 433  : #else
; 434  :             _CSTD abort(); // lazy disallowed
; 435  : #endif
; 436  :         } else { // queue up lazy facet for destruction

  000c3	eb 7f		 jmp	 SHORT $LN2@use_facet
$LN5@use_facet:

; 437  :             auto _Pfmod = const_cast<locale::facet*>(_Psave);

  000c5	48 8b 45 28	 mov	 rax, QWORD PTR _Psave$7[rbp]
  000c9	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Pfmod$10[rbp], rax

; 438  :             unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base*>(_Pfmod));

  000d0	ba 08 00 00 00	 mov	 edx, 8
  000d5	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR _Psave_guard$11[rbp]
  000dc	e8 00 00 00 00	 call	 ?__autoclassinit2@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAX_K@Z
  000e1	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR _Pfmod$10[rbp]
  000e8	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR _Psave_guard$11[rbp]
  000ef	e8 00 00 00 00	 call	 ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
  000f4	90		 npad	 1

; 439  : 
; 440  : #if defined(_M_CEE)
; 441  :             _Facet_Register_m(_Pfmod);
; 442  : #else // ^^^ defined(_M_CEE) / !defined(_M_CEE) vvv
; 443  :             _Facet_Register(_Pfmod);

  000f5	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _Pfmod$10[rbp]
  000fc	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z ; std::_Facet_Register
  00101	90		 npad	 1

; 444  : #endif // ^^^ !defined(_M_CEE) ^^^
; 445  : 
; 446  :             _Pfmod->_Incref();

  00102	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR _Pfmod$10[rbp]
  00109	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0010c	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _Pfmod$10[rbp]
  00113	ff 50 08	 call	 QWORD PTR [rax+8]
  00116	90		 npad	 1

; 447  :             _Facetptr<_Facet>::_Psave = _Psave;

  00117	48 8b 45 28	 mov	 rax, QWORD PTR _Psave$7[rbp]
  0011b	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB, rax ; std::_Facetptr<std::ctype<char> >::_Psave

; 448  :             _Pf                       = _Psave;

  00122	48 8b 45 28	 mov	 rax, QWORD PTR _Psave$7[rbp]
  00126	48 89 45 68	 mov	 QWORD PTR _Pf$9[rbp], rax

; 449  : 
; 450  :             (void) _Psave_guard.release();

  0012a	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR _Psave_guard$11[rbp]
  00131	e8 00 00 00 00	 call	 ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
  00136	90		 npad	 1

; 451  :         }

  00137	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR _Psave_guard$11[rbp]
  0013e	e8 00 00 00 00	 call	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  00143	90		 npad	 1
$LN2@use_facet:

; 452  :     }
; 453  : 
; 454  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  00144	48 8b 45 68	 mov	 rax, QWORD PTR _Pf$9[rbp]
  00148	48 89 85 88 01
	00 00		 mov	 QWORD PTR $T12[rbp], rax
  0014f	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$6[rbp]
  00153	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  00159	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR $T12[rbp]

; 455  :     _END_LOCK()
; 456  : } // end of use_facet body

  00160	48 8b f8	 mov	 rdi, rax
  00163	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00167	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z$rtcFrameData
  0016e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00173	48 8b c7	 mov	 rax, rdi
  00176	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0017d	48 33 cd	 xor	 rcx, rbp
  00180	e8 00 00 00 00	 call	 __security_check_cookie
  00185	48 8d a5 a8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+424]
  0018c	5f		 pop	 rdi
  0018d	5d		 pop	 rbp
  0018e	c3		 ret	 0
$LN10@use_facet:
??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Lock$6 = 4
_Psave$7 = 40
_Id$8 = 72
_Pf$9 = 104
_Pfmod$10 = 136
_Psave_guard$11 = 168
$T12 = 392
__$ArrayPad$ = 408
_Loc$ = 448
?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA PROC ; `std::use_facet<std::ctype<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$6[rbp]
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	5f		 pop	 rdi
  00023	5d		 pop	 rbp
  00024	c3		 ret	 0
?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA ENDP ; `std::use_facet<std::ctype<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Lock$6 = 4
_Psave$7 = 40
_Id$8 = 72
_Pf$9 = 104
_Pfmod$10 = 136
_Psave_guard$11 = 168
$T12 = 392
__$ArrayPad$ = 408
_Loc$ = 448
?dtor$1@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA PROC ; `std::use_facet<std::ctype<char> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR _Psave_guard$11[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$1@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA ENDP ; `std::use_facet<std::ctype<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xlocale
;	COMDAT ?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z
_TEXT	SEGMENT
_Facptr$ = 8
_Ptr0$ = 40
tv71 = 248
this$ = 288
_Id$ = 296
?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z PROC	; std::locale::_Getfacet, COMDAT

; 362  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5CF7981A_xlocale
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 363  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  00025	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00030	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00034	48 39 85 28 01
	00 00		 cmp	 QWORD PTR _Id$[rbp], rax
  0003b	73 23		 jae	 SHORT $LN6@Getfacet
  0003d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00048	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0004c	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Id$[rbp]
  00053	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00057	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv71[rbp], rax
  0005e	eb 0b		 jmp	 SHORT $LN7@Getfacet
$LN6@Getfacet:
  00060	48 c7 85 f8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv71[rbp], 0
$LN7@Getfacet:
  0006b	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR tv71[rbp]
  00072	48 89 45 08	 mov	 QWORD PTR _Facptr$[rbp], rax

; 364  :         if (_Facptr || !_Ptr->_Xparent) {

  00076	48 83 7d 08 00	 cmp	 QWORD PTR _Facptr$[rbp], 0
  0007b	75 13		 jne	 SHORT $LN3@Getfacet
  0007d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00084	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00088	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  0008c	85 c0		 test	 eax, eax
  0008e	75 06		 jne	 SHORT $LN2@Getfacet
$LN3@Getfacet:

; 365  :             return _Facptr; // found facet or not transparent

  00090	48 8b 45 08	 mov	 rax, QWORD PTR _Facptr$[rbp]
  00094	eb 31		 jmp	 SHORT $LN1@Getfacet
$LN2@Getfacet:

; 366  :         }
; 367  : 
; 368  :         // look in current locale
; 369  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  00096	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPEAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0009b	48 89 45 28	 mov	 QWORD PTR _Ptr0$[rbp], rax

; 370  :         if (_Id < _Ptr0->_Facetcount) {

  0009f	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr0$[rbp]
  000a3	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  000a7	48 39 85 28 01
	00 00		 cmp	 QWORD PTR _Id$[rbp], rax
  000ae	73 15		 jae	 SHORT $LN4@Getfacet

; 371  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  000b0	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr0$[rbp]
  000b4	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b8	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Id$[rbp]
  000bf	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  000c3	eb 02		 jmp	 SHORT $LN1@Getfacet
$LN4@Getfacet:

; 372  :         }
; 373  : 
; 374  :         return nullptr; // no entry in current locale

  000c5	33 c0		 xor	 eax, eax
$LN1@Getfacet:

; 375  :     }

  000c7	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000ce	5f		 pop	 rdi
  000cf	5d		 pop	 rbp
  000d0	c3		 ret	 0
?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z ENDP	; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xlocale
;	COMDAT ??1locale@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
tv84 = 216
this$ = 256
??1locale@std@@QEAA@XZ PROC				; std::locale::~locale, COMDAT

; 339  :     ~locale() noexcept {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5CF7981A_xlocale
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 340  :         if (_Ptr) {

  00020	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0002c	74 59		 je	 SHORT $LN2@locale

; 341  :             delete _Ptr->_Decref();

  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00039	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00040	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00044	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00047	ff 50 10	 call	 QWORD PTR [rax+16]
  0004a	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00051	48 83 bd c8 00
	00 00 00	 cmp	 QWORD PTR $T1[rbp], 0
  00059	74 21		 je	 SHORT $LN4@locale
  0005b	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]
  00062	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00065	ba 01 00 00 00	 mov	 edx, 1
  0006a	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR $T1[rbp]
  00071	ff 10		 call	 QWORD PTR [rax]
  00073	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv84[rbp], rax
  0007a	eb 0b		 jmp	 SHORT $LN2@locale
$LN4@locale:
  0007c	48 c7 85 d8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv84[rbp], 0
$LN2@locale:

; 342  :         }
; 343  :     }

  00087	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008e	5f		 pop	 rdi
  0008f	5d		 pop	 rbp
  00090	c3		 ret	 0
??1locale@std@@QEAA@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\typeinfo
;	COMDAT ?_Throw_bad_cast@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 200
?_Throw_bad_cast@std@@YAXXZ PROC			; std::_Throw_bad_cast, COMDAT

; 62   : [[noreturn]] inline void _Throw_bad_cast() {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D2A73EA1_typeinfo
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	90		 npad	 1

; 63   :     _THROW(bad_cast{});

  0001c	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00023	e8 00 00 00 00	 call	 ??0bad_cast@std@@QEAA@XZ ; std::bad_cast::bad_cast
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVbad_cast@std@@
  0002f	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00036	e8 00 00 00 00	 call	 _CxxThrowException
  0003b	90		 npad	 1
$LN2@Throw_bad_:

; 64   : }

  0003c	48 8d a5 f8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+248]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?_Throw_bad_cast@std@@YAXXZ ENDP			; std::_Throw_bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_cast@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gbad_cast@std@@UEAAPEAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1bad_cast@std@@UEAA@XZ
  00023	90		 npad	 1
  00024	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  0002a	83 e0 01	 and	 eax, 1
  0002d	85 c0		 test	 eax, eax
  0002f	74 12		 je	 SHORT $LN2@scalar
  00031	ba 18 00 00 00	 mov	 edx, 24
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00042	90		 npad	 1
$LN2@scalar:
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
??_Gbad_cast@std@@UEAAPEAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_cast@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??0bad_cast@std@@QEAA@AEBV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR __that$[rbp]
  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@AEBV01@@Z ; std::exception::exception
  0002b	90		 npad	 1
  0002c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_cast@std@@6B@
  0003a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
??0bad_cast@std@@QEAA@AEBV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_cast@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1bad_cast@std@@UEAA@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001f	90		 npad	 1
  00020	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
??1bad_cast@std@@UEAA@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\vcruntime_typeinfo.h
;	COMDAT ??0bad_cast@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0bad_cast@std@@QEAA@XZ PROC				; std::bad_cast::bad_cast, COMDAT

; 153  :     {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__27E09C99_vcruntime_typeinfo@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 152  :         : exception("bad cast", 1)

  00020	41 b8 01 00 00
	00		 mov	 r8d, 1
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08EPJLHIJG@bad?5cast@
  0002d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00034	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBDH@Z ; std::exception::exception
  00039	90		 npad	 1

; 153  :     {

  0003a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_cast@std@@6B@
  00048	48 89 08	 mov	 QWORD PTR [rax], rcx

; 154  :     }

  0004b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00052	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00059	5f		 pop	 rdi
  0005a	5d		 pop	 rbp
  0005b	c3		 ret	 0
??0bad_cast@std@@QEAA@XZ ENDP				; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
  00022	90		 npad	 1
  00023	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002a	5f		 pop	 rdi
  0002b	5d		 pop	 rbp
  0002c	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 1506 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1507 :         return *this;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 1508 :     }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 1502 :     constexpr _Ty1& _Get_first() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1503 :         return *this;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 1504 :     }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT

; 3085 :     _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 3086 :         return _Mypair._Get_first();

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8b c8	 mov	 rcx, rax
  0002a	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 3087 :     }

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT

; 3081 :     _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 3082 :         return _Mypair._Get_first();

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8b c8	 mov	 rcx, rax
  0002a	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 3083 :     }

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
_TEXT	SEGMENT
_My_data$ = 8
_Al$1 = 40
$T2 = 260
this$ = 320
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT

; 3055 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 3056 :         auto& _My_data = _Mypair._Myval2;

  00020	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 3057 :         _My_data._Orphan_all();

  0002b	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0002f	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all
  00034	90		 npad	 1

; 3058 :         if (_My_data._Large_mode_engaged()) {

  00035	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00039	e8 00 00 00 00	 call	 ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged
  0003e	0f b6 c0	 movzx	 eax, al
  00041	85 c0		 test	 eax, eax
  00043	74 3b		 je	 SHORT $LN2@Tidy_deall

; 3059 :             _ASAN_STRING_REMOVE(*this);
; 3060 :             auto& _Al = _Getal();

  00045	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004c	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00051	48 89 45 28	 mov	 QWORD PTR _Al$1[rbp], rax

; 3061 :             _Deallocate_for_capacity(_Al, _My_data._Bx._Ptr, _My_data._Myres);

  00055	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00059	4c 8b 40 20	 mov	 r8, QWORD PTR [rax+32]
  0005d	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00061	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00065	48 8b 4d 28	 mov	 rcx, QWORD PTR _Al$1[rbp]
  00069	e8 00 00 00 00	 call	 ?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Deallocate_for_capacity
  0006e	90		 npad	 1

; 3062 :             _My_data._Bx._Switch_to_buf();

  0006f	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00073	48 83 c0 08	 add	 rax, 8
  00077	48 8b c8	 mov	 rcx, rax
  0007a	e8 00 00 00 00	 call	 ?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Switch_to_buf
  0007f	90		 npad	 1
$LN2@Tidy_deall:

; 3063 :         }
; 3064 : 
; 3065 :         _My_data._Mysize = 0;

  00080	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00084	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 3066 :         _My_data._Myres  = _Small_string_capacity;

  0008c	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00090	48 c7 40 20 0f
	00 00 00	 mov	 QWORD PTR [rax+32], 15

; 3067 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3068 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00098	c6 85 04 01 00
	00 00		 mov	 BYTE PTR $T2[rbp], 0
  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	48 6b c0 00	 imul	 rax, rax, 0
  000a8	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000ac	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  000b1	48 8d 95 04 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  000b8	48 8b c8	 mov	 rcx, rax
  000bb	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
  000c0	90		 npad	 1

; 3069 :     }

  000c1	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000c8	5f		 pop	 rdi
  000c9	5d		 pop	 rbp
  000ca	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_New_size$ = 264
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT

; 3049 :     _CONSTEXPR20 void _Eos(const size_type _New_size) noexcept { // set new length and null terminator

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 3050 :         _ASAN_STRING_MODIFY(*this, _Mypair._Myval2._Mysize, _New_size);
; 3051 :         _Mypair._Myval2._Mysize = _New_size;

  00025	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_size$[rbp]
  00033	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 3052 :         _Traits::assign(_Mypair._Myval2._Myptr()[_New_size], _Elem());

  00037	c6 85 c4 00 00
	00 00		 mov	 BYTE PTR $T1[rbp], 0
  0003e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00045	48 8b c8	 mov	 rcx, rax
  00048	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0004d	48 03 85 08 01
	00 00		 add	 rax, QWORD PTR _New_size$[rbp]
  00054	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0005b	48 8b c8	 mov	 rcx, rax
  0005e	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
  00063	90		 npad	 1

; 3053 :     }

  00064	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006b	5f		 pop	 rdi
  0006c	5d		 pop	 rbp
  0006d	c3		 ret	 0
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
this$ = 224
_Requested$ = 232
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 2965 :     _NODISCARD _CONSTEXPR20 size_type _Calculate_growth(const size_type _Requested) const noexcept {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 2966 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00025	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00031	4c 8b c0	 mov	 r8, rax
  00034	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003b	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  0003f	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Requested$[rbp]
  00046	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth

; 2967 :     }

  0004b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z
_TEXT	SEGMENT
_Masked$ = 8
$T4 = 232
__$ArrayPad$ = 248
_Requested$ = 288
_Old$ = 296
_Max$ = 304
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 2952 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 12 00 00 00	 mov	 ecx, 18
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 f8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00053	90		 npad	 1

; 2953 :         const size_type _Masked = _Requested | _Alloc_mask;

  00054	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR _Requested$[rbp]
  0005b	48 83 c8 0f	 or	 rax, 15
  0005f	48 89 45 08	 mov	 QWORD PTR _Masked$[rbp], rax

; 2954 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00063	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Max$[rbp]
  0006a	48 39 45 08	 cmp	 QWORD PTR _Masked$[rbp], rax
  0006e	76 09		 jbe	 SHORT $LN2@Calculate_

; 2955 :             return _Max;

  00070	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Max$[rbp]
  00077	eb 68		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 2956 :         }
; 2957 : 
; 2958 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00079	33 d2		 xor	 edx, edx
  0007b	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Old$[rbp]
  00082	b9 02 00 00 00	 mov	 ecx, 2
  00087	48 f7 f1	 div	 rcx
  0008a	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR _Max$[rbp]
  00091	48 2b c8	 sub	 rcx, rax
  00094	48 8b c1	 mov	 rax, rcx
  00097	48 39 85 28 01
	00 00		 cmp	 QWORD PTR _Old$[rbp], rax
  0009e	76 09		 jbe	 SHORT $LN3@Calculate_

; 2959 :             return _Max;

  000a0	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Max$[rbp]
  000a7	eb 38		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 2960 :         }
; 2961 : 
; 2962 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a9	33 d2		 xor	 edx, edx
  000ab	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Old$[rbp]
  000b2	b9 02 00 00 00	 mov	 ecx, 2
  000b7	48 f7 f1	 div	 rcx
  000ba	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Old$[rbp]
  000c1	48 03 c8	 add	 rcx, rax
  000c4	48 8b c1	 mov	 rax, rcx
  000c7	48 89 85 e8 00
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  000ce	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  000d5	48 8d 4d 08	 lea	 rcx, QWORD PTR _Masked$[rbp]
  000d9	e8 00 00 00 00	 call	 ??$max@_K@std@@YAAEB_KAEB_K0@Z ; std::max<unsigned __int64>
  000de	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN1@Calculate_:

; 2963 :     }

  000e1	48 8b f8	 mov	 rdi, rax
  000e4	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcFrameData
  000ef	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000f4	48 8b c7	 mov	 rax, rdi
  000f7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000fe	48 33 cd	 xor	 rcx, rbp
  00101	e8 00 00 00 00	 call	 __security_check_cookie
  00106	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0010d	5f		 pop	 rdi
  0010e	5d		 pop	 rbp
  0010f	c3		 ret	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
this$ = 288
__$ReturnUdt$ = 296
_Off$ = 304
_Count$ = 312
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr, COMDAT

; 2809 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	c7 85 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T2[rbp], 0
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  00033	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00038	90		 npad	 1

; 2810 :         // return [_Off, _Off + _Count) as new string, default-constructing its allocator
; 2811 :         return basic_string{*this, _Off, _Count};

  00039	48 8d 8d c4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00040	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QEAA@XZ ; std::allocator<char>::allocator<char>
  00045	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004a	4c 8b 8d 38 01
	00 00		 mov	 r9, QWORD PTR _Count$[rbp]
  00051	4c 8b 85 30 01
	00 00		 mov	 r8, QWORD PTR _Off$[rbp]
  00058	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0005f	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00066	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0006b	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR $T2[rbp]
  00071	83 c8 01	 or	 eax, 1
  00074	89 85 e4 00 00
	00		 mov	 DWORD PTR $T2[rbp], eax
  0007a	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 2812 :     }

  00081	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00088	5f		 pop	 rdi
  00089	5d		 pop	 rbp
  0008a	c3		 ret	 0
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
_Alloc_max$ = 8
_Storage_max$ = 40
$T4 = 264
$T5 = 296
$T6 = 328
__$ArrayPad$ = 344
this$ = 384
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT

; 2360 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00018	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 58 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00049	90		 npad	 1

; 2361 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

  0004a	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00051	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00056	48 8b c8	 mov	 rcx, rax
  00059	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
  0005e	48 89 45 08	 mov	 QWORD PTR _Alloc_max$[rbp], rax

; 2362 :         const size_type _Storage_max = // can always store small string

  00062	48 c7 85 08 01
	00 00 10 00 00
	00		 mov	 QWORD PTR $T4[rbp], 16
  0006d	48 8d 95 08 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00074	48 8d 4d 08	 lea	 rcx, QWORD PTR _Alloc_max$[rbp]
  00078	e8 00 00 00 00	 call	 ??$max@_K@std@@YAAEB_KAEB_K0@Z ; std::max<unsigned __int64>
  0007d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00080	48 89 45 28	 mov	 QWORD PTR _Storage_max$[rbp], rax

; 2363 :             (_STD max)(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 2364 :         return (_STD min)(static_cast<size_type>(_STD _Max_limit<difference_type>()),

  00084	48 8b 45 28	 mov	 rax, QWORD PTR _Storage_max$[rbp]
  00088	48 ff c8	 dec	 rax
  0008b	48 89 85 28 01
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  00092	e8 00 00 00 00	 call	 ??$_Max_limit@_J@std@@YA_JXZ ; std::_Max_limit<__int64>
  00097	48 89 85 48 01
	00 00		 mov	 QWORD PTR $T6[rbp], rax
  0009e	48 8d 95 28 01
	00 00		 lea	 rdx, QWORD PTR $T5[rbp]
  000a5	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  000ac	e8 00 00 00 00	 call	 ??$min@_K@std@@YAAEB_KAEB_K0@Z ; std::min<unsigned __int64>
  000b1	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 2365 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 2366 :         );
; 2367 :     }

  000b4	48 8b f8	 mov	 rdi, rax
  000b7	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcFrameData
  000c2	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c7	48 8b c7	 mov	 rax, rdi
  000ca	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000d1	48 33 cd	 xor	 rcx, rbp
  000d4	e8 00 00 00 00	 call	 __security_check_cookie
  000d9	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  000e0	5f		 pop	 rdi
  000e1	5d		 pop	 rbp
  000e2	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 224
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT

; 2356 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 2357 :         return _Mypair._Myval2._Mysize;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]

; 2358 :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 224
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length, COMDAT

; 2352 :     _NODISCARD _CONSTEXPR20 size_type length() const noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 2353 :         return _Mypair._Myval2._Mysize;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]

; 2354 :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 224
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT

; 2342 :     _NODISCARD _CONSTEXPR20 _Ret_z_ const _Elem* data() const noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 2343 :         return _Mypair._Myval2._Myptr();

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8b c8	 mov	 rcx, rax
  0002a	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 2344 :     }

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 224
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT

; 2338 :     _NODISCARD _CONSTEXPR20 _Ret_z_ const _Elem* c_str() const noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 2339 :         return _Mypair._Myval2._Myptr();

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8b c8	 mov	 rcx, rax
  0002a	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 2340 :     }

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z
_TEXT	SEGMENT
_Old_size$ = 8
_Ptr$1 = 40
$T2 = 260
$T3 = 292
this$ = 352
_Ch$ = 360
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back, COMDAT

; 2276 :     _CONSTEXPR20 void push_back(const _Elem _Ch) { // insert element at end

$LN4:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00023	90		 npad	 1

; 2277 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  00024	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0002f	48 89 45 08	 mov	 QWORD PTR _Old_size$[rbp], rax

; 2278 :         if (_Old_size < _Mypair._Myval2._Myres) {

  00033	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003e	48 39 45 08	 cmp	 QWORD PTR _Old_size$[rbp], rax
  00042	73 69		 jae	 SHORT $LN2@push_back

; 2279 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + 1);
; 2280 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  00044	48 8b 45 08	 mov	 rax, QWORD PTR _Old_size$[rbp]
  00048	48 ff c0	 inc	 rax
  0004b	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00052	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 2281 :             _Elem* const _Ptr       = _Mypair._Myval2._Myptr();

  00056	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005d	48 8b c8	 mov	 rcx, rax
  00060	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00065	48 89 45 28	 mov	 QWORD PTR _Ptr$1[rbp], rax

; 2282 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  00069	48 8b 45 08	 mov	 rax, QWORD PTR _Old_size$[rbp]
  0006d	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr$1[rbp]
  00071	48 03 c8	 add	 rcx, rax
  00074	48 8b c1	 mov	 rax, rcx
  00077	48 8d 95 68 01
	00 00		 lea	 rdx, QWORD PTR _Ch$[rbp]
  0007e	48 8b c8	 mov	 rcx, rax
  00081	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
  00086	90		 npad	 1

; 2283 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  00087	c6 85 04 01 00
	00 00		 mov	 BYTE PTR $T2[rbp], 0
  0008e	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr$1[rbp]
  00092	48 8b 4d 08	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  00096	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  0009b	48 8d 95 04 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  000a2	48 8b c8	 mov	 rcx, rax
  000a5	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
  000aa	90		 npad	 1

; 2284 :             return;

  000ab	eb 35		 jmp	 SHORT $LN1@push_back
$LN2@push_back:

; 2285 :         }
; 2286 : 
; 2287 :         _Reallocate_grow_by(

  000ad	48 8d 85 24 01
	00 00		 lea	 rax, QWORD PTR $T3[rbp]
  000b4	48 8b f8	 mov	 rdi, rax
  000b7	33 c0		 xor	 eax, eax
  000b9	b9 01 00 00 00	 mov	 ecx, 1
  000be	f3 aa		 rep stosb
  000c0	44 0f b6 8d 68
	01 00 00	 movzx	 r9d, BYTE PTR _Ch$[rbp]
  000c8	44 0f b6 85 24
	01 00 00	 movzx	 r8d, BYTE PTR $T3[rbp]
  000d0	ba 01 00 00 00	 mov	 edx, 1
  000d5	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000dc	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back'::`2'::<lambda_1>,char>
  000e1	90		 npad	 1
$LN1@push_back:

; 2288 :             1,
; 2289 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const _Elem _Ch)
; 2290 :                 _STATIC_CALL_OPERATOR {
; 2291 :                     _Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 2292 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);
; 2293 :                     _Traits::assign(_New_ptr[_Old_size + 1], _Elem());
; 2294 :                 },
; 2295 :             _Ch);
; 2296 :     }

  000e2	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  000e9	5f		 pop	 rdi
  000ea	5d		 pop	 rbp
  000eb	c3		 ret	 0
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z
_TEXT	SEGMENT
this$ = 224
_Off$ = 232
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT

; 1856 :     _CONSTEXPR20 basic_string& erase(const size_type _Off = 0) { // erase elements [_Off, ...)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 1857 :         _Mypair._Myval2._Check_offset(_Off);

  00025	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002c	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  00033	48 8b c8	 mov	 rcx, rax
  00036	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset
  0003b	90		 npad	 1

; 1858 :         _Eos(_Off);

  0003c	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  00043	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004a	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
  0004f	90		 npad	 1

; 1859 :         return *this;

  00050	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 1860 :     }

  00057	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005e	5f		 pop	 rdi
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 8
$S4$ = 36
_To_delete$ = 72
__$ArrayPad$ = 280
this$ = 320
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 1369 :     _CONSTEXPR20 ~basic_string() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00018	b9 1a 00 00 00	 mov	 ecx, 26
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 18 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00049	90		 npad	 1

; 1370 :         _Tidy_deallocate();

  0004a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00051	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
  00056	90		 npad	 1

; 1371 : #if _ITERATOR_DEBUG_LEVEL != 0
; 1372 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00057	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005e	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00063	48 8b d0	 mov	 rdx, rax
  00066	48 8d 4d 24	 lea	 rcx, QWORD PTR $S4$[rbp]
  0006a	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0006f	48 8d 45 24	 lea	 rax, QWORD PTR $S4$[rbp]
  00073	48 89 45 08	 mov	 QWORD PTR _Alproxy$[rbp], rax

; 1373 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;

  00077	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00081	48 89 45 48	 mov	 QWORD PTR _To_delete$[rbp], rax

; 1374 :         _Mypair._Myval2._Myproxy = nullptr;

  00085	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1375 :         _Delete_plain_internal(_Alproxy, _To_delete);

  00093	48 8b 55 48	 mov	 rdx, QWORD PTR _To_delete$[rbp]
  00097	48 8b 4d 08	 mov	 rcx, QWORD PTR _Alproxy$[rbp]
  0009b	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  000a0	90		 npad	 1

; 1376 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 1377 :     }

  000a1	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a8	48 8b c8	 mov	 rcx, rax
  000ab	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  000b0	90		 npad	 1
  000b1	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcFrameData
  000bc	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c1	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000c8	48 33 cd	 xor	 rcx, rbp
  000cb	e8 00 00 00 00	 call	 __security_check_cookie
  000d0	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000d7	5f		 pop	 rdi
  000d8	5d		 pop	 rbp
  000d9	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
_TEXT	SEGMENT
_My_data$ = 8
$T1 = 228
$T2 = 260
this$ = 320
?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_empty, COMDAT

; 836  :     _CONSTEXPR20 void _Construct_empty() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 837  :         auto& _My_data = _Mypair._Myval2;

  00020	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 838  :         _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  0002b	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00032	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00037	48 8b d0	 mov	 rdx, rax
  0003a	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00041	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  00046	48 8b d0	 mov	 rdx, rax
  00049	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0004d	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
  00052	90		 npad	 1

; 839  : 
; 840  :         // initialize basic_string data members
; 841  :         _My_data._Mysize = 0;

  00053	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00057	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 842  :         _My_data._Myres  = _Small_string_capacity;

  0005f	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00063	48 c7 40 20 0f
	00 00 00	 mov	 QWORD PTR [rax+32], 15

; 843  :         _My_data._Activate_SSO_buffer();

  0006b	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0006f	e8 00 00 00 00	 call	 ?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer
  00074	90		 npad	 1

; 844  : 
; 845  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 846  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00075	c6 85 04 01 00
	00 00		 mov	 BYTE PTR $T2[rbp], 0
  0007c	b8 01 00 00 00	 mov	 eax, 1
  00081	48 6b c0 00	 imul	 rax, rax, 0
  00085	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00089	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  0008e	48 8d 95 04 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  00095	48 8b c8	 mov	 rcx, rax
  00098	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
  0009d	90		 npad	 1

; 847  :     }

  0009e	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000a5	5f		 pop	 rdi
  000a6	5d		 pop	 rbp
  000a7	c3		 ret	 0
?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z
_TEXT	SEGMENT
_Al$ = 224
_Old_ptr$ = 232
_Capacity$ = 240
?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Deallocate_for_capacity, COMDAT

; 831  :         _Alty& _Al, const pointer _Old_ptr, const size_type _Capacity) noexcept {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	90		 npad	 1

; 832  :         _STL_INTERNAL_CHECK(_Capacity > _Small_string_capacity);
; 833  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0002a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Capacity$[rbp]
  00031	48 ff c0	 inc	 rax
  00034	4c 8b c0	 mov	 r8, rax
  00037	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$[rbp]
  0003e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00045	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
  0004a	90		 npad	 1

; 834  :     }

  0004b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Deallocate_for_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_Ptr$ = 264
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 749  :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1
  00025	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002c	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  00033	48 8b c8	 mov	 rcx, rax
  00036	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
  0003b	90		 npad	 1

; 750  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0003c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00043	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
  00048	48 8b c8	 mov	 rcx, rax
  0004b	e8 00 00 00 00	 call	 ??$_Convert_size@_K_K@std@@YA_K_K@Z ; std::_Convert_size<unsigned __int64,unsigned __int64>
  00050	4c 8b c0	 mov	 r8, rax
  00053	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0005a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00061	e8 00 00 00 00	 call	 ??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
  00066	90		 npad	 1

; 751  :     }

  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00075	5f		 pop	 rdi
  00076	5d		 pop	 rbp
  00077	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
this$ = 256
_Ptr$ = 264
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z
_TEXT	SEGMENT
$T1 = 196
tv79 = 216
this$ = 256
_Right$ = 264
_Roff$ = 272
_Count$ = 280
_Al$ = 288
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 716  :         : _Mypair(_One_then_variadic_args_t{}, _Al) { // construct from _Right [_Roff, _Roff + _Count)

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002e	90		 npad	 1
  0002f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	4c 8b 85 20 01
	00 00		 mov	 r8, QWORD PTR _Al$[rbp]
  0003d	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  00044	48 8b c8	 mov	 rcx, rax
  00047	e8 00 00 00 00	 call	 ??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
  0004c	90		 npad	 1

; 717  :         _Right._Mypair._Myval2._Check_offset(_Roff);

  0004d	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00054	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR _Roff$[rbp]
  0005b	48 8b c8	 mov	 rcx, rax
  0005e	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset
  00063	90		 npad	 1

; 718  :         _Construct<_Construct_strategy::_From_ptr>(

  00064	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0006b	4c 8b 85 18 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00072	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR _Roff$[rbp]
  00079	48 8b c8	 mov	 rcx, rax
  0007c	e8 00 00 00 00	 call	 ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
  00081	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv79[rbp], rax
  00088	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0008f	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00094	48 03 85 10 01
	00 00		 add	 rax, QWORD PTR _Roff$[rbp]
  0009b	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv79[rbp]
  000a2	4c 8b c1	 mov	 r8, rcx
  000a5	48 8b d0	 mov	 rdx, rax
  000a8	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000af	e8 00 00 00 00	 call	 ??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
  000b4	90		 npad	 1

; 719  :             _Right._Mypair._Myval2._Myptr() + _Roff, _Right._Mypair._Myval2._Clamp_suffix_size(_Roff, _Count));
; 720  :     }

  000b5	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bc	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c3	5f		 pop	 rdi
  000c4	5d		 pop	 rbp
  000c5	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
tv79 = 216
this$ = 256
_Right$ = 264
_Roff$ = 272
_Count$ = 280
_Al$ = 288
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 196
this$ = 256
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 689  :     basic_string() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1
  00020	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  0002e	48 8b c8	 mov	 rcx, rax
  00031	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
  00036	90		 npad	 1

; 690  :         _Construct_empty();

  00037	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003e	e8 00 00 00 00	 call	 ?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_empty
  00043	90		 npad	 1

; 691  :     }

  00044	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001a	48 83 c0 08	 add	 rax, 8
  0001e	48 8b c8	 mov	 rcx, rax
  00021	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  00026	90		 npad	 1
  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Switch_to_buf, COMDAT

; 481  :         _CONSTEXPR20 void _Switch_to_buf() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 482  :             _STD _Destroy_in_place(_Ptr);

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8b c8	 mov	 rcx, rax
  0002a	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z ; std::_Destroy_in_place<char *>
  0002f	90		 npad	 1

; 483  : 
; 484  : #if _HAS_CXX20
; 485  :             // start the lifetime of the array elements
; 486  :             if (_STD is_constant_evaluated()) {
; 487  :                 for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 488  :                     _Buf[_Idx] = value_type();
; 489  :                 }
; 490  :             }
; 491  : #endif // _HAS_CXX20
; 492  :         }

  00030	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00037	5f		 pop	 rdi
  00038	5d		 pop	 rbp
  00039	c3		 ret	 0
?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Switch_to_buf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT

; 475  :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1
  00020	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1
  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  0002e	33 c0		 xor	 eax, eax
  00030	b9 10 00 00 00	 mov	 ecx, 16
  00035	f3 aa		 rep stosb
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_Off$ = 264
_Size$ = 272
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size, COMDAT

; 466  :     _NODISCARD _CONSTEXPR20 size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	90		 npad	 1

; 467  :         // trims _Size to the longest it can be assuming a string at/after _Off
; 468  :         return (_STD min)(_Size, _Mysize - _Off);

  0002a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  00038	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0003c	48 2b c1	 sub	 rax, rcx
  0003f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00046	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0004d	48 8d 8d 10 01
	00 00		 lea	 rcx, QWORD PTR _Size$[rbp]
  00054	e8 00 00 00 00	 call	 ??$min@_K@std@@YAAEB_KAEB_K0@Z ; std::min<unsigned __int64>
  00059	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 469  :     }

  0005c	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00063	5f		 pop	 rdi
  00064	5d		 pop	 rbp
  00065	c3		 ret	 0
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 462  :     [[noreturn]] static void _Xran() {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	90		 npad	 1

; 463  :         _Xout_of_range("invalid string position");

  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00023	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPEBD@Z ; std::_Xout_of_range
  00028	90		 npad	 1
$LN2@Xran:

; 464  :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z
_TEXT	SEGMENT
this$ = 224
_Off$ = 232
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Check_offset, COMDAT

; 448  :     _CONSTEXPR20 void _Check_offset(const size_type _Off) const {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 449  :         // checks whether _Off is in the bounds of [0, size()]
; 450  :         if (_Mysize < _Off) {

  00025	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002c	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  00033	48 39 48 18	 cmp	 QWORD PTR [rax+24], rcx
  00037	73 06		 jae	 SHORT $LN2@Check_offs

; 451  :             _Xran();

  00039	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
  0003e	90		 npad	 1
$LN2@Check_offs:
$LN3@Check_offs:

; 452  :         }
; 453  :     }

  0003f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer, COMDAT

; 437  :     _CONSTEXPR20 void _Activate_SSO_buffer() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 438  :         // start the lifetime of the array elements
; 439  : #if _HAS_CXX20
; 440  :         if (_STD is_constant_evaluated()) {
; 441  :             for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 442  :                 _Bx._Buf[_Idx] = value_type();
; 443  :             }
; 444  :         }
; 445  : #endif // _HAS_CXX20
; 446  :     }

  00020	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged, COMDAT

; 433  :     _NODISCARD _CONSTEXPR20 bool _Large_mode_engaged() const noexcept {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 434  :         return _Myres > _Small_string_capacity;

  00020	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 83 78 20 0f	 cmp	 QWORD PTR [rax+32], 15
  0002c	76 0c		 jbe	 SHORT $LN3@Large_mode
  0002e	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv66[rbp], 1
  00038	eb 0a		 jmp	 SHORT $LN4@Large_mode
$LN3@Large_mode:
  0003a	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv66[rbp], 0
$LN4@Large_mode:
  00044	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv66[rbp]

; 435  :     }

  0004b	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
_Result$ = 8
this$ = 256
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 424  :     _NODISCARD _CONSTEXPR20 const value_type* _Myptr() const noexcept {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 425  :         const value_type* _Result = _Bx._Buf;

  00020	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 83 c0 08	 add	 rax, 8
  0002b	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax

; 426  :         if (_Large_mode_engaged()) {

  0002f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00036	e8 00 00 00 00	 call	 ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged
  0003b	0f b6 c0	 movzx	 eax, al
  0003e	85 c0		 test	 eax, eax
  00040	74 14		 je	 SHORT $LN2@Myptr

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004d	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00052	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax
$LN2@Myptr:

; 428  :         }
; 429  : 
; 430  :         return _Result;

  00056	48 8b 45 08	 mov	 rax, QWORD PTR _Result$[rbp]

; 431  :     }

  0005a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00061	5f		 pop	 rdi
  00062	5d		 pop	 rbp
  00063	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
_TEXT	SEGMENT
_Result$ = 8
this$ = 256
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 415  :     _NODISCARD _CONSTEXPR20 value_type* _Myptr() noexcept {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 416  :         value_type* _Result = _Bx._Buf;

  00020	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 83 c0 08	 add	 rax, 8
  0002b	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax

; 417  :         if (_Large_mode_engaged()) {

  0002f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00036	e8 00 00 00 00	 call	 ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged
  0003b	0f b6 c0	 movzx	 eax, al
  0003e	85 c0		 test	 eax, eax
  00040	74 14		 je	 SHORT $LN2@Myptr

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004d	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00052	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax
$LN2@Myptr:

; 419  :         }
; 420  : 
; 421  :         return _Result;

  00056	48 8b 45 08	 mov	 rax, QWORD PTR _Result$[rbp]

; 422  :     }

  0005a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00061	5f		 pop	 rdi
  00062	5d		 pop	 rbp
  00063	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT

; 402  :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1
  00020	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00027	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QEAA@XZ ; std::_Container_base12::_Container_base12
  0002c	90		 npad	 1
  0002d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 83 c0 08	 add	 rax, 8
  00038	48 8b c8	 mov	 rcx, rax
  0003b	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
  00040	90		 npad	 1

; 403  : 
; 404  :     // length of internal buffer, [1, 16] (NB: used by the debugger visualizer)
; 405  :     static constexpr size_type _BUF_SIZE = 16 / sizeof(value_type) < 1 ? 1 : 16 / sizeof(value_type);
; 406  :     // roundup mask for allocated buffers, [0, 15]
; 407  :     static constexpr size_type _Alloc_mask = sizeof(value_type) <= 1 ? 15
; 408  :                                            : sizeof(value_type) <= 2 ? 7
; 409  :                                            : sizeof(value_type) <= 4 ? 3
; 410  :                                            : sizeof(value_type) <= 8 ? 1
; 411  :                                                                      : 0;
; 412  :     // capacity in small mode
; 413  :     static constexpr size_type _Small_string_capacity = _BUF_SIZE - 1;
; 414  : 
; 415  :     _NODISCARD _CONSTEXPR20 value_type* _Myptr() noexcept {
; 416  :         value_type* _Result = _Bx._Buf;
; 417  :         if (_Large_mode_engaged()) {
; 418  :             _Result = _Unfancy(_Bx._Ptr);
; 419  :         }
; 420  : 
; 421  :         return _Result;
; 422  :     }
; 423  : 
; 424  :     _NODISCARD _CONSTEXPR20 const value_type* _Myptr() const noexcept {
; 425  :         const value_type* _Result = _Bx._Buf;
; 426  :         if (_Large_mode_engaged()) {
; 427  :             _Result = _Unfancy(_Bx._Ptr);
; 428  :         }
; 429  : 
; 430  :         return _Result;
; 431  :     }
; 432  : 
; 433  :     _NODISCARD _CONSTEXPR20 bool _Large_mode_engaged() const noexcept {
; 434  :         return _Myres > _Small_string_capacity;
; 435  :     }
; 436  : 
; 437  :     _CONSTEXPR20 void _Activate_SSO_buffer() noexcept {
; 438  :         // start the lifetime of the array elements
; 439  : #if _HAS_CXX20
; 440  :         if (_STD is_constant_evaluated()) {
; 441  :             for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 442  :                 _Bx._Buf[_Idx] = value_type();
; 443  :             }
; 444  :         }
; 445  : #endif // _HAS_CXX20
; 446  :     }
; 447  : 
; 448  :     _CONSTEXPR20 void _Check_offset(const size_type _Off) const {
; 449  :         // checks whether _Off is in the bounds of [0, size()]
; 450  :         if (_Mysize < _Off) {
; 451  :             _Xran();
; 452  :         }
; 453  :     }
; 454  : 
; 455  :     _CONSTEXPR20 void _Check_offset_exclusive(const size_type _Off) const {
; 456  :         // checks whether _Off is in the bounds of [0, size())
; 457  :         if (_Mysize <= _Off) {
; 458  :             _Xran();
; 459  :         }
; 460  :     }
; 461  : 
; 462  :     [[noreturn]] static void _Xran() {
; 463  :         _Xout_of_range("invalid string position");
; 464  :     }
; 465  : 
; 466  :     _NODISCARD _CONSTEXPR20 size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {
; 467  :         // trims _Size to the longest it can be assuming a string at/after _Off
; 468  :         return (_STD min)(_Size, _Mysize - _Off);
; 469  :     }
; 470  : 
; 471  :     union _Bxty { // storage for small buffer or pointer to larger one
; 472  :         // This constructor previously initialized _Ptr. Don't rely on the new behavior without
; 473  :         // renaming `_String_val` (and fixing the visualizer).
; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers
; 475  :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 476  : 
; 477  :         value_type _Buf[_BUF_SIZE];
; 478  :         pointer _Ptr;
; 479  :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 480  : 
; 481  :         _CONSTEXPR20 void _Switch_to_buf() noexcept {
; 482  :             _STD _Destroy_in_place(_Ptr);
; 483  : 
; 484  : #if _HAS_CXX20
; 485  :             // start the lifetime of the array elements
; 486  :             if (_STD is_constant_evaluated()) {
; 487  :                 for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 488  :                     _Buf[_Idx] = value_type();
; 489  :                 }
; 490  :             }
; 491  : #endif // _HAS_CXX20
; 492  :         }
; 493  :     };
; 494  :     _Bxty _Bx;
; 495  : 
; 496  :     // invariant: _Myres >= _Mysize, and _Myres >= _Small_string_capacity (after string's construction)
; 497  :     // neither _Mysize nor _Myres takes account of the extra null terminator
; 498  :     size_type _Mysize = 0; // current length of string (size)

  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00050	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 402  :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

  0005f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00066	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006d	5f		 pop	 rdi
  0006e	5d		 pop	 rbp
  0006f	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
_TEXT	SEGMENT
__formal$ = 224
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 713  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 714  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00020	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1

; 715  :     }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
_TEXT	SEGMENT
this$ = 224
_Count$ = 232
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z PROC		; std::allocator<char>::allocate, COMDAT

; 952  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 953  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 954  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00025	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0002c	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$00@std@@YA_K_K@Z ; std::_Get_size_of_n<1>
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits>

; 955  :     }

  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
_Count$ = 240
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z PROC	; std::allocator<char>::deallocate, COMDAT

; 946  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	90		 npad	 1
$LN4@deallocate:

; 947  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

  0002a	48 83 bd e8 00
	00 00 00	 cmp	 QWORD PTR _Ptr$[rbp], 0
  00032	75 0a		 jne	 SHORT $LN10@deallocate
  00034	48 83 bd f0 00
	00 00 00	 cmp	 QWORD PTR _Count$[rbp], 0
  0003c	75 02		 jne	 SHORT $LN8@deallocate
$LN10@deallocate:
  0003e	eb 6c		 jmp	 SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
  00040	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
  00047	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0004c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00053	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00058	45 33 c9	 xor	 r9d, r9d
  0005b	41 b8 b3 03 00
	00		 mov	 r8d, 947		; 000003b3H
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GC@OGIIGPAB@C?3?2Program?5Files?2Microsoft?5Visu@
  00068	b9 02 00 00 00	 mov	 ecx, 2
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00073	83 f8 01	 cmp	 eax, 1
  00076	75 03		 jne	 SHORT $LN12@deallocate
  00078	cc		 int	 3
  00079	33 c0		 xor	 eax, eax
$LN12@deallocate:
  0007b	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00084	41 b9 b3 03 00
	00		 mov	 r9d, 947		; 000003b3H
  0008a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1ME@MIFAIHL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000a5	90		 npad	 1
  000a6	33 c0		 xor	 eax, eax
  000a8	85 c0		 test	 eax, eax
  000aa	75 94		 jne	 SHORT $LN7@deallocate
$LN9@deallocate:
  000ac	33 c0		 xor	 eax, eax
  000ae	85 c0		 test	 eax, eax
  000b0	0f 85 74 ff ff
	ff		 jne	 $LN4@deallocate

; 948  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 949  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b6	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  000bd	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000c4	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z ; std::_Deallocate<16>
  000c9	90		 npad	 1

; 950  :     }

  000ca	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000d1	5f		 pop	 rdi
  000d2	5d		 pop	 rbp
  000d3	c3		 ret	 0
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ENDP	; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$allocator@D@std@@QEAA@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT

; 938  :     constexpr allocator() noexcept {}

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1
  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
??0?$allocator@D@std@@QEAA@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 516  : [[noreturn]] inline void _Xlen_string() {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83C9EC2B_xstring
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	90		 npad	 1

; 517  :     _Xlength_error("string too long");

  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFNIOLAK@string?5too?5long@
  00023	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
  00028	90		 npad	 1
$LN2@Xlen_strin:

; 518  : }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = 200
_Obj$ = 256
<_Args_0>$ = 264
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 396  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A278CDB8_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 397  : #if _HAS_CXX20
; 398  :     if (_STD is_constant_evaluated()) {
; 399  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 400  :     } else
; 401  : #endif // _HAS_CXX20
; 402  :     {
; 403  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00025	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Obj$[rbp]
  0002c	e8 00 00 00 00	 call	 ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
  00031	48 8b d0	 mov	 rdx, rax
  00034	b9 10 00 00 00	 mov	 ecx, 16
  00039	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0003e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00045	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR <_Args_0>$[rbp]
  0004c	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0004f	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR $T1[rbp]
  00056	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
  0005b	90		 npad	 1

; 404  :     }
; 405  : }

  0005c	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00063	5f		 pop	 rdi
  00064	5d		 pop	 rbp
  00065	c3		 ret	 0
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 1558 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__08D5818C_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1559 :     return __builtin_addressof(_Val);

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 1560 : }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??0_Basic_container_proxy_ptr12@std@@IEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Basic_container_proxy_ptr12@std@@IEAA@XZ PROC	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12, COMDAT

; 1429 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1422 :     _Container_proxy* _Ptr = nullptr;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1429 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003c	5f		 pop	 rdi
  0003d	5d		 pop	 rbp
  0003e	c3		 ret	 0
??0_Basic_container_proxy_ptr12@std@@IEAA@XZ ENDP	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ PROC ; std::_Basic_container_proxy_ptr12::_Release, COMDAT

; 1424 :     constexpr void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1425 :         _Ptr = nullptr;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1426 :     }

  0002e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ENDP ; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\utility
;	COMDAT ??$exchange@PEAU_Iterator_base12@std@@$$T@std@@YAPEAU_Iterator_base12@0@AEAPEAU10@$$QEA$$T@Z
_TEXT	SEGMENT
_Old_val$ = 8
_Val$ = 256
_New_val$ = 264
??$exchange@PEAU_Iterator_base12@std@@$$T@std@@YAPEAU_Iterator_base12@0@AEAPEAU10@$$QEA$$T@Z PROC ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>, COMDAT

; 751  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9D8F0974_utility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 752  :     // assign _New_val to _Val, return previous _Val
; 753  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00025	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]
  0002c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002f	48 89 45 08	 mov	 QWORD PTR _Old_val$[rbp], rax

; 754  :     _Val         = static_cast<_Other&&>(_New_val);

  00033	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]
  0003a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_val$[rbp]
  00041	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00044	48 89 08	 mov	 QWORD PTR [rax], rcx

; 755  :     return _Old_val;

  00047	48 8b 45 08	 mov	 rax, QWORD PTR _Old_val$[rbp]

; 756  : }

  0004b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
??$exchange@PEAU_Iterator_base12@std@@$$T@std@@YAPEAU_Iterator_base12@0@AEAPEAU10@$$QEA$$T@Z ENDP ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Lock$ = 4
__$ArrayPad$ = 216
this$ = 256
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT

; 1205 :     void _Orphan_all_locked_v3() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00018	b9 0a 00 00 00	 mov	 ecx, 10
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 d8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00049	90		 npad	 1

; 1206 :         _Lockit _Lock(_LOCK_DEBUG);

  0004a	ba 03 00 00 00	 mov	 edx, 3
  0004f	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$[rbp]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  00059	90		 npad	 1

; 1207 :         _Orphan_all_unlocked_v3();

  0005a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00061	e8 00 00 00 00	 call	 ?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
  00066	90		 npad	 1

; 1208 :     }

  00067	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$[rbp]
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  00071	90		 npad	 1
  00072	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData
  0007d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00082	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00089	48 33 cd	 xor	 rcx, rbp
  0008c	e8 00 00 00 00	 call	 __security_check_cookie
  00091	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00098	5f		 pop	 rdi
  00099	5d		 pop	 rbp
  0009a	c3		 ret	 0
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Pnext$1 = 8
$T2 = 228
this$ = 288
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT

; 1345 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1346 :     if (!_Myproxy) { // no proxy, already done

  00020	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0002b	75 02		 jne	 SHORT $LN5@Orphan_all

; 1347 :         return;

  0002d	eb 4e		 jmp	 SHORT $LN1@Orphan_all
$LN5@Orphan_all:

; 1348 :     }
; 1349 : 
; 1350 :     // proxy allocated, drain it
; 1351 :     for (auto _Pnext = _STD exchange(_Myproxy->_Myfirstiter, nullptr); _Pnext; _Pnext = _Pnext->_Mynextiter) {

  0002f	48 c7 85 e4 00
	00 00 00 00 00
	00		 mov	 QWORD PTR $T2[rbp], 0
  0003a	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00044	48 83 c0 08	 add	 rax, 8
  00048	48 8d 95 e4 00
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  0004f	48 8b c8	 mov	 rcx, rax
  00052	e8 00 00 00 00	 call	 ??$exchange@PEAU_Iterator_base12@std@@$$T@std@@YAPEAU_Iterator_base12@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
  00057	48 89 45 08	 mov	 QWORD PTR _Pnext$1[rbp], rax
  0005b	eb 0c		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:
  0005d	48 8b 45 08	 mov	 rax, QWORD PTR _Pnext$1[rbp]
  00061	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00065	48 89 45 08	 mov	 QWORD PTR _Pnext$1[rbp], rax
$LN4@Orphan_all:
  00069	48 83 7d 08 00	 cmp	 QWORD PTR _Pnext$1[rbp], 0
  0006e	74 0d		 je	 SHORT $LN1@Orphan_all

; 1352 :         _Pnext->_Myproxy = nullptr;

  00070	48 8b 45 08	 mov	 rax, QWORD PTR _Pnext$1[rbp]
  00074	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1353 :     }

  0007b	eb e0		 jmp	 SHORT $LN2@Orphan_all
$LN1@Orphan_all:

; 1354 : }

  0007d	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00084	5f		 pop	 rdi
  00085	5d		 pop	 rbp
  00086	c3		 ret	 0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 1356 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1357 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1358 : #if _HAS_CXX20
; 1359 :     if (_STD is_constant_evaluated()) {
; 1360 :         _Orphan_all_unlocked_v3();
; 1361 :     } else
; 1362 : #endif // _HAS_CXX20
; 1363 :     {
; 1364 :         _Orphan_all_locked_v3();

  00020	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00027	e8 00 00 00 00	 call	 ?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3
  0002c	90		 npad	 1

; 1365 :     }
; 1366 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1367 : }

  0002d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00034	5f		 pop	 rdi
  00035	5d		 pop	 rbp
  00036	c3		 ret	 0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 1174 :     _CONSTEXPR20 _Container_base12() noexcept = default;

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1175 : 
; 1176 :     _Container_base12(const _Container_base12&)            = delete;
; 1177 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1178 : 
; 1179 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1180 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1181 : 
; 1182 :     template <class _Alloc>
; 1183 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1184 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1185 :         _Construct_in_place(*_New_proxy, this);
; 1186 :         _Myproxy            = _New_proxy;
; 1187 :         _New_proxy->_Mycont = this;
; 1188 :     }
; 1189 : 
; 1190 :     template <class _Alloc>
; 1191 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1192 :         // pre: no iterators refer to the existing proxy
; 1193 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1194 :         _Construct_in_place(*_New_proxy, this);
; 1195 :         _New_proxy->_Mycont = this;
; 1196 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1197 :     }
; 1198 : 
; 1199 :     _Container_proxy* _Myproxy = nullptr;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1174 :     _CONSTEXPR20 _Container_base12() noexcept = default;

  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003c	5f		 pop	 rdi
  0003d	5d		 pop	 rbp
  0003e	c3		 ret	 0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 224
_Mycont_$ = 232
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT

; 1166 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1
  00025	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002c	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Mycont_$[rbp]
  00033	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1167 : 
; 1168 :     const _Container_base12* _Mycont       = nullptr;
; 1169 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 1166 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

  00045	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00053	5f		 pop	 rdi
  00054	5d		 pop	 rbp
  00055	c3		 ret	 0
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 8
_Ptr_container$ = 40
_Min_back_shift$ = 72
_Back_shift$ = 104
_Ptr$ = 352
_Bytes$ = 360
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 169  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00013	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 170  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 171  :     _Bytes += _Non_user_size;

  00025	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  0002c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002f	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  00033	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  0003a	48 89 01	 mov	 QWORD PTR [rcx], rax

; 172  : 
; 173  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

  0003d	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00044	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00047	48 89 45 08	 mov	 QWORD PTR _Ptr_user$[rbp], rax

; 174  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0004b	b8 08 00 00 00	 mov	 eax, 8
  00050	48 6b c0 ff	 imul	 rax, rax, -1
  00054	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr_user$[rbp]
  00058	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0005c	48 89 45 28	 mov	 QWORD PTR _Ptr_container$[rbp], rax
$LN4@Adjust_man:

; 175  : 
; 176  :     // If the following asserts, it likely means that we are performing
; 177  :     // an aligned delete on memory coming from an unaligned allocation.
; 178  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  00060	b8 08 00 00 00	 mov	 eax, 8
  00065	48 6b c0 fe	 imul	 rax, rax, -2
  00069	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr_user$[rbp]
  0006d	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  00077	48 39 14 01	 cmp	 QWORD PTR [rcx+rax], rdx
  0007b	75 02		 jne	 SHORT $LN14@Adjust_man
  0007d	eb 78		 jmp	 SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
  0007f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  00085	83 c0 09	 add	 eax, 9
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  0008f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0009b	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000a0	45 33 c9	 xor	 r9d, r9d
  000a3	44 8b c0	 mov	 r8d, eax
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GC@OGIIGPAB@C?3?2Program?5Files?2Microsoft?5Visu@
  000ad	b9 02 00 00 00	 mov	 ecx, 2
  000b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  000b8	83 f8 01	 cmp	 eax, 1
  000bb	75 03		 jne	 SHORT $LN19@Adjust_man
  000bd	cc		 int	 3
  000be	33 c0		 xor	 eax, eax
$LN19@Adjust_man:
  000c0	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  000c6	83 c0 09	 add	 eax, 9
  000c9	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000d2	44 8b c8	 mov	 r9d, eax
  000d5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1ME@MIFAIHL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  000ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000f0	90		 npad	 1
  000f1	33 c0		 xor	 eax, eax
  000f3	85 c0		 test	 eax, eax
  000f5	75 88		 jne	 SHORT $LN7@Adjust_man
$LN15@Adjust_man:
  000f7	33 c0		 xor	 eax, eax
  000f9	85 c0		 test	 eax, eax
  000fb	0f 85 5f ff ff
	ff		 jne	 $LN4@Adjust_man

; 179  : 
; 180  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 181  :     // in range [_Min_back_shift, _Non_user_size]
; 182  : #ifdef _DEBUG
; 183  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

  00101	48 c7 45 48 10
	00 00 00	 mov	 QWORD PTR _Min_back_shift$[rbp], 16

; 184  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 185  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 186  : #endif // ^^^ !defined(_DEBUG) ^^^
; 187  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00109	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00110	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr_container$[rbp]
  00114	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00117	48 2b c1	 sub	 rax, rcx
  0011a	48 89 45 68	 mov	 QWORD PTR _Back_shift$[rbp], rax
$LN10@Adjust_man:

; 188  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0011e	48 83 7d 68 10	 cmp	 QWORD PTR _Back_shift$[rbp], 16
  00123	72 09		 jb	 SHORT $LN16@Adjust_man
  00125	48 83 7d 68 2f	 cmp	 QWORD PTR _Back_shift$[rbp], 47 ; 0000002fH
  0012a	77 02		 ja	 SHORT $LN16@Adjust_man
  0012c	eb 78		 jmp	 SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
  0012e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  00134	83 c0 13	 add	 eax, 19
  00137	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  0013e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0014a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0014f	45 33 c9	 xor	 r9d, r9d
  00152	44 8b c0	 mov	 r8d, eax
  00155	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GC@OGIIGPAB@C?3?2Program?5Files?2Microsoft?5Visu@
  0015c	b9 02 00 00 00	 mov	 ecx, 2
  00161	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00167	83 f8 01	 cmp	 eax, 1
  0016a	75 03		 jne	 SHORT $LN20@Adjust_man
  0016c	cc		 int	 3
  0016d	33 c0		 xor	 eax, eax
$LN20@Adjust_man:
  0016f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  00175	83 c0 13	 add	 eax, 19
  00178	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00181	44 8b c8	 mov	 r9d, eax
  00184	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1ME@MIFAIHL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0018b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
  00192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00199	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  0019f	90		 npad	 1
  001a0	33 c0		 xor	 eax, eax
  001a2	85 c0		 test	 eax, eax
  001a4	75 88		 jne	 SHORT $LN13@Adjust_man
$LN17@Adjust_man:
  001a6	33 c0		 xor	 eax, eax
  001a8	85 c0		 test	 eax, eax
  001aa	0f 85 6e ff ff
	ff		 jne	 $LN10@Adjust_man

; 189  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001b0	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  001b7	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr_container$[rbp]
  001bb	48 89 08	 mov	 QWORD PTR [rax], rcx

; 190  : }

  001be	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  001c5	5f		 pop	 rdi
  001c6	5d		 pop	 rbp
  001c7	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 224
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 100  :         void* _Allocate(const size_t _Bytes) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 101  :         return ::operator new(_Bytes);

  00020	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00027	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 102  :     }

  0002c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00033	5f		 pop	 rdi
  00034	5d		 pop	 rbp
  00035	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 200
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 74   : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F71A6AB7_xmemory
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	90		 npad	 1

; 75   :     _THROW(bad_array_new_length{});

  0001c	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00023	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QEAA@XZ ; std::bad_array_new_length::bad_array_new_length
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
  0002f	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00036	e8 00 00 00 00	 call	 _CxxThrowException
  0003b	90		 npad	 1
$LN2@Throw_bad_:

; 76   : }

  0003c	48 8d a5 f8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+248]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\__msvc_string_view.hpp
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 450  :     _NODISCARD static constexpr int_type eof() noexcept {

$LN4:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3D3FEF16___msvc_string_view@hpp
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	90		 npad	 1

; 451  :         return static_cast<int_type>(EOF);

  0001c	b8 ff ff ff ff	 mov	 eax, -1

; 452  :     }

  00021	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00028	5f		 pop	 rdi
  00029	5d		 pop	 rbp
  0002a	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\__msvc_string_view.hpp
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
_TEXT	SEGMENT
tv65 = 192
_Left$ = 240
_Right$ = 248
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 442  :     _NODISCARD static constexpr bool eq_int_type(const int_type _Left, const int_type _Right) noexcept {

$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	55		 push	 rbp
  00009	57		 push	 rdi
  0000a	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00011	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3D3FEF16___msvc_string_view@hpp
  0001d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00022	90		 npad	 1

; 443  :         return _Left == _Right;

  00023	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR _Right$[rbp]
  00029	39 85 f0 00 00
	00		 cmp	 DWORD PTR _Left$[rbp], eax
  0002f	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00031	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv65[rbp], 1
  0003b	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  0003d	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv65[rbp], 0
$LN4@eq_int_typ:
  00047	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv65[rbp]

; 444  :     }

  0004e	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00055	5f		 pop	 rdi
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\__msvc_string_view.hpp
;	COMDAT ?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z
_TEXT	SEGMENT
_Meta$ = 224
?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z PROC	; std::_Narrow_char_traits<char,int>::to_char_type, COMDAT

; 434  :     _NODISCARD static constexpr _Elem to_char_type(const int_type _Meta) noexcept {

$LN4:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3D3FEF16___msvc_string_view@hpp
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001e	90		 npad	 1

; 435  :         return static_cast<_Elem>(_Meta);

  0001f	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR _Meta$[rbp]

; 436  :     }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z ENDP	; std::_Narrow_char_traits<char,int>::to_char_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\__msvc_string_view.hpp
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
_TEXT	SEGMENT
_Left$ = 224
_Right$ = 232
?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z PROC ; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 417  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3D3FEF16___msvc_string_view@hpp
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 418  : #if _HAS_CXX20
; 419  :         if (_STD is_constant_evaluated()) {
; 420  :             return _Primary_char_traits::assign(_Left, _Right);
; 421  :         }
; 422  : #endif // _HAS_CXX20
; 423  :         _Left = _Right;

  00025	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0002c	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00033	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00036	88 08		 mov	 BYTE PTR [rax], cl

; 424  :     }

  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ENDP ; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\__msvc_string_view.hpp
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
_TEXT	SEGMENT
_First$ = 224
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 364  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3D3FEF16___msvc_string_view@hpp
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 365  :         // find length of null-terminated string
; 366  : #if _HAS_CXX17
; 367  : #ifdef __cpp_char8_t
; 368  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 369  : #if _HAS_U8_INTRINSICS
; 370  :             return __builtin_u8strlen(_First);
; 371  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 372  :             return _Primary_char_traits::length(_First);
; 373  : #endif // ^^^ no u8 intrinsics ^^^
; 374  :         } else
; 375  : #endif // defined(__cpp_char8_t)
; 376  :         {
; 377  :             return __builtin_strlen(_First);
; 378  :         }
; 379  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 380  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00020	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First$[rbp]
  00027	e8 00 00 00 00	 call	 strlen

; 381  : #endif // ^^^ !_HAS_CXX17 ^^^
; 382  :     }

  0002c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00033	5f		 pop	 rdi
  00034	5d		 pop	 rbp
  00035	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\__msvc_string_view.hpp
;	COMDAT ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
_TEXT	SEGMENT
_First1$ = 224
_First2$ = 232
_Count$ = 240
?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z PROC	; std::_Char_traits<char,int>::copy, COMDAT

; 43   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3D3FEF16___msvc_string_view@hpp
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	90		 npad	 1

; 44   :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 45   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 46   :         __builtin_memcpy(_First1, _First2, _Count * sizeof(_Elem));
; 47   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS / !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 48   : #if _HAS_CXX20
; 49   :         if (_STD is_constant_evaluated()) {
; 50   :             // pre: [_First1, _First1 + _Count) and [_First2, _First2 + _Count) do not overlap
; 51   :             for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 52   :                 _First1[_Idx] = _First2[_Idx];
; 53   :             }
; 54   : 
; 55   :             return _First1;
; 56   :         }
; 57   : #endif // _HAS_CXX20
; 58   : 
; 59   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002a	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00031	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _First2$[rbp]
  00038	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First1$[rbp]
  0003f	e8 00 00 00 00	 call	 memcpy
  00044	90		 npad	 1

; 60   : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 61   : 
; 62   :         return _First1;

  00045	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _First1$[rbp]

; 63   :     }

  0004c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00053	5f		 pop	 rdi
  00054	5d		 pop	 rbp
  00055	c3		 ret	 0
?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ENDP	; std::_Char_traits<char,int>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UEAA@XZ
  00023	90		 npad	 1
  00024	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  0002a	83 e0 01	 and	 eax, 1
  0002d	85 c0		 test	 eax, eax
  0002f	74 12		 je	 SHORT $LN2@scalar
  00031	ba 18 00 00 00	 mov	 edx, 24
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00042	90		 npad	 1
$LN2@scalar:
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR __that$[rbp]
  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QEAA@AEBV01@@Z
  0002b	90		 npad	 1
  0002c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  0003a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0001f	90		 npad	 1
  00020	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 144  :     {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DB8826E5_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 143  :         : bad_alloc("bad array new length")

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  00027	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002e	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AEAA@QEBD@Z ; std::bad_alloc::bad_alloc
  00033	90		 npad	 1

; 144  :     {

  00034	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  00042	48 89 08	 mov	 QWORD PTR [rax], rcx

; 145  :     }

  00045	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00053	5f		 pop	 rdi
  00054	5d		 pop	 rbp
  00055	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  00023	90		 npad	 1
  00024	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  0002a	83 e0 01	 and	 eax, 1
  0002d	85 c0		 test	 eax, eax
  0002f	74 12		 je	 SHORT $LN2@scalar
  00031	ba 18 00 00 00	 mov	 edx, 24
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00042	90		 npad	 1
$LN2@scalar:
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR __that$[rbp]
  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@AEBV01@@Z ; std::exception::exception
  0002b	90		 npad	 1
  0002c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  0003a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001f	90		 npad	 1
  00020	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 224
_Message$ = 232
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 133  :     {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DB8826E5_vcruntime_exception@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 132  :         : exception(_Message, 1)

  00025	41 b8 01 00 00
	00		 mov	 r8d, 1
  0002b	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Message$[rbp]
  00032	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBDH@Z ; std::exception::exception
  0003e	90		 npad	 1

; 133  :     {

  0003f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  0004d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 134  :     }

  00050	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005e	5f		 pop	 rdi
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00023	90		 npad	 1
  00024	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  0002a	83 e0 01	 and	 eax, 1
  0002d	85 c0		 test	 eax, eax
  0002f	74 12		 je	 SHORT $LN2@scalar
  00031	ba 18 00 00 00	 mov	 edx, 24
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00042	90		 npad	 1
$LN2@scalar:
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 192
this$ = 240
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 95   :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DB8826E5_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00020	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0002c	74 14		 je	 SHORT $LN3@what
  0002e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00039	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  00040	eb 0e		 jmp	 SHORT $LN4@what
$LN3@what:
  00042	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  00049	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
$LN4@what:
  00050	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv69[rbp]

; 97   :     }

  00057	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0005e	5f		 pop	 rdi
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 90   :     {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DB8826E5_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1
  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0002e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 91   :         __std_exception_destroy(&_Data);

  00031	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	48 8b c8	 mov	 rcx, rax
  0003f	e8 00 00 00 00	 call	 __std_exception_destroy
  00044	90		 npad	 1

; 92   :     }

  00045	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
_Other$ = 232
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 73   :     {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DB8826E5_vcruntime_exception@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1
  00025	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00033	48 89 08	 mov	 QWORD PTR [rax], rcx

; 72   :         : _Data()

  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 83 c0 08	 add	 rax, 8
  00041	48 8b f8	 mov	 rdi, rax
  00044	33 c0		 xor	 eax, eax
  00046	b9 10 00 00 00	 mov	 ecx, 16
  0004b	f3 aa		 rep stosb

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0004d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00054	48 83 c0 08	 add	 rax, 8
  00058	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Other$[rbp]
  0005f	48 83 c1 08	 add	 rcx, 8
  00063	48 8b d0	 mov	 rdx, rax
  00066	e8 00 00 00 00	 call	 __std_exception_copy
  0006b	90		 npad	 1

; 75   :     }

  0006c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 224
_Message$ = 232
__formal$ = 240
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 67   :     {

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DB8826E5_vcruntime_exception@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	90		 npad	 1
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00038	48 89 08	 mov	 QWORD PTR [rax], rcx

; 66   :         : _Data()

  0003b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 83 c0 08	 add	 rax, 8
  00046	48 8b f8	 mov	 rdi, rax
  00049	33 c0		 xor	 eax, eax
  0004b	b9 10 00 00 00	 mov	 ecx, 16
  00050	f3 aa		 rep stosb

; 68   :         _Data._What = _Message;

  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Message$[rbp]
  00060	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 69   :     }

  00064	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 224
_Where$ = 232
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 164  :     {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__72E6C6A2_vcruntime_new@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 165  :         (void)_Size;
; 166  :         return _Where;

  00025	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Where$[rbp]

; 167  :     }

  0002c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00033	5f		 pop	 rdi
  00034	5d		 pop	 rbp
  00035	c3		 ret	 0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pipec\sem2\kpo\lab3\test\test\test.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1C9D9D2D_test@cpp
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1
  00025	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002c	5f		 pop	 rdi
  0002d	5d		 pop	 rbp
  0002e	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pipec\sem2\kpo\lab3\test\test\test.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 224
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1C9D9D2D_test@cpp
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1
  00020	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
